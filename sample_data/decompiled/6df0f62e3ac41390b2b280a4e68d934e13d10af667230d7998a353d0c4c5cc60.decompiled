[{"addr": 4202496, "funname": ".init_proc", "code": "__int64 (**init_proc())(void)\n{\n__int64 (**result)(void); // rax\n\nresult = &_gmon_start__;\nif ( &_gmon_start__ )\nresult = (__int64 (**)(void))_gmon_start__();\nreturn result;\n}"}, {"addr": 4202528, "funname": "sub_402020", "code": "__int64 sub_402020()\n{\nreturn qword_413010();\n}"}, {"addr": 4202544, "funname": ".free", "code": "// attributes: thunk\nvoid free(void *ptr)\n{\nfree(ptr);\n}"}, {"addr": 4202560, "funname": ".__errno_location", "code": "// attributes: thunk\nint *__errno_location(void)\n{\nreturn _errno_location();\n}"}, {"addr": 4202576, "funname": ".unlink", "code": "// attributes: thunk\nint unlink(const char *name)\n{\nreturn unlink(name);\n}"}, {"addr": 4202592, "funname": ".pcap_activate", "code": "// attributes: thunk\n__int64 pcap_activate()\n{\nreturn pcap_activate();\n}"}, {"addr": 4202608, "funname": ".strncpy", "code": "// attributes: thunk\nchar *strncpy(char *dest, const char *src, size_t n)\n{\nreturn strncpy(dest, src, n);\n}"}, {"addr": 4202624, "funname": ".pcap_setfilter", "code": "// attributes: thunk\n__int64 pcap_setfilter()\n{\nreturn pcap_setfilter();\n}"}, {"addr": 4202640, "funname": ".strncmp", "code": "// attributes: thunk\nint strncmp(const char *s1, const char *s2, size_t n)\n{\nreturn strncmp(s1, s2, n);\n}"}, {"addr": 4202656, "funname": ".fcntl", "code": "// attributes: thunk\nint fcntl(int fd, int cmd, ...)\n{\nreturn fcntl(fd, cmd);\n}"}, {"addr": 4202672, "funname": ".write", "code": "// attributes: thunk\nssize_t write(int fd, const void *buf, size_t n)\n{\nreturn write(fd, buf, n);\n}"}, {"addr": 4202688, "funname": ".getpid", "code": "// attributes: thunk\n__pid_t getpid(void)\n{\nreturn getpid();\n}"}, {"addr": 4202704, "funname": ".fclose", "code": "// attributes: thunk\nint fclose(FILE *stream)\n{\nreturn fclose(stream);\n}"}, {"addr": 4202720, "funname": ".pcap_set_timeout", "code": "// attributes: thunk\n__int64 pcap_set_timeout()\n{\nreturn pcap_set_timeout();\n}"}, {"addr": 4202736, "funname": ".strlen", "code": "// attributes: thunk\nsize_t strlen(const char *s)\n{\nreturn strlen(s);\n}"}, {"addr": 4202752, "funname": ".pcap_create", "code": "// attributes: thunk\n__int64 pcap_create()\n{\nreturn pcap_create();\n}"}, {"addr": 4202768, "funname": ".system", "code": "// attributes: thunk\nint system(const char *command)\n{\nreturn system(command);\n}"}, {"addr": 4202784, "funname": ".htons", "code": "// attributes: thunk\nuint16_t htons(uint16_t hostshort)\n{\nreturn htons(hostshort);\n}"}, {"addr": 4202800, "funname": ".dup2", "code": "// attributes: thunk\nint dup2(int fd, int fd2)\n{\nreturn dup2(fd, fd2);\n}"}, {"addr": 4202816, "funname": ".strchr", "code": "// attributes: thunk\nchar *strchr(const char *s, int c)\n{\nreturn strchr(s, c);\n}"}, {"addr": 4202832, "funname": ".snprintf", "code": "// attributes: thunk\nint snprintf(char *s, size_t maxlen, const char *format, ...)\n{\nreturn snprintf(s, maxlen, format);\n}"}, {"addr": 4202848, "funname": ".pcap_close", "code": "// attributes: thunk\n__int64 pcap_close()\n{\nreturn pcap_close();\n}"}, {"addr": 4202864, "funname": ".gettimeofday", "code": "// attributes: thunk\nint gettimeofday(struct timeval *tv, __timezone_ptr_t tz)\n{\nreturn gettimeofday(tv, tz);\n}"}, {"addr": 4202880, "funname": ".htonl", "code": "// attributes: thunk\nuint32_t htonl(uint32_t hostlong)\n{\nreturn htonl(hostlong);\n}"}, {"addr": 4202896, "funname": ".memset", "code": "// attributes: thunk\nvoid *memset(void *s, int c, size_t n)\n{\nreturn memset(s, c, n);\n}"}, {"addr": 4202912, "funname": ".index", "code": "// attributes: thunk\nchar *index(const char *s, int c)\n{\nreturn index(s, c);\n}"}, {"addr": 4202928, "funname": ".scandir", "code": "// attributes: thunk\nint scandir(const char *dir, struct dirent ***namelist, int (*selector)(const struct dirent *), int (*cmp)(const struct dirent **, const struct dirent **))\n{\nreturn scandir(dir, namelist, selector, cmp);\n}"}, {"addr": 4202944, "funname": ".close", "code": "// attributes: thunk\nint close(int fd)\n{\nreturn close(fd);\n}"}, {"addr": 4202960, "funname": ".pcap_set_snaplen", "code": "// attributes: thunk\n__int64 pcap_set_snaplen()\n{\nreturn pcap_set_snaplen();\n}"}, {"addr": 4202976, "funname": ".pipe", "code": "// attributes: thunk\nint pipe(int pipedes[2])\n{\nreturn pipe(pipedes);\n}"}, {"addr": 4202992, "funname": ".alphasort", "code": "// attributes: thunk\nint alphasort(const struct dirent **e1, const struct dirent **e2)\n{\nreturn alphasort(e1, e2);\n}"}, {"addr": 4203008, "funname": ".read", "code": "// attributes: thunk\nssize_t read(int fd, void *buf, size_t nbytes)\n{\nreturn read(fd, buf, nbytes);\n}"}, {"addr": 4203024, "funname": ".memcmp", "code": "// attributes: thunk\nint memcmp(const void *s1, const void *s2, size_t n)\n{\nreturn memcmp(s1, s2, n);\n}"}, {"addr": 4203040, "funname": ".fgets", "code": "// attributes: thunk\nchar *fgets(char *s, int n, FILE *stream)\n{\nreturn fgets(s, n, stream);\n}"}, {"addr": 4203056, "funname": ".strcmp", "code": "// attributes: thunk\nint strcmp(const char *s1, const char *s2)\n{\nreturn strcmp(s1, s2);\n}"}, {"addr": 4203072, "funname": ".signal", "code": "// attributes: thunk\n__sighandler_t signal(int sig, __sighandler_t handler)\n{\nreturn signal(sig, handler);\n}"}, {"addr": 4203088, "funname": ".pcap_set_promisc", "code": "// attributes: thunk\n__int64 pcap_set_promisc()\n{\nreturn pcap_set_promisc();\n}"}, {"addr": 4203104, "funname": ".fprintf", "code": "// attributes: thunk\nint fprintf(FILE *stream, const char *format, ...)\n{\nreturn fprintf(stream, format);\n}"}, {"addr": 4203120, "funname": ".memcpy", "code": "// attributes: thunk\nvoid *memcpy(void *dest, const void *src, size_t n)\n{\nreturn memcpy(dest, src, n);\n}"}, {"addr": 4203136, "funname": ".kill", "code": "// attributes: thunk\nint kill(__pid_t pid, int sig)\n{\nreturn kill(pid, sig);\n}"}, {"addr": 4203152, "funname": ".select", "code": "// attributes: thunk\nint select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)\n{\nreturn select(nfds, readfds, writefds, exceptfds, timeout);\n}"}, {"addr": 4203168, "funname": ".__xstat", "code": "// attributes: thunk\nint __xstat(int ver, const char *filename, struct stat *stat_buf)\n{\nreturn _xstat(ver, filename, stat_buf);\n}"}, {"addr": 4203184, "funname": ".pcap_sendpacket", "code": "// attributes: thunk\n__int64 pcap_sendpacket()\n{\nreturn pcap_sendpacket();\n}"}, {"addr": 4203200, "funname": ".malloc", "code": "// attributes: thunk\nvoid *malloc(size_t size)\n{\nreturn malloc(size);\n}"}, {"addr": 4203216, "funname": ".__fxstat", "code": "// attributes: thunk\nint __fxstat(int ver, int fildes, struct stat *stat_buf)\n{\nreturn _fxstat(ver, fildes, stat_buf);\n}"}, {"addr": 4203232, "funname": ".setitimer", "code": "// attributes: thunk\nint setitimer(__itimer_which_t which, const struct itimerval *a2, struct itimerval *old)\n{\nreturn setitimer(which, a2, old);\n}"}, {"addr": 4203248, "funname": ".ntohs", "code": "// attributes: thunk\nuint16_t ntohs(uint16_t netshort)\n{\nreturn ntohs(netshort);\n}"}, {"addr": 4203264, "funname": ".memmove", "code": "// attributes: thunk\nvoid *memmove(void *dest, const void *src, size_t n)\n{\nreturn memmove(dest, src, n);\n}"}, {"addr": 4203280, "funname": ".open", "code": "// attributes: thunk\nint open(const char *file, int oflag, ...)\n{\nreturn open(file, oflag);\n}"}, {"addr": 4203296, "funname": ".fopen", "code": "// attributes: thunk\nFILE *fopen(const char *filename, const char *modes)\n{\nreturn fopen(filename, modes);\n}"}, {"addr": 4203312, "funname": ".perror", "code": "// attributes: thunk\nvoid perror(const char *s)\n{\nperror(s);\n}"}, {"addr": 4203328, "funname": ".getopt", "code": "// attributes: thunk\nint getopt(int argc, char *const *argv, const char *shortopts)\n{\nreturn getopt(argc, argv, shortopts);\n}"}, {"addr": 4203344, "funname": ".creat", "code": "// attributes: thunk\nint creat(const char *file, mode_t mode)\n{\nreturn creat(file, mode);\n}"}, {"addr": 4203360, "funname": ".sprintf", "code": "// attributes: thunk\nint sprintf(char *s, const char *format, ...)\n{\nreturn sprintf(s, format);\n}"}, {"addr": 4203376, "funname": ".getppid", "code": "// attributes: thunk\n__pid_t getppid(void)\n{\nreturn getppid();\n}"}, {"addr": 4203392, "funname": ".exit", "code": "// attributes: thunk\nvoid __noreturn exit(int status)\n{\nexit(status);\n}"}, {"addr": 4203408, "funname": ".fwrite", "code": "// attributes: thunk\nsize_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)\n{\nreturn fwrite(ptr, size, n, s);\n}"}, {"addr": 4203424, "funname": ".ntohl", "code": "// attributes: thunk\nuint32_t ntohl(uint32_t netlong)\n{\nreturn ntohl(netlong);\n}"}, {"addr": 4203440, "funname": ".sleep", "code": "// attributes: thunk\nunsigned int sleep(unsigned int seconds)\n{\nreturn sleep(seconds);\n}"}, {"addr": 4203456, "funname": ".wait", "code": "// attributes: thunk\n__pid_t wait(__WAIT_STATUS stat_loc)\n{\nreturn wait(stat_loc);\n}"}, {"addr": 4203472, "funname": ".fork", "code": "// attributes: thunk\n__pid_t fork(void)\n{\nreturn fork();\n}"}, {"addr": 4203488, "funname": ".pcap_dispatch", "code": "// attributes: thunk\n__int64 pcap_dispatch()\n{\nreturn pcap_dispatch();\n}"}, {"addr": 4203504, "funname": ".pcap_set_buffer_size", "code": "// attributes: thunk\n__int64 pcap_set_buffer_size()\n{\nreturn pcap_set_buffer_size();\n}"}, {"addr": 4203520, "funname": ".socket", "code": "// attributes: thunk\nint socket(int domain, int type, int protocol)\n{\nreturn socket(domain, type, protocol);\n}"}, {"addr": 4203536, "funname": "start", "code": "// positive sp value has been detected, the output may be wrong!\nvoid __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void))\n{\n__int64 v3; // rax\nint v4; // esi\n__int64 v5; // [rsp-8h] [rbp-8h] BYREF\nchar *retaddr; // [rsp+0h] [rbp+0h] BYREF\n\nv4 = v5;\nv5 = v3;\n_libc_start_main(main, v4, &retaddr, init, fini, a3, &v5);\n__halt();\n}"}, {"addr": 4203584, "funname": "nullsub_1", "code": "void nullsub_1()\n{\n;\n}"}, {"addr": 4203600, "funname": "sub_402450", "code": "char ***sub_402450()\n{\nreturn &environ;\n}"}, {"addr": 4203712, "funname": "sub_4024C0", "code": "char ***sub_4024C0()\n{\nchar ***result; // rax\n\nif ( !byte_413F08 )\n{\nresult = sub_402450();\nbyte_413F08 = 1;\n}\nreturn result;\n}"}, {"addr": 4203760, "funname": "sub_4024F0", "code": "// attributes: thunk\n__int64 sub_4024F0()\n{\nreturn 0LL;\n}"}, {"addr": 4203762, "funname": "sub_4024F2", "code": "_QWORD *__fastcall sub_4024F2(_QWORD *a1)\n{\n_QWORD *result; // rax\n\n*a1 = a1;\nresult = a1;\na1[1] = a1;\nreturn result;\n}"}, {"addr": 4203796, "funname": "sub_402514", "code": "_QWORD *__fastcall sub_402514(_QWORD *a1, _QWORD *a2, __int64 a3)\n{\n_QWORD *result; // rax\n\n*(_QWORD *)(a3 + 8) = a1;\n*a1 = a3;\na1[1] = a2;\nresult = a2;\n*a2 = a1;\nreturn result;\n}"}, {"addr": 4203861, "funname": "sub_402555", "code": "_QWORD *__fastcall sub_402555(_QWORD *a1, __int64 *a2)\n{\nreturn sub_402514(a1, a2, *a2);\n}"}, {"addr": 4203906, "funname": "sub_402582", "code": "_QWORD *__fastcall sub_402582(_QWORD *a1, __int64 a2)\n{\n_QWORD *result; // rax\n\n*(_QWORD *)(a2 + 8) = a1;\nresult = a1;\n*a1 = a2;\nreturn result;\n}"}, {"addr": 4203944, "funname": "sub_4025A8", "code": "__int64 __fastcall sub_4025A8(__int64 a1)\n{\n__int64 result; // rax\n\nsub_402582(*(_QWORD **)(a1 + 8), *(_QWORD *)a1);\n*(_QWORD *)a1 = 0LL;\nresult = a1;\n*(_QWORD *)(a1 + 8) = 0LL;\nreturn result;\n}"}, {"addr": 4204008, "funname": "sub_4025E8", "code": "__int64 __fastcall sub_4025E8(__int64 a1, unsigned int a2)\n{\nreturn a2;\n}"}, {"addr": 4204024, "funname": "sub_4025F8", "code": "__int64 __fastcall sub_4025F8(__int64 a1, __int64 a2, unsigned __int8 a3)\n{\n__int64 v5; // [rsp+28h] [rbp-8h]\n\nv5 = pcap_create();\nif ( v5 )\n{\npcap_set_snaplen();\npcap_set_promisc();\npcap_set_timeout();\npcap_set_buffer_size();\npcap_activate();\nsub_4025E8(v5, a3);\n}\nreturn v5;\n}"}, {"addr": 4205229, "funname": "sub_402AAD", "code": "__int64 __fastcall sub_402AAD(unsigned __int16 a1, unsigned __int8 *a2, unsigned __int16 a3)\n{\nunsigned __int16 v5; // [rsp+1Eh] [rbp-12h]\nunsigned __int16 v6; // [rsp+1Eh] [rbp-12h]\nunsigned __int8 *v7; // [rsp+20h] [rbp-10h]\nunsigned __int8 *v8; // [rsp+28h] [rbp-8h]\n\nv8 = a2;\nv7 = &a2[a3 - 1];\nwhile ( v8 < v7 )\n{\nv5 = (*v8 << 8) + v8[1];\na1 += v5;\nif ( a1 < v5 )\n++a1;\nv8 += 2;\n}\nif ( v8 == v7 )\n{\nv6 = *v8 << 8;\na1 += v6;\nif ( a1 < v6 )\n++a1;\n}\nreturn a1;\n}"}, {"addr": 4205421, "funname": "sub_402B6D", "code": "__int64 __fastcall sub_402B6D(__int64 a1)\n{\nchar *v1; // rax\n__int16 v2; // ax\nunsigned __int16 v3; // ax\n__int16 v5; // [rsp+1Ch] [rbp-4h]\nuint16_t v6; // [rsp+1Ch] [rbp-4h]\n__int16 v7; // [rsp+1Eh] [rbp-2h]\n__int16 v8; // [rsp+1Eh] [rbp-2h]\n\nmemmove(off_4132D8, (const void *)a1, 0x2AuLL);\nv1 = (char *)off_4132D8 + 6;\n*(_DWORD *)((char *)off_4132D8 + 6) = dword_4132D0;\n*((_WORD *)v1 + 2) = word_4132D4;\nmemmove(off_4132D8, (const void *)(a1 + 6), 6uLL);\nv2 = ntohl(*(_DWORD *)((char *)off_4132D8 + 46));\nv5 = v2 + 48;\n*((_BYTE *)off_4132D8 + 16) = (unsigned __int16)(v2 + 48) >> 8;\n*((_BYTE *)off_4132D8 + 17) = v2 + 48;\n*(_DWORD *)((char *)off_4132D8 + 26) = *(_DWORD *)(a1 + 58);\n*(_DWORD *)((char *)off_4132D8 + 30) = *(_DWORD *)(a1 + 26);\n*((_WORD *)off_4132D8 + 12) = 0;\nv7 = sub_402AAD(0, (unsigned __int8 *)off_4132D8 + 14, 0x14u);\nif ( !v7 )\nv7 = -1;\n*((_WORD *)off_4132D8 + 12) = htons(~v7);\n*((_WORD *)off_4132D8 + 17) = *(_WORD *)(a1 + 36);\n*((_WORD *)off_4132D8 + 18) = *(_WORD *)(a1 + 34);\nv6 = v5 - 20;\n*((_WORD *)off_4132D8 + 19) = htons(v6);\n*((_WORD *)off_4132D8 + 20) = 0;\nv3 = sub_402AAD(v6 + 17, (unsigned __int8 *)off_4132D8 + 26, 8u);\nv8 = sub_402AAD(v3, (unsigned __int8 *)off_4132D8 + 34, v6);\nif ( !v8 )\nv8 = -1;\n*((_WORD *)off_4132D8 + 20) = htons(~v8);\nntohl(*(_DWORD *)((char *)off_4132D8 + 46));\nreturn pcap_sendpacket();\n}"}, {"addr": 4205985, "funname": "sub_402DA1", "code": "__int64 __fastcall sub_402DA1(int a1)\n{\n__int64 result; // rax\n\nresult = (unsigned int)dword_4132E4;\nif ( a1 != dword_4132E4 )\n{\nif ( a1 < dword_4132E4 )\n{\nif ( a1 <= 3 && dword_4132E4 > 3 )\n{\nsub_40A103(qword_414840);\nqword_414840 = 0LL;\n}\ngoto LABEL_17;\n}\nif ( dword_4132E4 == 6 )\n{\nqword_413F28 = sub_409B94(qword_414840, &dword_414850);\nresult = qword_413F28;\nif ( !qword_413F28 )\nreturn result;\nsub_405D19(qword_413F28);\ngoto LABEL_17;\n}\nif ( dword_4132E4 > 6 )\ngoto LABEL_17;\nif ( dword_4132E4 != 2 )\n{\nif ( dword_4132E4 == 4 )\nqword_414860 = sub_4099DA(qword_414840);\ngoto LABEL_17;\n}\nresult = (unsigned int)sub_40270A() ^ 1;\nif ( !(_BYTE)result )\n{\nqword_414840 = sub_409670(&off_413300, qword_413F20);\nresult = qword_414840;\nif ( qword_414840 )\n{\nLABEL_17:\nresult = (unsigned int)a1;\ndword_4132E4 = a1;\nreturn result;\n}\n}\n}\nreturn result;\n}"}, {"addr": 4206274, "funname": "sub_402EC2", "code": "__int64 sub_402EC2()\n{\nchar *v1; // [rsp+28h] [rbp-18h]\nchar *v2; // [rsp+30h] [rbp-10h]\nint v3; // [rsp+3Ch] [rbp-4h]\n\nv2 = (char *)off_4132D8 + 42;\nv1 = (char *)off_4132D8 + 62;\nv3 = strlen(src);\nif ( v3 > 1024 )\nv3 = 1024;\n*((_DWORD *)v2 + 1) = htonl(v3 + 2);\nstrncpy(v1 + 2, src, v3);\nv1[v3 + 2] = 0;\n*(_WORD *)v1 = htons(1u);\nreturn 1LL;\n}"}, {"addr": 4206462, "funname": "sub_402F7E", "code": "__int64 __fastcall sub_402F7E(__int64 a1, __int64 a2, _DWORD *a3)\n{\nsub_402DA1(2);\nstrncpy(s2, (const char *)(a1 + 62), 0x20uLL);\nbyte_41459F = 0;\n*(_DWORD *)((char *)off_4132D8 + 46) = 0;\n*a3 = 4;\nreturn 1LL;\n}"}, {"addr": 4206587, "funname": "sub_402FFB", "code": "__int64 __fastcall sub_402FFB(__int64 a1, __int64 a2, _DWORD *a3)\n{\n__int64 v3; // rdx\n__int64 v4; // rdx\nchar *v7; // [rsp+20h] [rbp-10h]\nchar *v8; // [rsp+28h] [rbp-8h]\n\nv8 = (char *)off_4132D8 + 42;\nv7 = (char *)off_4132D8 + 62;\n*((_DWORD *)v8 + 1) = htonl(0x42u);\n*v7 = *(_DWORD *)qword_413F20 - 1;\nv7[1] = *(_DWORD *)(qword_414840 + 56);\nmemmove(v7 + 2, *(const void **)(qword_414840 + 64), *(int *)(qword_414840 + 56));\nv3 = qword_414808;\n*(_QWORD *)(v7 + 34) = *(_QWORD *)dest;\n*(_QWORD *)(v7 + 42) = v3;\nv4 = qword_414818;\n*(_QWORD *)(v7 + 50) = qword_414810;\n*(_QWORD *)(v7 + 58) = v4;\n*a3 = 6;\nreturn 1LL;\n}"}, {"addr": 4206805, "funname": "sub_4030D5", "code": "__int64 __fastcall sub_4030D5(__int64 a1, __int64 a2, _DWORD *a3)\n{\nsigned int v5; // [rsp+14h] [rbp-1Ch]\nchar *v6; // [rsp+20h] [rbp-10h]\nchar *v7; // [rsp+28h] [rbp-8h]\n\nv5 = ntohl(*(_DWORD *)(a1 + 46)) - 1;\nif ( v5 > 257 )\nreturn 0LL;\ndword_414850 = v5;\nqword_414858 = &unk_4145C0;\nmemmove(&unk_4145C0, (const void *)(a1 + 63), v5);\nv7 = (char *)off_4132D8 + 42;\nv6 = (char *)off_4132D8 + 62;\n*((_DWORD *)v7 + 1) = htonl(*(_DWORD *)qword_414860 + 1);\nmemmove(v6 + 1, *(const void **)(qword_414860 + 8), *(int *)qword_414860);\n*a3 = 8;\nreturn 1LL;\n}"}, {"addr": 4207067, "funname": "sub_4031DB", "code": "__int64 __fastcall sub_4031DB(__int64 a1, __int64 a2, _DWORD *a3)\n{\n__int64 result; // rax\nconst void *v4; // rax\nchar *dest; // [rsp+20h] [rbp-20h]\nchar *v7; // [rsp+28h] [rbp-18h]\n\nif ( (unsigned int)sub_409FD9(qword_414840, a1 + 62) )\n{\n*a3 = 2;\nresult = 0LL;\n}\nelse\n{\nv7 = (char *)off_4132D8 + 42;\ndest = (char *)off_4132D8 + 62;\n*((_DWORD *)v7 + 1) = htonl(0x14u);\nv4 = (const void *)sub_40A0EF(qword_414840);\nmemmove(dest, v4, 0x14uLL);\n*a3 = 10;\nresult = 1LL;\n}\nreturn result;\n}"}, {"addr": 4208326, "funname": "sub_4036C6", "code": "__int64 __fastcall sub_4036C6(__int64 a1, unsigned int a2)\n{\n__int64 result; // rax\nint v3; // eax\nint v4; // edx\nint v5; // [rsp+1Ch] [rbp-14h] BYREF\nuint32_t v6; // [rsp+20h] [rbp-10h]\nint v7; // [rsp+24h] [rbp-Ch]\n__int64 (__fastcall *v8)(); // [rsp+28h] [rbp-8h]\n\nv7 = 62;\nv5 = dword_4132E4;\nv6 = ntohl(*(_DWORD *)(a1 + 50));\nif ( (int)v6 <= 3 || (result = (unsigned int)dword_4132E4, v6 == dword_4132E4) )\n{\nif ( !v6\n|| (LOWORD(v3) = ntohs(*(_WORD *)(a1 + 56)),\nv4 = (v3 >> 12) & 0xF,\nresult = (unsigned int)*(char *)(qword_414838 + 36),\nv4 == (_DWORD)result) )\n{\nresult = v6;\nswitch ( v6 )\n{\ncase 0u:\nv8 = sub_402EC2;\ngoto LABEL_12;\ncase 2u:\nv8 = (__int64 (__fastcall *)())sub_402F7E;\nv7 += 32;\ngoto LABEL_12;\ncase 4u:\nv8 = (__int64 (__fastcall *)())sub_402FFB;\ngoto LABEL_12;\ncase 6u:\nv8 = (__int64 (__fastcall *)())sub_4030D5;\n++v7;\ngoto LABEL_12;\ncase 8u:\nv8 = (__int64 (__fastcall *)())sub_4031DB;\nv7 += 20;\ngoto LABEL_12;\ncase 0xAu:\nv8 = (__int64 (__fastcall *)())sub_40329D;\nv7 += 28;\nLABEL_12:\nresult = a2;\nif ( (int)a2 >= v7 )\n{\n*(_DWORD *)((char *)off_4132D8 + 42) = htonl(0xDADACAFE);\n*(_DWORD *)((char *)off_4132D8 + 50) = htonl(v6 + 1);\n*((_WORD *)off_4132D8 + 27) = htons(word_4132E0);\n*((_WORD *)off_4132D8 + 28) = *(_WORD *)(a1 + 56);\n*(_DWORD *)((char *)off_4132D8 + 46) = 0;\nif ( ((unsigned __int8 (__fastcall *)(__int64, _QWORD, int *))v8)(a1, a2, &v5) )\nsub_402B6D(a1);\nresult = sub_402DA1(v5);\n}\nbreak;\ndefault:\nreturn result;\n}\n}\n}\nreturn result;\n}"}, {"addr": 4208777, "funname": "sub_403889", "code": "__int16 __fastcall sub_403889(__int64 a1, __int64 a2, __int64 a3)\n{\nunsigned __int64 v3; // rax\nint v4; // ebx\nint v5; // ebx\nint v6; // ebx\nunsigned __int64 v7; // rbx\nint v8; // ebx\n\nLODWORD(v3) = *(_DWORD *)(a2 + 20);\nif ( (unsigned int)v3 > 0x3D )\n{\nv4 = *(unsigned __int16 *)(a3 + 12);\nLOWORD(v3) = htons(0x800u);\nif ( v4 == (_DWORD)v3 )\n{\nLODWORD(v3) = memcmp((const void *)a3, &unk_40F1C8, 6uLL);\nif ( !(_DWORD)v3 )\n{\nLOWORD(v3) = *(unsigned __int8 *)(a3 + 23);\nif ( (_BYTE)v3 == 17 )\n{\nv5 = *(unsigned __int16 *)(a3 + 36);\nLOWORD(v3) = htons(0xDADAu);\nif ( v5 == (_DWORD)v3 )\n{\nv6 = *(_DWORD *)(a3 + 42);\nLODWORD(v3) = htonl(0xDADACAFE);\nif ( v6 == (_DWORD)v3 )\n{\nv7 = *(unsigned int *)(a2 + 20);\nv3 = (int)ntohl(*(_DWORD *)(a3 + 46)) + 62LL;\nif ( v7 >= v3 )\n{\nif ( *(_WORD *)(a3 + 54) == 0xFFFF\n|| (v8 = *(unsigned __int16 *)(a3 + 54), LOWORD(v3) = htons(word_4132E0), v8 == (_DWORD)v3) )\n{\nLOWORD(v3) = sub_4036C6(a3, *(_DWORD *)(a2 + 20));\n}\n}\n}\n}\n}\n}\n}\n}\nreturn v3;\n}"}, {"addr": 4209476, "funname": "sub_403B44", "code": "void __noreturn sub_403B44()\n{\nwhile ( 1 )\n{\nwhile ( (int)pcap_dispatch() >= 0 )\n;\nsub_4039D5(0);\n}\n}"}, {"addr": 4209575, "funname": "sub_403BA7", "code": "void sub_403BA7()\n{\n_DWORD stat_loc[3]; // [rsp+1Ch] [rbp-14h] BYREF\n__int64 i; // [rsp+28h] [rbp-8h]\n\nstat_loc[0] = 0;\nwait((__WAIT_STATUS)stat_loc);\nfor ( i = qword_414820; (__int64 *)i != &qword_414820; i = *(_QWORD *)i )\n{\n*(_QWORD *)&stat_loc[1] = i;\nif ( *(_DWORD *)(i + 32) == stat_loc[0] )\n{\n*(_DWORD *)(*(_QWORD *)&stat_loc[1] + 32LL) = 0;\nreturn;\n}\n}\n}"}, {"addr": 4209685, "funname": "handler", "code": "void handler()\n{\n__WAIT_STATUS stat_loc; // [rsp+1Ch] [rbp-4h] BYREF\n\nLODWORD(stat_loc.__uptr) = 0;\nwait((__WAIT_STATUS)&stat_loc);\nbyte_4145A0 = 0;\n}"}, {"addr": 4209730, "funname": "sub_403C42", "code": "__int64 __fastcall sub_403C42(__int64 a1)\n{\n__int64 result; // rax\n\nif ( byte_414830 == 1 || (*(_DWORD *)(a1 + 32) = fork()) == 0 )\n{\nqword_414838 = a1;\nsignal(17, (__sighandler_t)handler);\nsub_4039D5(1);\nsub_403B44();\n}\nresult = *(unsigned int *)(a1 + 32);\nif ( (int)result < 0 )\n{\nresult = a1;\n*(_DWORD *)(a1 + 32) = 0;\n}\nreturn result;\n}"}, {"addr": 4209908, "funname": "sub_403CF4", "code": "__int64 sub_403CF4()\n{\n__int64 result; // rax\n__int64 i; // [rsp+18h] [rbp-8h]\n\nresult = qword_414820;\nfor ( i = qword_414820; (__int64 *)i != &qword_414820; i = *(_QWORD *)i )\n{\nif ( *(int *)(i + 32) <= 0 )\n{\nsleep(1u);\nsub_403C42(i);\n}\nresult = *(_QWORD *)i;\n}\nreturn result;\n}"}, {"addr": 4210003, "funname": "sub_403D53", "code": "void __fastcall sub_403D53(__pid_t *a1, char a2)\n{\nif ( a1[8] > 0 )\nkill(a1[8], 9);\na1[8] = 0;\nif ( a2 )\n{\nsub_4025A8((__int64)a1);\nfree(a1);\n}\n}"}, {"addr": 4210094, "funname": "sub_403DAE", "code": "void __noreturn sub_403DAE()\n{\n__pid_t *v0; // [rsp+20h] [rbp-10h]\n__pid_t *v1; // [rsp+28h] [rbp-8h]\n\nv1 = (__pid_t *)qword_414820;\nv0 = *(__pid_t **)qword_414820;\nwhile ( v1 != (__pid_t *)&qword_414820 )\n{\nsub_403D53(v1, 1);\nv1 = v0;\nv0 = *(__pid_t **)v0;\n}\nexit(1);\n}"}, {"addr": 4210193, "funname": "sub_403E11", "code": "__int64 __fastcall sub_403E11(const char *a1, const char *a2)\n{\n__int64 i; // [rsp+28h] [rbp-8h]\n\nfor ( i = qword_414820; (__int64 *)i != &qword_414820; i = *(_QWORD *)i )\n{\nif ( !strcmp((const char *)(i + 16), a2) )\n{\n*(_BYTE *)(i + 53) = 1;\nif ( !strcmp((const char *)(i + 37), a1) )\nreturn 0LL;\nstrncpy((char *)(i + 37), a1, 0x10uLL);\nsub_403D53((__pid_t *)i, 0);\n}\n}\nreturn 0LL;\n}"}, {"addr": 4210382, "funname": "sub_403ECE", "code": "__int64 __fastcall sub_403ECE(__int64 a1, __int64 a2)\n{\nsub_4062B8(a1, sub_403E11, a2);\nreturn 0LL;\n}"}, {"addr": 4210426, "funname": "sub_403EFA", "code": "__int64 sub_403EFA()\n{\n__int64 result; // rax\n__int64 i; // [rsp+8h] [rbp-8h]\n\nsub_406293(sub_403ECE, 0LL);\nresult = qword_414820;\nfor ( i = qword_414820; (__int64 *)i != &qword_414820; i = *(_QWORD *)i )\n{\nif ( *(_BYTE *)(i + 53) )\n{\n*(_BYTE *)(i + 53) = 0;\n}\nelse if ( *(_BYTE *)(i + 37) )\n{\n*(_BYTE *)(i + 37) = 0;\nsub_403D53((__pid_t *)i, 0);\n}\nresult = *(_QWORD *)i;\n}\nreturn result;\n}"}, {"addr": 4211303, "funname": "sub_404267", "code": "__int64 __fastcall sub_404267(int a1, char a2)\n{\nreturn (unsigned int)__ROL4__(a1, a2);\n}"}, {"addr": 4211327, "funname": "sub_40427F", "code": "int *__fastcall sub_40427F(int *a1, __int64 a2, __int64 a3)\n{\nint *result; // rax\nint v5; // [rsp+1Ch] [rbp-24h]\nint v6; // [rsp+1Ch] [rbp-24h]\nint v7; // [rsp+1Ch] [rbp-24h]\nint v8; // [rsp+1Ch] [rbp-24h]\nunsigned int i; // [rsp+20h] [rbp-20h]\nunsigned int j; // [rsp+20h] [rbp-20h]\nunsigned int k; // [rsp+20h] [rbp-20h]\nint v12; // [rsp+24h] [rbp-1Ch]\nint v13; // [rsp+28h] [rbp-18h]\nint v14; // [rsp+2Ch] [rbp-14h]\nint v15; // [rsp+30h] [rbp-10h]\nint v16; // [rsp+34h] [rbp-Ch]\n\nfor ( i = 0; i <= 0xF; ++i )\n*(_DWORD *)(4LL * i + a3) = *(unsigned __int8 *)((int)(4 * i) + 3LL + a2) | (*(unsigned __int8 *)((int)(4 * i) + 2LL + a2) << 8) | (*(unsigned __int8 *)((int)(4 * i) + 1LL + a2) << 16) | (*(unsigned __int8 *)((int)(4 * i) + a2) << 24);\nfor ( j = 0; j <= 0x3F; ++j )\n*(_DWORD *)(4LL * (j + 16) + a3) = sub_404267(\n*(_DWORD *)(4LL * (j + 2) + a3) ^ (unsigned int)(*(_DWORD *)(4LL * (j + 8) + a3) ^ *(_DWORD *)(4LL * (j + 13) + a3)) ^ *(_DWORD *)(4LL * j + a3),\n1);\nv16 = *a1;\nv15 = a1[1];\nv14 = a1[2];\nv13 = a1[3];\nv12 = a1[4];\nfor ( k = 0; k <= 0x13; ++k )\n{\nv5 = v12 + (v13 ^ v15 & (v13 ^ v14)) + sub_404267(v16, 5) + *(_DWORD *)(4LL * k + a3) + 1518500249;\nv12 = v13;\nv13 = v14;\nv14 = sub_404267(v15, 30);\nv15 = v16;\nv16 = v5;\n}\nwhile ( k <= 0x27 )\n{\nv6 = v12 + (v13 ^ v14 ^ v15) + sub_404267(v16, 5) + *(_DWORD *)(4LL * k + a3) + 1859775393;\nv12 = v13;\nv13 = v14;\nv14 = sub_404267(v15, 30);\nv15 = v16;\nv16 = v6;\n++k;\n}\nwhile ( k <= 0x3B )\n{\nv7 = v12 + (v14 & v15) + (v13 & (v14 ^ v15)) + sub_404267(v16, 5) + *(_DWORD *)(4LL * k + a3) - 1894007588;\nv12 = v13;\nv13 = v14;\nv14 = sub_404267(v15, 30);\nv15 = v16;\nv16 = v7;\n++k;\n}\nwhile ( k <= 0x4F )\n{\nv8 = v12 + (v13 ^ v14 ^ v15) + sub_404267(v16, 5) + *(_DWORD *)(4LL * k + a3) - 899497514;\nv12 = v13;\nv13 = v14;\nv14 = sub_404267(v15, 30);\nv15 = v16;\nv16 = v8;\n++k;\n}\n*a1 += v16;\na1[1] += v15;\na1[2] += v14;\na1[3] += v13;\nresult = a1 + 4;\na1[4] += v12;\nreturn result;\n}"}, {"addr": 4212334, "funname": "sub_40466E", "code": "_DWORD *__fastcall sub_40466E(_DWORD *a1)\n{\n_DWORD *result; // rax\n\n*a1 = 1732584193;\na1[1] = -271733879;\na1[2] = -1732584194;\na1[3] = 271733878;\nresult = a1 + 4;\na1[4] = -1009589776;\nreturn result;\n}"}, {"addr": 4212411, "funname": "sub_4046BB", "code": "__int64 __fastcall sub_4046BB(int a1, char a2)\n{\nreturn (unsigned int)__ROR4__(a1, a2);\n}"}, {"addr": 4212435, "funname": "sub_4046D3", "code": "_DWORD *__fastcall sub_4046D3(int *a1, unsigned __int8 *a2)\n{\n_DWORD *result; // rax\nint *v3; // [rsp+8h] [rbp-18h]\nunsigned int v4; // [rsp+18h] [rbp-8h]\nint i; // [rsp+1Ch] [rbp-4h]\n\nv3 = a1;\n*a1 = a2[3] ^ (a2[2] << 8) ^ (a2[1] << 16) ^ (*a2 << 24);\na1[1] = (a2[6] << 8) ^ (a2[5] << 16) ^ (a2[4] << 24) ^ a2[7];\na1[2] = (a2[10] << 8) ^ (a2[9] << 16) ^ (a2[8] << 24) ^ a2[11];\nresult = a1 + 3;\na1[3] = (a2[14] << 8) ^ (a2[13] << 16) ^ (a2[12] << 24) ^ a2[15];\nfor ( i = 0; i <= 9; ++i )\n{\nv4 = v3[3];\nv3[4] = ((unsigned __int8)byte_40FDC0[i] << 24) ^ (unsigned __int8)BYTE1(dword_40F4C0[HIBYTE(v4)]) ^ dword_40F4C0[(unsigned __int8)v4] & 0xFF00 ^ dword_40F4C0[BYTE1(v4)] & 0xFF0000 ^ (dword_40F4C0[BYTE2(v4)] << 8) & 0xFF000000 ^ *v3;\nv3[5] = v3[1] ^ v3[4];\nv3[6] = v3[2] ^ v3[5];\nresult = v3 + 7;\nv3[7] = v3[3] ^ v3[6];\nv3 += 4;\n}\nreturn result;\n}"}, {"addr": 4213054, "funname": "sub_40493E", "code": "__int64 __fastcall sub_40493E(int *a1, unsigned __int8 *a2)\n{\nint v2; // ebx\nint v3; // ebx\nint v4; // ebx\n__int64 result; // rax\nint *v6; // [rsp+8h] [rbp-20h]\nint v7; // [rsp+10h] [rbp-18h]\nint v8; // [rsp+10h] [rbp-18h]\nint v9; // [rsp+10h] [rbp-18h]\nint v10; // [rsp+10h] [rbp-18h]\nint i; // [rsp+18h] [rbp-10h]\nint k; // [rsp+18h] [rbp-10h]\nint v13; // [rsp+1Ch] [rbp-Ch]\nint j; // [rsp+1Ch] [rbp-Ch]\n\nv6 = a1;\nsub_4046D3(a1, a2);\nv13 = 0;\nfor ( i = 40; v13 < i; i -= 4 )\n{\nv7 = a1[v13];\na1[v13] = a1[i];\na1[i] = v7;\nv8 = a1[v13 + 1];\na1[v13 + 1] = a1[i + 1];\na1[i + 1] = v8;\nv9 = a1[v13 + 2];\na1[v13 + 2] = a1[i + 2];\na1[i + 2] = v9;\nv10 = a1[v13 + 3];\na1[v13 + 3] = a1[i + 3];\na1[i + 3] = v10;\nv13 += 4;\n}\nfor ( j = 1; ; ++j )\n{\nresult = (unsigned int)j;\nif ( j >= 10 )\nbreak;\nv6 += 4;\nfor ( k = 0; k <= 3; ++k )\n{\nv2 = dword_40F8C0[(unsigned __int8)BYTE1(dword_40F4C0[HIBYTE(v6[k])])];\nv3 = sub_4046BB(dword_40F8C0[(unsigned __int8)BYTE1(dword_40F4C0[(unsigned __int8)BYTE2(v6[k])])], 8) ^ v2;\nv4 = sub_4046BB(dword_40F8C0[(unsigned __int8)BYTE1(dword_40F4C0[(unsigned __int8)BYTE1(v6[k])])], 16) ^ v3;\nv6[k] = v4 ^ sub_4046BB(dword_40F8C0[(unsigned __int8)BYTE1(dword_40F4C0[(unsigned __int8)v6[k]])], 24);\n}\n}\nreturn result;\n}"}, {"addr": 4213901, "funname": "sub_404C8D", "code": "_BYTE *__fastcall sub_404C8D(_DWORD *a1, unsigned __int8 *a2, _BYTE *a3)\n{\nint v3; // ebx\nint v4; // ebx\nint v5; // ebx\nint v6; // ebx\nint v7; // ebx\nint v8; // ebx\nint v9; // ebx\nint v10; // ebx\nint v11; // ebx\nint v12; // ebx\nint v13; // ebx\nint v14; // ebx\nint v15; // ebx\nint v16; // ebx\nint v17; // ebx\nint v18; // ebx\nint v19; // ebx\nint v20; // ebx\nint v21; // ebx\nint v22; // ebx\nint v23; // ebx\nint v24; // ebx\nint v25; // ebx\nint v26; // ebx\n_BYTE *result; // rax\n_DWORD *v29; // [rsp+10h] [rbp-40h]\nunsigned int v30; // [rsp+20h] [rbp-30h]\nunsigned int v31; // [rsp+24h] [rbp-2Ch]\nunsigned int v32; // [rsp+28h] [rbp-28h]\nunsigned int v33; // [rsp+2Ch] [rbp-24h]\nint v34; // [rsp+34h] [rbp-1Ch]\nunsigned int v35; // [rsp+38h] [rbp-18h]\nunsigned int v36; // [rsp+38h] [rbp-18h]\nunsigned int v37; // [rsp+3Ch] [rbp-14h]\nunsigned int v38; // [rsp+3Ch] [rbp-14h]\nunsigned int v39; // [rsp+40h] [rbp-10h]\nunsigned int v40; // [rsp+40h] [rbp-10h]\nunsigned int v41; // [rsp+44h] [rbp-Ch]\nunsigned int v42; // [rsp+44h] [rbp-Ch]\n\nv29 = a1;\nv41 = a2[3] ^ (a2[2] << 8) ^ (a2[1] << 16) ^ (*a2 << 24) ^ *a1;\nv39 = a2[7] ^ (a2[6] << 8) ^ (a2[5] << 16) ^ (a2[4] << 24) ^ a1[1];\nv37 = a2[11] ^ (a2[10] << 8) ^ (a2[9] << 16) ^ (a2[8] << 24) ^ a1[2];\nv35 = a2[15] ^ (a2[14] << 8) ^ (a2[13] << 16) ^ (a2[12] << 24) ^ a1[3];\nv34 = 5;\nwhile ( 1 )\n{\nv3 = dword_40F4C0[HIBYTE(v41)];\nv4 = sub_4046BB(dword_40F4C0[BYTE2(v39)], 8) ^ v3;\nv5 = sub_4046BB(dword_40F4C0[BYTE1(v37)], 16) ^ v4;\nv33 = sub_4046BB(dword_40F4C0[(unsigned __int8)v35], 24) ^ v5 ^ v29[4];\nv6 = dword_40F4C0[HIBYTE(v39)];\nv7 = sub_4046BB(dword_40F4C0[BYTE2(v37)], 8) ^ v6;\nv8 = sub_4046BB(dword_40F4C0[BYTE1(v35)], 16) ^ v7;\nv32 = sub_4046BB(dword_40F4C0[(unsigned __int8)v41], 24) ^ v8 ^ v29[5];\nv9 = dword_40F4C0[HIBYTE(v37)];\nv10 = sub_4046BB(dword_40F4C0[BYTE2(v35)], 8) ^ v9;\nv11 = sub_4046BB(dword_40F4C0[BYTE1(v41)], 16) ^ v10;\nv31 = sub_4046BB(dword_40F4C0[(unsigned __int8)v39], 24) ^ v11 ^ v29[6];\nv12 = dword_40F4C0[HIBYTE(v35)];\nv13 = sub_4046BB(dword_40F4C0[BYTE2(v41)], 8) ^ v12;\nv14 = sub_4046BB(dword_40F4C0[BYTE1(v39)], 16) ^ v13;\nv30 = sub_4046BB(dword_40F4C0[(unsigned __int8)v37], 24) ^ v14 ^ v29[7];\nv29 += 8;\nif ( !--v34 )\nbreak;\nv15 = dword_40F4C0[HIBYTE(v33)];\nv16 = sub_4046BB(dword_40F4C0[BYTE2(v32)], 8) ^ v15;\nv17 = sub_4046BB(dword_40F4C0[BYTE1(v31)], 16) ^ v16;\nv41 = sub_4046BB(dword_40F4C0[(unsigned __int8)v30], 24) ^ v17 ^ *v29;\nv18 = dword_40F4C0[HIBYTE(v32)];\nv19 = sub_4046BB(dword_40F4C0[BYTE2(v31)], 8) ^ v18;\nv20 = sub_4046BB(dword_40F4C0[BYTE1(v30)], 16) ^ v19;\nv39 = sub_4046BB(dword_40F4C0[(unsigned __int8)v33], 24) ^ v20 ^ v29[1];\nv21 = dword_40F4C0[HIBYTE(v31)];\nv22 = sub_4046BB(dword_40F4C0[BYTE2(v30)], 8) ^ v21;\nv23 = sub_4046BB(dword_40F4C0[BYTE1(v33)], 16) ^ v22;\nv37 = sub_4046BB(dword_40F4C0[(unsigned __int8)v32], 24) ^ v23 ^ v29[2];\nv24 = dword_40F4C0[HIBYTE(v30)];\nv25 = sub_4046BB(dword_40F4C0[BYTE2(v33)], 8) ^ v24;\nv26 = sub_4046BB(dword_40F4C0[BYTE1(v32)], 16) ^ v25;\nv35 = sub_4046BB(dword_40F4C0[(unsigned __int8)v31], 24) ^ v26 ^ v29[3];\n}\nv42 = (unsigned __int8)BYTE1(dword_40F4C0[(unsigned __int8)v30]) ^ dword_40F4C0[BYTE1(v31)] & 0xFF00 ^ (dword_40F4C0[BYTE2(v32)] & 0xFF0000 | (dword_40F4C0[HIBYTE(v33)] << 8) & 0xFF000000) ^ *v29;\n*a3 = HIBYTE(v42);\na3[1] = BYTE2(v42);\na3[2] = BYTE1(v42);\na3[3] = v42;\nv40 = (unsigned __int8)BYTE1(dword_40F4C0[(unsigned __int8)v33]) ^ dword_40F4C0[BYTE1(v30)] & 0xFF00 ^ (dword_40F4C0[BYTE2(v31)] & 0xFF0000 | (dword_40F4C0[HIBYTE(v32)] << 8) & 0xFF000000) ^ v29[1];\na3[4] = HIBYTE(v40);\na3[5] = BYTE2(v40);\na3[6] = BYTE1(v40);\na3[7] = v40;\nv38 = (unsigned __int8)BYTE1(dword_40F4C0[(unsigned __int8)v32]) ^ dword_40F4C0[BYTE1(v33)] & 0xFF00 ^ (dword_40F4C0[BYTE2(v30)] & 0xFF0000 | (dword_40F4C0[HIBYTE(v31)] << 8) & 0xFF000000) ^ v29[2];\na3[8] = HIBYTE(v38);\na3[9] = BYTE2(v38);\na3[10] = BYTE1(v38);\na3[11] = v38;\nv36 = (unsigned __int8)BYTE1(dword_40F4C0[(unsigned __int8)v31]) ^ dword_40F4C0[BYTE1(v32)] & 0xFF00 ^ (dword_40F4C0[BYTE2(v33)] & 0xFF0000 | (dword_40F4C0[HIBYTE(v30)] << 8) & 0xFF000000) ^ v29[3];\na3[12] = HIBYTE(v36);\na3[13] = BYTE2(v36);\na3[14] = BYTE1(v36);\nresult = a3 + 15;\na3[15] = v36;\nreturn result;\n}"}, {"addr": 4216021, "funname": "sub_4054D5", "code": "_BYTE *__fastcall sub_4054D5(_DWORD *a1, unsigned __int8 *a2, _BYTE *a3)\n{\nint v3; // ebx\nint v4; // ebx\nint v5; // ebx\nint v6; // ebx\nint v7; // ebx\nint v8; // ebx\nint v9; // ebx\nint v10; // ebx\nint v11; // ebx\nint v12; // ebx\nint v13; // ebx\nint v14; // ebx\nint v15; // ebx\nint v16; // ebx\nint v17; // ebx\nint v18; // ebx\nint v19; // ebx\nint v20; // ebx\nint v21; // ebx\nint v22; // ebx\nint v23; // ebx\nint v24; // ebx\nint v25; // ebx\nint v26; // ebx\n_BYTE *result; // rax\n_DWORD *v29; // [rsp+10h] [rbp-40h]\nunsigned int v30; // [rsp+20h] [rbp-30h]\nunsigned int v31; // [rsp+24h] [rbp-2Ch]\nunsigned int v32; // [rsp+28h] [rbp-28h]\nunsigned int v33; // [rsp+2Ch] [rbp-24h]\nint v34; // [rsp+34h] [rbp-1Ch]\nunsigned int v35; // [rsp+38h] [rbp-18h]\nint v36; // [rsp+38h] [rbp-18h]\nunsigned int v37; // [rsp+3Ch] [rbp-14h]\nint v38; // [rsp+3Ch] [rbp-14h]\nunsigned int v39; // [rsp+40h] [rbp-10h]\nint v40; // [rsp+40h] [rbp-10h]\nunsigned int v41; // [rsp+44h] [rbp-Ch]\nint v42; // [rsp+44h] [rbp-Ch]\n\nv29 = a1;\nv41 = a2[3] ^ (a2[2] << 8) ^ (a2[1] << 16) ^ (*a2 << 24) ^ *a1;\nv39 = a2[7] ^ (a2[6] << 8) ^ (a2[5] << 16) ^ (a2[4] << 24) ^ a1[1];\nv37 = a2[11] ^ (a2[10] << 8) ^ (a2[9] << 16) ^ (a2[8] << 24) ^ a1[2];\nv35 = a2[15] ^ (a2[14] << 8) ^ (a2[13] << 16) ^ (a2[12] << 24) ^ a1[3];\nv34 = 5;\nwhile ( 1 )\n{\nv3 = dword_40F8C0[HIBYTE(v41)];\nv4 = sub_4046BB(dword_40F8C0[BYTE2(v35)], 8) ^ v3;\nv5 = sub_4046BB(dword_40F8C0[BYTE1(v37)], 16) ^ v4;\nv33 = sub_4046BB(dword_40F8C0[(unsigned __int8)v39], 24) ^ v5 ^ v29[4];\nv6 = dword_40F8C0[HIBYTE(v39)];\nv7 = sub_4046BB(dword_40F8C0[BYTE2(v41)], 8) ^ v6;\nv8 = sub_4046BB(dword_40F8C0[BYTE1(v35)], 16) ^ v7;\nv32 = sub_4046BB(dword_40F8C0[(unsigned __int8)v37], 24) ^ v8 ^ v29[5];\nv9 = dword_40F8C0[HIBYTE(v37)];\nv10 = sub_4046BB(dword_40F8C0[BYTE2(v39)], 8) ^ v9;\nv11 = sub_4046BB(dword_40F8C0[BYTE1(v41)], 16) ^ v10;\nv31 = sub_4046BB(dword_40F8C0[(unsigned __int8)v35], 24) ^ v11 ^ v29[6];\nv12 = dword_40F8C0[HIBYTE(v35)];\nv13 = sub_4046BB(dword_40F8C0[BYTE2(v37)], 8) ^ v12;\nv14 = sub_4046BB(dword_40F8C0[BYTE1(v39)], 16) ^ v13;\nv30 = sub_4046BB(dword_40F8C0[(unsigned __int8)v41], 24) ^ v14 ^ v29[7];\nv29 += 8;\nif ( !--v34 )\nbreak;\nv15 = dword_40F8C0[HIBYTE(v33)];\nv16 = sub_4046BB(dword_40F8C0[BYTE2(v30)], 8) ^ v15;\nv17 = sub_4046BB(dword_40F8C0[BYTE1(v31)], 16) ^ v16;\nv41 = sub_4046BB(dword_40F8C0[(unsigned __int8)v32], 24) ^ v17 ^ *v29;\nv18 = dword_40F8C0[HIBYTE(v32)];\nv19 = sub_4046BB(dword_40F8C0[BYTE2(v33)], 8) ^ v18;\nv20 = sub_4046BB(dword_40F8C0[BYTE1(v30)], 16) ^ v19;\nv39 = sub_4046BB(dword_40F8C0[(unsigned __int8)v31], 24) ^ v20 ^ v29[1];\nv21 = dword_40F8C0[HIBYTE(v31)];\nv22 = sub_4046BB(dword_40F8C0[BYTE2(v32)], 8) ^ v21;\nv23 = sub_4046BB(dword_40F8C0[BYTE1(v33)], 16) ^ v22;\nv37 = sub_4046BB(dword_40F8C0[(unsigned __int8)v30], 24) ^ v23 ^ v29[2];\nv24 = dword_40F8C0[HIBYTE(v30)];\nv25 = sub_4046BB(dword_40F8C0[BYTE2(v31)], 8) ^ v24;\nv26 = sub_4046BB(dword_40F8C0[BYTE1(v32)], 16) ^ v25;\nv35 = sub_4046BB(dword_40F8C0[(unsigned __int8)v33], 24) ^ v26 ^ v29[3];\n}\nv42 = ((unsigned __int8)byte_40FCC0[BYTE1(v31)] << 8) ^ ((unsigned __int8)byte_40FCC0[BYTE2(v30)] << 16) ^ ((unsigned __int8)byte_40FCC0[HIBYTE(v33)] << 24) ^ (unsigned __int8)byte_40FCC0[(unsigned __int8)v32] ^ *v29;\n*a3 = HIBYTE(v42);\na3[1] = BYTE2(v42);\na3[2] = BYTE1(v42);\na3[3] = v42;\nv40 = ((unsigned __int8)byte_40FCC0[BYTE1(v30)] << 8) ^ ((unsigned __int8)byte_40FCC0[BYTE2(v33)] << 16) ^ ((unsigned __int8)byte_40FCC0[HIBYTE(v32)] << 24) ^ (unsigned __int8)byte_40FCC0[(unsigned __int8)v31] ^ v29[1];\na3[4] = HIBYTE(v40);\na3[5] = BYTE2(v40);\na3[6] = BYTE1(v40);\na3[7] = v40;\nv38 = ((unsigned __int8)byte_40FCC0[BYTE1(v33)] << 8) ^ ((unsigned __int8)byte_40FCC0[BYTE2(v32)] << 16) ^ ((unsigned __int8)byte_40FCC0[HIBYTE(v31)] << 24) ^ (unsigned __int8)byte_40FCC0[(unsigned __int8)v30] ^ v29[2];\na3[8] = HIBYTE(v38);\na3[9] = BYTE2(v38);\na3[10] = BYTE1(v38);\na3[11] = v38;\nv36 = ((unsigned __int8)byte_40FCC0[BYTE1(v32)] << 8) ^ ((unsigned __int8)byte_40FCC0[BYTE2(v31)] << 16) ^ ((unsigned __int8)byte_40FCC0[HIBYTE(v30)] << 24) ^ (unsigned __int8)byte_40FCC0[(unsigned __int8)v33] ^ v29[3];\na3[12] = HIBYTE(v36);\na3[13] = BYTE2(v36);\na3[14] = BYTE1(v36);\nresult = a3 + 15;\na3[15] = v36;\nreturn result;\n}"}, {"addr": 4218137, "funname": "sub_405D19", "code": "__int64 __fastcall sub_405D19(__int64 a1)\n{\n__int64 result; // rax\n\nmemset(dword_414D80, 0, 0xB0uLL);\nmemset(dword_414E40, 0, sizeof(dword_414E40));\nsub_4046D3(dword_414D80, (unsigned __int8 *)a1);\nsub_40493E(dword_414E40, (unsigned __int8 *)a1);\ndword_414EF0 = ntohl(*(_DWORD *)(a1 + 32)) & 0xFFFFFF;\ndword_414EF4 = dword_414EF0;\nresult = *(unsigned int *)(a1 + 36);\ndword_414EF8 = *(_DWORD *)(a1 + 36);\nreturn result;\n}"}, {"addr": 4218297, "funname": "sub_405DB9", "code": "__int64 __fastcall sub_405DB9(unsigned int a1)\n{\nif ( a1 <= dword_414EF0 )\nreturn 0LL;\nif ( a1 > dword_414EF0 + 128 )\nreturn 0LL;\ndword_414EF0 = a1;\nreturn 1LL;\n}"}, {"addr": 4218359, "funname": "sub_405DF7", "code": "__int64 sub_405DF7()\n{\nunsigned int v1; // [rsp+0h] [rbp-4h]\n\nv1 = (((unsigned int)dword_414EF8 >> (2 * dword_414EFC)) & 3) + 1;\ndword_414EFC = ((_BYTE)dword_414EFC + 1) & 0xF;\ndword_414EF4 += v1;\nreturn (unsigned int)dword_414EF4;\n}"}, {"addr": 4218435, "funname": "sub_405E43", "code": "void *__fastcall sub_405E43(void *a1, int *a2, int a3)\n{\nvoid *result; // rax\n__int64 v5; // [rsp+28h] [rbp-8h]\n\nv5 = (__int64)a1;\nsub_40466E(a2);\nresult = memset(a1, 0, 0x14uLL);\nwhile ( a3 > 0 )\n{\nresult = sub_40427F(a2, v5, (__int64)&unk_414F00);\na3 -= 64;\nv5 += 64LL;\n}\nreturn result;\n}"}, {"addr": 4218541, "funname": "sub_405EAD", "code": "_DWORD *__fastcall sub_405EAD(__int64 a1, int a2)\n{\nuint32_t v2; // eax\n_DWORD *result; // rax\nuint32_t v4; // ecx\nint v5[6]; // [rsp+10h] [rbp-30h] BYREF\n_DWORD *v6; // [rsp+28h] [rbp-18h]\nint i; // [rsp+30h] [rbp-10h]\nuint32_t hostlong; // [rsp+34h] [rbp-Ch]\nunsigned __int8 *v9; // [rsp+38h] [rbp-8h]\n\nv6 = (_DWORD *)(a1 + 20);\nv9 = (unsigned __int8 *)(a1 + 20);\n*(_BYTE *)(a1 + 44) = -(char)(a2 + 25) & 0x3F;\nhostlong = *((unsigned __int8 *)v6 + 24) + a2 + 25;\n*(_DWORD *)(a1 + 4) = htonl(hostlong);\nv2 = sub_405DF7();\nv6[5] = htonl(v2);\nresult = sub_405E43(v6, v5, hostlong);\nfor ( i = 0; i <= 4; ++i )\n{\nv4 = htonl(v5[i]);\nresult = v6;\nv6[i] = v4;\n}\nwhile ( (int)hostlong > 0 )\n{\nresult = sub_404C8D(dword_414D80, v9, v9);\nv9 += 16;\nhostlong -= 16;\n}\nreturn result;\n}"}, {"addr": 4218785, "funname": "sub_405FA1", "code": "__int64 __fastcall sub_405FA1(__int64 a1)\n{\n__int64 result; // rax\nunsigned int v2; // eax\nuint32_t v3; // eax\nint s2[8]; // [rsp+10h] [rbp-50h] BYREF\nint s1[5]; // [rsp+30h] [rbp-30h] BYREF\nint v6; // [rsp+44h] [rbp-1Ch]\nunsigned __int8 *v7; // [rsp+48h] [rbp-18h]\nint i; // [rsp+50h] [rbp-10h]\nint v9; // [rsp+54h] [rbp-Ch]\nunsigned __int8 *v10; // [rsp+58h] [rbp-8h]\n\nv7 = (unsigned __int8 *)(a1 + 20);\nv10 = (unsigned __int8 *)(a1 + 20);\nv9 = ntohl(*(_DWORD *)(a1 + 4));\nv6 = v9;\nif ( !v9 || v9 % 64 > 0 )\nreturn 0LL;\nwhile ( v9 > 0 )\n{\nsub_4054D5(dword_414E40, v10, v10);\nv10 += 16;\nv9 -= 16;\n}\nv10 = v7;\nif ( v7[24] > 0x3Fu )\nreturn 0LL;\nv2 = ntohl(*((_DWORD *)v7 + 5));\nif ( (unsigned __int8)sub_405DB9(v2) != 1 )\nreturn 0LL;\nfor ( i = 0; i <= 4; ++i )\n{\nv3 = ntohl(*(_DWORD *)&v7[4 * i]);\ns1[i] = v3;\n}\nsub_405E43(v7, s2, v6);\nif ( !memcmp(s1, s2, 0x14uLL) )\nresult = v6 - (unsigned int)v7[24] - 25;\nelse\nresult = 0LL;\nreturn result;\n}"}, {"addr": 4219129, "funname": "sub_4060F9", "code": "__int64 sub_4060F9()\n{\n__int64 result; // rax\n\nfd = socket(1, 1, 0);\nif ( fd >= 0 )\nresult = 0LL;\nelse\nresult = (unsigned int)*__errno_location();\nreturn result;\n}"}, {"addr": 4219185, "funname": "sub_406131", "code": "int sub_406131()\n{\nint result; // eax\n\nresult = close(fd);\nfd = -1;\nreturn result;\n}"}, {"addr": 4219539, "funname": "sub_406293", "code": "__int64 __fastcall sub_406293(unsigned int (__fastcall *a1)(char *, __int64), __int64 a2)\n{\nreturn sub_4061CA(a1, a2);\n}"}, {"addr": 4219940, "funname": "sub_406424", "code": "__int64 sub_406424()\n{\nreturn 5LL;\n}"}, {"addr": 4219951, "funname": "sub_40642F", "code": "int *__fastcall sub_40642F(int a1)\n{\n__int64 v2; // rdx\n__int64 v3; // rdx\n_QWORD *v4; // [rsp+18h] [rbp-8h]\n\nif ( a1 <= 0 || a1 > (int)sub_406424() )\nreturn 0LL;\nv4 = (_QWORD *)sub_4064AB((unsigned int)(a1 - 1));\ndword_415040 = a1;\nv2 = v4[4];\nqword_415048 = v4[3];\nqword_415050 = v2;\nv3 = v4[6];\nqword_415058 = v4[5];\nqword_415060 = v3;\nreturn &dword_415040;\n}"}, {"addr": 4220075, "funname": "sub_4064AB", "code": "__int64 __fastcall sub_4064AB(int a1)\n{\nif ( !dword_413358[144 * a1 + 8] )\n{\n*(_QWORD *)&dword_413358[144 * a1 + 2] = 576LL * a1 + 4273020;\n*(_QWORD *)&dword_413358[144 * a1 + 6] = 576LL * a1 + 4273276;\ndword_413358[144 * a1] = sub_4067D8(*(void **)&dword_413358[144 * a1 + 2], off_413340[72 * a1]);\ndword_413358[144 * a1 + 4] = sub_4067D8(*(void **)&dword_413358[144 * a1 + 6], (&off_413348)[72 * a1]);\ndword_413358[144 * a1 + 8] = 1;\n}\nreturn 576LL * a1 + 4272960;\n}"}, {"addr": 4220508, "funname": "sub_40665C", "code": "__int64 __fastcall sub_40665C(char a1)\n{\nif ( a1 > 47 && a1 <= 57 )\nreturn (unsigned int)(a1 - 48);\nif ( a1 > 96 && a1 <= 102 )\nreturn (unsigned int)(a1 - 87);\nif ( a1 <= 64 || a1 > 70 )\nreturn 0LL;\nreturn (unsigned int)(a1 - 55);\n}"}, {"addr": 4220587, "funname": "sub_4066AB", "code": "__int64 __fastcall sub_4066AB(_BYTE *a1, const char *a2)\n{\nchar *v2; // rbx\n_BYTE *v3; // r13\nint v4; // er12\nchar v5; // r15\nchar v6; // dl\n_BYTE *v7; // rax\n\nv2 = (char *)a2;\nv3 = a1;\nv4 = strlen(a2);\nif ( (v4 & 1) != 0 )\n{\nv2 = (char *)(a2 + 1);\nv3 = a1 + 1;\n*a1 = sub_40665C(*a2);\n--v4;\n}\nwhile ( v4 )\n{\nv5 = 16 * sub_40665C(*v2);\nv6 = sub_40665C(v2[1]);\nv7 = v3++;\n*v7 = v5 | v6;\nv2 += 2;\nv4 -= 2;\n}\nreturn v3 - a1;\n}"}, {"addr": 4220888, "funname": "sub_4067D8", "code": "__int64 __fastcall sub_4067D8(void *dest, char *s)\n{\nchar *v4; // [rsp+0h] [rbp-30h]\n_BYTE *ptr; // [rsp+8h] [rbp-28h]\nunsigned int v6; // [rsp+14h] [rbp-1Ch]\nunsigned int v7; // [rsp+14h] [rbp-1Ch]\nunsigned int v8; // [rsp+18h] [rbp-18h]\nunsigned int i; // [rsp+1Ch] [rbp-14h]\nint v10; // [rsp+1Ch] [rbp-14h]\nint v11; // [rsp+1Ch] [rbp-14h]\nint v12; // [rsp+1Ch] [rbp-14h]\nint v13; // [rsp+1Ch] [rbp-14h]\n\nwhile ( *s && (*s == 32 || *s == 9 || *s == 10) )\n++s;\nv6 = strlen(s);\nptr = malloc(v6 + 1);\nif ( !ptr )\nreturn 0xFFFFFFFFLL;\nfor ( i = 0; v6 > i; ++i )\n{\nv4 = strchr(a0123456789abcd, s[i]);\nif ( !v4 )\nbreak;\nptr[i] = v4 - a0123456789abcd;\n}\nv7 = i;\nv10 = i - 1;\nv8 = v7;\ndo\n{\nptr[v8] = ptr[v10];\nv11 = v10 - 1;\nif ( v11 < 0 )\nbreak;\nptr[v8--] |= ptr[v11] << 6;\nptr[v8] = ((int)(unsigned __int8)ptr[v11] >> 2) & 0xF;\nv12 = v11 - 1;\nif ( v12 < 0 )\nbreak;\nptr[v8--] |= 16 * ptr[v12];\nptr[v8] = ((int)(unsigned __int8)ptr[v12] >> 4) & 3;\nv13 = v12 - 1;\nif ( v13 < 0 )\nbreak;\nptr[v8--] |= 4 * ptr[v13];\nptr[v8] = 0;\nv10 = v13 - 1;\n}\nwhile ( v10 >= 0 );\nwhile ( v7 >= v8 && !ptr[v8] )\n++v8;\nmemcpy(dest, &ptr[v8], v7 - v8 + 1);\nfree(ptr);\nreturn v7 - v8 + 1;\n}"}, {"addr": 4221589, "funname": "sub_406A95", "code": "_BYTE *__fastcall sub_406A95(_BYTE *a1, unsigned __int8 *a2, unsigned int a3)\n{\n_BYTE *v3; // rax\n_BYTE *v6; // rdx\n_BYTE *v7; // rdx\n_BYTE *v8; // rdx\n_BYTE *v9; // rdx\nunsigned int v10; // edx\nint v12; // [rsp+0h] [rbp-14h]\nint v13; // [rsp+0h] [rbp-14h]\nchar v14; // [rsp+Ch] [rbp-8h]\nunsigned __int8 v15; // [rsp+Dh] [rbp-7h]\nunsigned __int8 v16; // [rsp+Eh] [rbp-6h]\nunsigned __int8 v17; // [rsp+Fh] [rbp-5h]\nunsigned int v18; // [rsp+10h] [rbp-4h]\n\nv3 = a1;\nv18 = a3 % 3;\nv17 = 0;\nv16 = 0;\nv15 = 0;\nv14 = 0;\nif ( a3 % 3 == 1 )\n{\nv15 = *a2;\n}\nelse if ( v18 == 2 )\n{\nv16 = *a2;\nv15 = a2[1];\n}\nwhile ( 1 )\n{\nif ( v14 || v17 >> 2 )\n{\nv6 = v3++;\n*v6 = a0123456789abcd[v17 >> 2];\nv14 = 1;\n}\nv12 = (16 * v17) & 0x30 | (v16 >> 4);\nif ( v14 || v12 )\n{\nv7 = v3++;\n*v7 = a0123456789abcd[v12];\nv14 = 1;\n}\nv13 = (4 * v16) & 0x3C | (v15 >> 6);\nif ( v14 || v13 )\n{\nv8 = v3++;\n*v8 = a0123456789abcd[v13];\nv14 = 1;\n}\nif ( v14 || (v15 & 0x3F) != 0 )\n{\nv9 = v3++;\n*v9 = a0123456789abcd[v15 & 0x3F];\nv14 = 1;\n}\nif ( a3 <= v18 )\nbreak;\nv17 = a2[v18];\nv16 = a2[v18 + 1];\nv10 = v18 + 2;\nv18 += 3;\nv15 = a2[v10];\n}\n*v3 = 0;\nreturn a1;\n}"}, {"addr": 4222015, "funname": "sub_406C3F", "code": "__int64 __fastcall sub_406C3F(int *a1, const void *a2)\n{\nint v3; // [rsp+14h] [rbp-1Ch]\nint v4; // [rsp+14h] [rbp-1Ch]\nint v5; // [rsp+14h] [rbp-1Ch]\nint v6; // [rsp+14h] [rbp-1Ch]\nint v7; // [rsp+14h] [rbp-1Ch]\nint v8; // [rsp+14h] [rbp-1Ch]\nint v9; // [rsp+14h] [rbp-1Ch]\nint v10; // [rsp+14h] [rbp-1Ch]\nint v11; // [rsp+14h] [rbp-1Ch]\nint v12; // [rsp+14h] [rbp-1Ch]\nint v13; // [rsp+14h] [rbp-1Ch]\nint v14; // [rsp+14h] [rbp-1Ch]\nint v15; // [rsp+14h] [rbp-1Ch]\nint v16; // [rsp+14h] [rbp-1Ch]\nint v17; // [rsp+14h] [rbp-1Ch]\nint v18; // [rsp+14h] [rbp-1Ch]\nint v19; // [rsp+14h] [rbp-1Ch]\nint v20; // [rsp+14h] [rbp-1Ch]\nint v21; // [rsp+14h] [rbp-1Ch]\nint v22; // [rsp+14h] [rbp-1Ch]\nint v23; // [rsp+14h] [rbp-1Ch]\nint v24; // [rsp+14h] [rbp-1Ch]\nint v25; // [rsp+14h] [rbp-1Ch]\nint v26; // [rsp+14h] [rbp-1Ch]\nint v27; // [rsp+14h] [rbp-1Ch]\nint v28; // [rsp+14h] [rbp-1Ch]\nint v29; // [rsp+14h] [rbp-1Ch]\nint v30; // [rsp+14h] [rbp-1Ch]\nint v31; // [rsp+14h] [rbp-1Ch]\nint v32; // [rsp+14h] [rbp-1Ch]\nint v33; // [rsp+14h] [rbp-1Ch]\nint v34; // [rsp+14h] [rbp-1Ch]\nint v35; // [rsp+14h] [rbp-1Ch]\nint v36; // [rsp+18h] [rbp-18h]\nint v37; // [rsp+18h] [rbp-18h]\nint v38; // [rsp+18h] [rbp-18h]\nint v39; // [rsp+18h] [rbp-18h]\nint v40; // [rsp+18h] [rbp-18h]\nint v41; // [rsp+18h] [rbp-18h]\nint v42; // [rsp+18h] [rbp-18h]\nint v43; // [rsp+18h] [rbp-18h]\nint v44; // [rsp+18h] [rbp-18h]\nint v45; // [rsp+18h] [rbp-18h]\nint v46; // [rsp+18h] [rbp-18h]\nint v47; // [rsp+18h] [rbp-18h]\nint v48; // [rsp+18h] [rbp-18h]\nint v49; // [rsp+18h] [rbp-18h]\nint v50; // [rsp+18h] [rbp-18h]\nint v51; // [rsp+18h] [rbp-18h]\nint v52; // [rsp+18h] [rbp-18h]\nint v53; // [rsp+18h] [rbp-18h]\nint v54; // [rsp+18h] [rbp-18h]\nint v55; // [rsp+18h] [rbp-18h]\nint v56; // [rsp+18h] [rbp-18h]\nint v57; // [rsp+18h] [rbp-18h]\nint v58; // [rsp+18h] [rbp-18h]\nint v59; // [rsp+18h] [rbp-18h]\nint v60; // [rsp+18h] [rbp-18h]\nint v61; // [rsp+18h] [rbp-18h]\nint v62; // [rsp+18h] [rbp-18h]\nint v63; // [rsp+18h] [rbp-18h]\nint v64; // [rsp+18h] [rbp-18h]\nint v65; // [rsp+18h] [rbp-18h]\nint v66; // [rsp+18h] [rbp-18h]\nint v67; // [rsp+18h] [rbp-18h]\nint v68; // [rsp+18h] [rbp-18h]\nint v69; // [rsp+1Ch] [rbp-14h]\nint v70; // [rsp+1Ch] [rbp-14h]\nint v71; // [rsp+1Ch] [rbp-14h]\nint v72; // [rsp+1Ch] [rbp-14h]\nint v73; // [rsp+1Ch] [rbp-14h]\nint v74; // [rsp+1Ch] [rbp-14h]\nint v75; // [rsp+1Ch] [rbp-14h]\nint v76; // [rsp+1Ch] [rbp-14h]\nint v77; // [rsp+1Ch] [rbp-14h]\nint v78; // [rsp+1Ch] [rbp-14h]\nint v79; // [rsp+1Ch] [rbp-14h]\nint v80; // [rsp+1Ch] [rbp-14h]\nint v81; // [rsp+1Ch] [rbp-14h]\nint v82; // [rsp+1Ch] [rbp-14h]\nint v83; // [rsp+1Ch] [rbp-14h]\nint v84; // [rsp+1Ch] [rbp-14h]\nint v85; // [rsp+1Ch] [rbp-14h]\nint v86; // [rsp+1Ch] [rbp-14h]\nint v87; // [rsp+1Ch] [rbp-14h]\nint v88; // [rsp+1Ch] [rbp-14h]\nint v89; // [rsp+1Ch] [rbp-14h]\nint v90; // [rsp+1Ch] [rbp-14h]\nint v91; // [rsp+1Ch] [rbp-14h]\nint v92; // [rsp+1Ch] [rbp-14h]\nint v93; // [rsp+1Ch] [rbp-14h]\nint v94; // [rsp+1Ch] [rbp-14h]\nint v95; // [rsp+1Ch] [rbp-14h]\nint v96; // [rsp+1Ch] [rbp-14h]\nint v97; // [rsp+1Ch] [rbp-14h]\nint v98; // [rsp+1Ch] [rbp-14h]\nint v99; // [rsp+1Ch] [rbp-14h]\nint v100; // [rsp+1Ch] [rbp-14h]\nint v101; // [rsp+20h] [rbp-10h]\nint v102; // [rsp+20h] [rbp-10h]\nint v103; // [rsp+20h] [rbp-10h]\nint v104; // [rsp+20h] [rbp-10h]\nint v105; // [rsp+20h] [rbp-10h]\nint v106; // [rsp+20h] [rbp-10h]\nint v107; // [rsp+20h] [rbp-10h]\nint v108; // [rsp+20h] [rbp-10h]\nint v109; // [rsp+20h] [rbp-10h]\nint v110; // [rsp+20h] [rbp-10h]\nint v111; // [rsp+20h] [rbp-10h]\nint v112; // [rsp+20h] [rbp-10h]\nint v113; // [rsp+20h] [rbp-10h]\nint v114; // [rsp+20h] [rbp-10h]\nint v115; // [rsp+20h] [rbp-10h]\nint v116; // [rsp+20h] [rbp-10h]\nint v117; // [rsp+20h] [rbp-10h]\nint v118; // [rsp+20h] [rbp-10h]\nint v119; // [rsp+20h] [rbp-10h]\nint v120; // [rsp+20h] [rbp-10h]\nint v121; // [rsp+20h] [rbp-10h]\nint v122; // [rsp+20h] [rbp-10h]\nint v123; // [rsp+20h] [rbp-10h]\nint v124; // [rsp+20h] [rbp-10h]\nint v125; // [rsp+20h] [rbp-10h]\nint v126; // [rsp+20h] [rbp-10h]\nint v127; // [rsp+20h] [rbp-10h]\nint v128; // [rsp+20h] [rbp-10h]\nint v129; // [rsp+20h] [rbp-10h]\nint v130; // [rsp+20h] [rbp-10h]\nint v131; // [rsp+20h] [rbp-10h]\nint v132; // [rsp+20h] [rbp-10h]\nint v133; // [rsp+20h] [rbp-10h]\nint v134; // [rsp+24h] [rbp-Ch]\nint v135; // [rsp+24h] [rbp-Ch]\nint v136; // [rsp+24h] [rbp-Ch]\nint v137; // [rsp+24h] [rbp-Ch]\nint v138; // [rsp+24h] [rbp-Ch]\nint v139; // [rsp+24h] [rbp-Ch]\nint v140; // [rsp+24h] [rbp-Ch]\nint v141; // [rsp+24h] [rbp-Ch]\nint v142; // [rsp+24h] [rbp-Ch]\nint v143; // [rsp+24h] [rbp-Ch]\nint v144; // [rsp+24h] [rbp-Ch]\nint v145; // [rsp+24h] [rbp-Ch]\nint v146; // [rsp+24h] [rbp-Ch]\nint v147; // [rsp+24h] [rbp-Ch]\nint v148; // [rsp+24h] [rbp-Ch]\nint v149; // [rsp+24h] [rbp-Ch]\nint v150; // [rsp+24h] [rbp-Ch]\nint v151; // [rsp+24h] [rbp-Ch]\nint v152; // [rsp+24h] [rbp-Ch]\nint v153; // [rsp+24h] [rbp-Ch]\nint v154; // [rsp+24h] [rbp-Ch]\nint v155; // [rsp+24h] [rbp-Ch]\nint v156; // [rsp+24h] [rbp-Ch]\nint v157; // [rsp+24h] [rbp-Ch]\nint v158; // [rsp+24h] [rbp-Ch]\nint v159; // [rsp+24h] [rbp-Ch]\nint v160; // [rsp+24h] [rbp-Ch]\nint v161; // [rsp+24h] [rbp-Ch]\nint v162; // [rsp+24h] [rbp-Ch]\nint v163; // [rsp+24h] [rbp-Ch]\nint v164; // [rsp+24h] [rbp-Ch]\nint v165; // [rsp+24h] [rbp-Ch]\n\nmemcpy(dword_415080, a2, sizeof(dword_415080));\nv134 = *a1;\nv101 = a1[1];\nv69 = a1[2];\nv36 = a1[3];\nv3 = a1[4];\ndword_415080[0] = __ROL4__(dword_415080[0], 8) & 0xFF00FF | __ROR4__(dword_415080[0], 8) & 0xFF00FF00;\nv4 = (v36 ^ v101 & (v36 ^ v69)) + dword_415080[0] + __ROL4__(v134, 5) + 1518500249 + v3;\nv102 = __ROR4__(v101, 2);\ndword_415080[1] = __ROL4__(dword_415080[1], 8) & 0xFF00FF | __ROR4__(dword_415080[1], 8) & 0xFF00FF00;\nv37 = (v69 ^ v134 & (v69 ^ v102)) + dword_415080[1] + __ROL4__(v4, 5) + 1518500249 + v36;\nv135 = __ROR4__(v134, 2);\ndword_415080[2] = __ROL4__(dword_415080[2], 8) & 0xFF00FF | __ROR4__(dword_415080[2], 8) & 0xFF00FF00;\nv70 = (v102 ^ v4 & (v102 ^ v135)) + dword_415080[2] + __ROL4__(v37, 5) + 1518500249 + v69;\nv5 = __ROR4__(v4, 2);\ndword_415080[3] = __ROL4__(dword_415080[3], 8) & 0xFF00FF | __ROR4__(dword_415080[3], 8) & 0xFF00FF00;\nv103 = (v135 ^ v37 & (v135 ^ v5)) + dword_415080[3] + __ROL4__(v70, 5) + 1518500249 + v102;\nv38 = __ROR4__(v37, 2);\ndword_415080[4] = __ROL4__(dword_415080[4], 8) & 0xFF00FF | __ROR4__(dword_415080[4], 8) & 0xFF00FF00;\nv136 = (v5 ^ v70 & (v5 ^ v38)) + dword_415080[4] + __ROL4__(v103, 5) + 1518500249 + v135;\nv71 = __ROR4__(v70, 2);\ndword_415080[5] = __ROL4__(dword_415080[5], 8) & 0xFF00FF | __ROR4__(dword_415080[5], 8) & 0xFF00FF00;\nv6 = (v38 ^ v103 & (v38 ^ v71)) + dword_415080[5] + __ROL4__(v136, 5) + 1518500249 + v5;\nv104 = __ROR4__(v103, 2);\ndword_415080[6] = __ROL4__(dword_415080[6], 8) & 0xFF00FF | __ROR4__(dword_415080[6], 8) & 0xFF00FF00;\nv39 = (v71 ^ v136 & (v71 ^ v104)) + dword_415080[6] + __ROL4__(v6, 5) + 1518500249 + v38;\nv137 = __ROR4__(v136, 2);\ndword_415080[7] = __ROL4__(dword_415080[7], 8) & 0xFF00FF | __ROR4__(dword_415080[7], 8) & 0xFF00FF00;\nv72 = (v104 ^ v6 & (v104 ^ v137)) + dword_415080[7] + __ROL4__(v39, 5) + 1518500249 + v71;\nv7 = __ROR4__(v6, 2);\ndword_415080[8] = __ROL4__(dword_415080[8], 8) & 0xFF00FF | __ROR4__(dword_415080[8], 8) & 0xFF00FF00;\nv105 = (v137 ^ v39 & (v137 ^ v7)) + dword_415080[8] + __ROL4__(v72, 5) + 1518500249 + v104;\nv40 = __ROR4__(v39, 2);\ndword_415080[9] = __ROL4__(dword_415080[9], 8) & 0xFF00FF | __ROR4__(dword_415080[9], 8) & 0xFF00FF00;\nv138 = (v7 ^ v72 & (v7 ^ v40)) + dword_415080[9] + __ROL4__(v105, 5) + 1518500249 + v137;\nv73 = __ROR4__(v72, 2);\ndword_415080[10] = __ROL4__(dword_415080[10], 8) & 0xFF00FF | __ROR4__(dword_415080[10], 8) & 0xFF00FF00;\nv8 = (v40 ^ v105 & (v40 ^ v73)) + dword_415080[10] + __ROL4__(v138, 5) + 1518500249 + v7;\nv106 = __ROR4__(v105, 2);\ndword_415080[11] = __ROL4__(dword_415080[11], 8) & 0xFF00FF | __ROR4__(dword_415080[11], 8) & 0xFF00FF00;\nv41 = (v73 ^ v138 & (v73 ^ v106)) + dword_415080[11] + __ROL4__(v8, 5) + 1518500249 + v40;\nv139 = __ROR4__(v138, 2);\ndword_415080[12] = __ROL4__(dword_415080[12], 8) & 0xFF00FF | __ROR4__(dword_415080[12], 8) & 0xFF00FF00;\nv74 = (v106 ^ v8 & (v106 ^ v139)) + dword_415080[12] + __ROL4__(v41, 5) + 1518500249 + v73;\nv9 = __ROR4__(v8, 2);\ndword_415080[13] = __ROL4__(dword_415080[13], 8) & 0xFF00FF | __ROR4__(dword_415080[13], 8) & 0xFF00FF00;\nv107 = (v139 ^ v41 & (v139 ^ v9)) + dword_415080[13] + __ROL4__(v74, 5) + 1518500249 + v106;\nv42 = __ROR4__(v41, 2);\ndword_415080[14] = __ROL4__(dword_415080[14], 8) & 0xFF00FF | __ROR4__(dword_415080[14], 8) & 0xFF00FF00;\nv140 = (v9 ^ v74 & (v9 ^ v42)) + dword_415080[14] + __ROL4__(v107, 5) + 1518500249 + v139;\nv75 = __ROR4__(v74, 2);\ndword_415080[15] = __ROL4__(dword_415080[15], 8) & 0xFF00FF | __ROR4__(dword_415080[15], 8) & 0xFF00FF00;\nv10 = (v42 ^ v107 & (v42 ^ v75)) + dword_415080[15] + __ROL4__(v140, 5) + 1518500249 + v9;\nv108 = __ROR4__(v107, 2);\ndword_415080[0] = __ROL4__(dword_415080[2] ^ dword_415080[8] ^ dword_415080[13] ^ dword_415080[0], 1);\nv43 = (v75 ^ v140 & (v75 ^ v108)) + dword_415080[0] + __ROL4__(v10, 5) + 1518500249 + v42;\nv141 = __ROR4__(v140, 2);\ndword_415080[1] = __ROL4__(dword_415080[3] ^ dword_415080[9] ^ dword_415080[14] ^ dword_415080[1], 1);\nv76 = (v108 ^ v10 & (v108 ^ v141)) + dword_415080[1] + __ROL4__(v43, 5) + 1518500249 + v75;\nv11 = __ROR4__(v10, 2);\ndword_415080[2] = __ROL4__(dword_415080[4] ^ dword_415080[10] ^ dword_415080[15] ^ dword_415080[2], 1);\nv109 = (v141 ^ v43 & (v141 ^ v11)) + dword_415080[2] + __ROL4__(v76, 5) + 1518500249 + v108;\nv44 = __ROR4__(v43, 2);\ndword_415080[3] = __ROL4__(dword_415080[5] ^ dword_415080[11] ^ dword_415080[0] ^ dword_415080[3], 1);\nv142 = (v11 ^ v76 & (v11 ^ v44)) + dword_415080[3] + __ROL4__(v109, 5) + 1518500249 + v141;\nv77 = __ROR4__(v76, 2);\ndword_415080[4] = __ROL4__(dword_415080[6] ^ dword_415080[12] ^ dword_415080[1] ^ dword_415080[4], 1);\nv12 = (v44 ^ v77 ^ v109) + dword_415080[4] + __ROL4__(v142, 5) + 1859775393 + v11;\nv110 = __ROR4__(v109, 2);\ndword_415080[5] = __ROL4__(dword_415080[7] ^ dword_415080[13] ^ dword_415080[2] ^ dword_415080[5], 1);\nv45 = (v77 ^ v110 ^ v142) + dword_415080[5] + __ROL4__(v12, 5) + 1859775393 + v44;\nv143 = __ROR4__(v142, 2);\ndword_415080[6] = __ROL4__(dword_415080[8] ^ dword_415080[14] ^ dword_415080[3] ^ dword_415080[6], 1);\nv78 = (v110 ^ v143 ^ v12) + dword_415080[6] + __ROL4__(v45, 5) + 1859775393 + v77;\nv13 = __ROR4__(v12, 2);\ndword_415080[7] = __ROL4__(dword_415080[9] ^ dword_415080[15] ^ dword_415080[4] ^ dword_415080[7], 1);\nv111 = (v143 ^ v13 ^ v45) + dword_415080[7] + __ROL4__(v78, 5) + 1859775393 + v110;\nv46 = __ROR4__(v45, 2);\ndword_415080[8] = __ROL4__(dword_415080[10] ^ dword_415080[0] ^ dword_415080[5] ^ dword_415080[8], 1);\nv144 = (v13 ^ v46 ^ v78) + dword_415080[8] + __ROL4__(v111, 5) + 1859775393 + v143;\nv79 = __ROR4__(v78, 2);\ndword_415080[9] = __ROL4__(dword_415080[11] ^ dword_415080[1] ^ dword_415080[6] ^ dword_415080[9], 1);\nv14 = (v46 ^ v79 ^ v111) + dword_415080[9] + __ROL4__(v144, 5) + 1859775393 + v13;\nv112 = __ROR4__(v111, 2);\ndword_415080[10] = __ROL4__(dword_415080[12] ^ dword_415080[2] ^ dword_415080[7] ^ dword_415080[10], 1);\nv47 = (v79 ^ v112 ^ v144) + dword_415080[10] + __ROL4__(v14, 5) + 1859775393 + v46;\nv145 = __ROR4__(v144, 2);\ndword_415080[11] = __ROL4__(dword_415080[13] ^ dword_415080[3] ^ dword_415080[8] ^ dword_415080[11], 1);\nv80 = (v112 ^ v145 ^ v14) + dword_415080[11] + __ROL4__(v47, 5) + 1859775393 + v79;\nv15 = __ROR4__(v14, 2);\ndword_415080[12] = __ROL4__(dword_415080[14] ^ dword_415080[4] ^ dword_415080[9] ^ dword_415080[12], 1);\nv113 = (v145 ^ v15 ^ v47) + dword_415080[12] + __ROL4__(v80, 5) + 1859775393 + v112;\nv48 = __ROR4__(v47, 2);\ndword_415080[13] = __ROL4__(dword_415080[15] ^ dword_415080[5] ^ dword_415080[10] ^ dword_415080[13], 1);\nv146 = (v15 ^ v48 ^ v80) + dword_415080[13] + __ROL4__(v113, 5) + 1859775393 + v145;\nv81 = __ROR4__(v80, 2);\ndword_415080[14] = __ROL4__(dword_415080[0] ^ dword_415080[6] ^ dword_415080[11] ^ dword_415080[14], 1);\nv16 = (v48 ^ v81 ^ v113) + dword_415080[14] + __ROL4__(v146, 5) + 1859775393 + v15;\nv114 = __ROR4__(v113, 2);\ndword_415080[15] = __ROL4__(dword_415080[1] ^ dword_415080[7] ^ dword_415080[12] ^ dword_415080[15], 1);\nv49 = (v81 ^ v114 ^ v146) + dword_415080[15] + __ROL4__(v16, 5) + 1859775393 + v48;\nv147 = __ROR4__(v146, 2);\ndword_415080[0] = __ROL4__(dword_415080[2] ^ dword_415080[8] ^ dword_415080[13] ^ dword_415080[0], 1);\nv82 = (v114 ^ v147 ^ v16) + dword_415080[0] + __ROL4__(v49, 5) + 1859775393 + v81;\nv17 = __ROR4__(v16, 2);\ndword_415080[1] = __ROL4__(dword_415080[3] ^ dword_415080[9] ^ dword_415080[14] ^ dword_415080[1], 1);\nv115 = (v147 ^ v17 ^ v49) + dword_415080[1] + __ROL4__(v82, 5) + 1859775393 + v114;\nv50 = __ROR4__(v49, 2);\ndword_415080[2] = __ROL4__(dword_415080[4] ^ dword_415080[10] ^ dword_415080[15] ^ dword_415080[2], 1);\nv148 = (v17 ^ v50 ^ v82) + dword_415080[2] + __ROL4__(v115, 5) + 1859775393 + v147;\nv83 = __ROR4__(v82, 2);\ndword_415080[3] = __ROL4__(dword_415080[5] ^ dword_415080[11] ^ dword_415080[0] ^ dword_415080[3], 1);\nv18 = (v50 ^ v83 ^ v115) + dword_415080[3] + __ROL4__(v148, 5) + 1859775393 + v17;\nv116 = __ROR4__(v115, 2);\ndword_415080[4] = __ROL4__(dword_415080[6] ^ dword_415080[12] ^ dword_415080[1] ^ dword_415080[4], 1);\nv51 = (v83 ^ v116 ^ v148) + dword_415080[4] + __ROL4__(v18, 5) + 1859775393 + v50;\nv149 = __ROR4__(v148, 2);\ndword_415080[5] = __ROL4__(dword_415080[7] ^ dword_415080[13] ^ dword_415080[2] ^ dword_415080[5], 1);\nv84 = (v116 ^ v149 ^ v18) + dword_415080[5] + __ROL4__(v51, 5) + 1859775393 + v83;\nv19 = __ROR4__(v18, 2);\ndword_415080[6] = __ROL4__(dword_415080[8] ^ dword_415080[14] ^ dword_415080[3] ^ dword_415080[6], 1);\nv117 = (v149 ^ v19 ^ v51) + dword_415080[6] + __ROL4__(v84, 5) + 1859775393 + v116;\nv52 = __ROR4__(v51, 2);\ndword_415080[7] = __ROL4__(dword_415080[9] ^ dword_415080[15] ^ dword_415080[4] ^ dword_415080[7], 1);\nv150 = (v19 ^ v52 ^ v84) + dword_415080[7] + __ROL4__(v117, 5) + 1859775393 + v149;\nv85 = __ROR4__(v84, 2);\ndword_415080[8] = __ROL4__(dword_415080[10] ^ dword_415080[0] ^ dword_415080[5] ^ dword_415080[8], 1);\nv20 = (v85 & v117 | v52 & (v85 | v117)) + dword_415080[8] + __ROL4__(v150, 5) - 1894007588 + v19;\nv118 = __ROR4__(v117, 2);\ndword_415080[9] = __ROL4__(dword_415080[11] ^ dword_415080[1] ^ dword_415080[6] ^ dword_415080[9], 1);\nv53 = (v118 & v150 | v85 & (v118 | v150)) + dword_415080[9] + __ROL4__(v20, 5) - 1894007588 + v52;\nv151 = __ROR4__(v150, 2);\ndword_415080[10] = __ROL4__(dword_415080[12] ^ dword_415080[2] ^ dword_415080[7] ^ dword_415080[10], 1);\nv86 = (v151 & v20 | v118 & (v151 | v20)) + dword_415080[10] + __ROL4__(v53, 5) - 1894007588 + v85;\nv21 = __ROR4__(v20, 2);\ndword_415080[11] = __ROL4__(dword_415080[13] ^ dword_415080[3] ^ dword_415080[8] ^ dword_415080[11], 1);\nv119 = (v21 & v53 | v151 & (v21 | v53)) + dword_415080[11] + __ROL4__(v86, 5) - 1894007588 + v118;\nv54 = __ROR4__(v53, 2);\ndword_415080[12] = __ROL4__(dword_415080[14] ^ dword_415080[4] ^ dword_415080[9] ^ dword_415080[12], 1);\nv152 = (v54 & v86 | v21 & (v54 | v86)) + dword_415080[12] + __ROL4__(v119, 5) - 1894007588 + v151;\nv87 = __ROR4__(v86, 2);\ndword_415080[13] = __ROL4__(dword_415080[15] ^ dword_415080[5] ^ dword_415080[10] ^ dword_415080[13], 1);\nv22 = (v87 & v119 | v54 & (v87 | v119)) + dword_415080[13] + __ROL4__(v152, 5) - 1894007588 + v21;\nv120 = __ROR4__(v119, 2);\ndword_415080[14] = __ROL4__(dword_415080[0] ^ dword_415080[6] ^ dword_415080[11] ^ dword_415080[14], 1);\nv55 = (v120 & v152 | v87 & (v120 | v152)) + dword_415080[14] + __ROL4__(v22, 5) - 1894007588 + v54;\nv153 = __ROR4__(v152, 2);\ndword_415080[15] = __ROL4__(dword_415080[1] ^ dword_415080[7] ^ dword_415080[12] ^ dword_415080[15], 1);\nv88 = (v153 & v22 | v120 & (v153 | v22)) + dword_415080[15] + __ROL4__(v55, 5) - 1894007588 + v87;\nv23 = __ROR4__(v22, 2);\ndword_415080[0] = __ROL4__(dword_415080[2] ^ dword_415080[8] ^ dword_415080[13] ^ dword_415080[0], 1);\nv121 = (v23 & v55 | v153 & (v23 | v55)) + dword_415080[0] + __ROL4__(v88, 5) - 1894007588 + v120;\nv56 = __ROR4__(v55, 2);\ndword_415080[1] = __ROL4__(dword_415080[3] ^ dword_415080[9] ^ dword_415080[14] ^ dword_415080[1], 1);\nv154 = (v56 & v88 | v23 & (v56 | v88)) + dword_415080[1] + __ROL4__(v121, 5) - 1894007588 + v153;\nv89 = __ROR4__(v88, 2);\ndword_415080[2] = __ROL4__(dword_415080[4] ^ dword_415080[10] ^ dword_415080[15] ^ dword_415080[2], 1);\nv24 = (v89 & v121 | v56 & (v89 | v121)) + dword_415080[2] + __ROL4__(v154, 5) - 1894007588 + v23;\nv122 = __ROR4__(v121, 2);\ndword_415080[3] = __ROL4__(dword_415080[5] ^ dword_415080[11] ^ dword_415080[0] ^ dword_415080[3], 1);\nv57 = (v122 & v154 | v89 & (v122 | v154)) + dword_415080[3] + __ROL4__(v24, 5) - 1894007588 + v56;\nv155 = __ROR4__(v154, 2);\ndword_415080[4] = __ROL4__(dword_415080[6] ^ dword_415080[12] ^ dword_415080[1] ^ dword_415080[4], 1);\nv90 = (v155 & v24 | v122 & (v155 | v24)) + dword_415080[4] + __ROL4__(v57, 5) - 1894007588 + v89;\nv25 = __ROR4__(v24, 2);\ndword_415080[5] = __ROL4__(dword_415080[7] ^ dword_415080[13] ^ dword_415080[2] ^ dword_415080[5], 1);\nv123 = (v25 & v57 | v155 & (v25 | v57)) + dword_415080[5] + __ROL4__(v90, 5) - 1894007588 + v122;\nv58 = __ROR4__(v57, 2);\ndword_415080[6] = __ROL4__(dword_415080[8] ^ dword_415080[14] ^ dword_415080[3] ^ dword_415080[6], 1);\nv156 = (v58 & v90 | v25 & (v58 | v90)) + dword_415080[6] + __ROL4__(v123, 5) - 1894007588 + v155;\nv91 = __ROR4__(v90, 2);\ndword_415080[7] = __ROL4__(dword_415080[9] ^ dword_415080[15] ^ dword_415080[4] ^ dword_415080[7], 1);\nv26 = (v91 & v123 | v58 & (v91 | v123)) + dword_415080[7] + __ROL4__(v156, 5) - 1894007588 + v25;\nv124 = __ROR4__(v123, 2);\ndword_415080[8] = __ROL4__(dword_415080[10] ^ dword_415080[0] ^ dword_415080[5] ^ dword_415080[8], 1);\nv59 = (v124 & v156 | v91 & (v124 | v156)) + dword_415080[8] + __ROL4__(v26, 5) - 1894007588 + v58;\nv157 = __ROR4__(v156, 2);\ndword_415080[9] = __ROL4__(dword_415080[11] ^ dword_415080[1] ^ dword_415080[6] ^ dword_415080[9], 1);\nv92 = (v157 & v26 | v124 & (v157 | v26)) + dword_415080[9] + __ROL4__(v59, 5) - 1894007588 + v91;\nv27 = __ROR4__(v26, 2);\ndword_415080[10] = __ROL4__(dword_415080[12] ^ dword_415080[2] ^ dword_415080[7] ^ dword_415080[10], 1);\nv125 = (v27 & v59 | v157 & (v27 | v59)) + dword_415080[10] + __ROL4__(v92, 5) - 1894007588 + v124;\nv60 = __ROR4__(v59, 2);\ndword_415080[11] = __ROL4__(dword_415080[13] ^ dword_415080[3] ^ dword_415080[8] ^ dword_415080[11], 1);\nv158 = (v60 & v92 | v27 & (v60 | v92)) + dword_415080[11] + __ROL4__(v125, 5) - 1894007588 + v157;\nv93 = __ROR4__(v92, 2);\ndword_415080[12] = __ROL4__(dword_415080[14] ^ dword_415080[4] ^ dword_415080[9] ^ dword_415080[12], 1);\nv28 = (v60 ^ v93 ^ v125) + dword_415080[12] + __ROL4__(v158, 5) - 899497514 + v27;\nv126 = __ROR4__(v125, 2);\ndword_415080[13] = __ROL4__(dword_415080[15] ^ dword_415080[5] ^ dword_415080[10] ^ dword_415080[13], 1);\nv61 = (v93 ^ v126 ^ v158) + dword_415080[13] + __ROL4__(v28, 5) - 899497514 + v60;\nv159 = __ROR4__(v158, 2);\ndword_415080[14] = __ROL4__(dword_415080[0] ^ dword_415080[6] ^ dword_415080[11] ^ dword_415080[14], 1);\nv94 = (v126 ^ v159 ^ v28) + dword_415080[14] + __ROL4__(v61, 5) - 899497514 + v93;\nv29 = __ROR4__(v28, 2);\ndword_415080[15] = __ROL4__(dword_415080[1] ^ dword_415080[7] ^ dword_415080[12] ^ dword_415080[15], 1);\nv127 = (v159 ^ v29 ^ v61) + dword_415080[15] + __ROL4__(v94, 5) - 899497514 + v126;\nv62 = __ROR4__(v61, 2);\ndword_415080[0] = __ROL4__(dword_415080[2] ^ dword_415080[8] ^ dword_415080[13] ^ dword_415080[0], 1);\nv160 = (v29 ^ v62 ^ v94) + dword_415080[0] + __ROL4__(v127, 5) - 899497514 + v159;\nv95 = __ROR4__(v94, 2);\ndword_415080[1] = __ROL4__(dword_415080[3] ^ dword_415080[9] ^ dword_415080[14] ^ dword_415080[1], 1);\nv30 = (v62 ^ v95 ^ v127) + dword_415080[1] + __ROL4__(v160, 5) - 899497514 + v29;\nv128 = __ROR4__(v127, 2);\ndword_415080[2] = __ROL4__(dword_415080[4] ^ dword_415080[10] ^ dword_415080[15] ^ dword_415080[2], 1);\nv63 = (v95 ^ v128 ^ v160) + dword_415080[2] + __ROL4__(v30, 5) - 899497514 + v62;\nv161 = __ROR4__(v160, 2);\ndword_415080[3] = __ROL4__(dword_415080[5] ^ dword_415080[11] ^ dword_415080[0] ^ dword_415080[3], 1);\nv96 = (v128 ^ v161 ^ v30) + dword_415080[3] + __ROL4__(v63, 5) - 899497514 + v95;\nv31 = __ROR4__(v30, 2);\ndword_415080[4] = __ROL4__(dword_415080[6] ^ dword_415080[12] ^ dword_415080[1] ^ dword_415080[4], 1);\nv129 = (v161 ^ v31 ^ v63) + dword_415080[4] + __ROL4__(v96, 5) - 899497514 + v128;\nv64 = __ROR4__(v63, 2);\ndword_415080[5] = __ROL4__(dword_415080[7] ^ dword_415080[13] ^ dword_415080[2] ^ dword_415080[5], 1);\nv162 = (v31 ^ v64 ^ v96) + dword_415080[5] + __ROL4__(v129, 5) - 899497514 + v161;\nv97 = __ROR4__(v96, 2);\ndword_415080[6] = __ROL4__(dword_415080[8] ^ dword_415080[14] ^ dword_415080[3] ^ dword_415080[6], 1);\nv32 = (v64 ^ v97 ^ v129) + dword_415080[6] + __ROL4__(v162, 5) - 899497514 + v31;\nv130 = __ROR4__(v129, 2);\ndword_415080[7] = __ROL4__(dword_415080[9] ^ dword_415080[15] ^ dword_415080[4] ^ dword_415080[7], 1);\nv65 = (v97 ^ v130 ^ v162) + dword_415080[7] + __ROL4__(v32, 5) - 899497514 + v64;\nv163 = __ROR4__(v162, 2);\ndword_415080[8] = __ROL4__(dword_415080[10] ^ dword_415080[0] ^ dword_415080[5] ^ dword_415080[8], 1);\nv98 = (v130 ^ v163 ^ v32) + dword_415080[8] + __ROL4__(v65, 5) - 899497514 + v97;\nv33 = __ROR4__(v32, 2);\ndword_415080[9] = __ROL4__(dword_415080[11] ^ dword_415080[1] ^ dword_415080[6] ^ dword_415080[9], 1);\nv131 = (v163 ^ v33 ^ v65) + dword_415080[9] + __ROL4__(v98, 5) - 899497514 + v130;\nv66 = __ROR4__(v65, 2);\ndword_415080[10] = __ROL4__(dword_415080[12] ^ dword_415080[2] ^ dword_415080[7] ^ dword_415080[10], 1);\nv164 = (v33 ^ v66 ^ v98) + dword_415080[10] + __ROL4__(v131, 5) - 899497514 + v163;\nv99 = __ROR4__(v98, 2);\ndword_415080[11] = __ROL4__(dword_415080[13] ^ dword_415080[3] ^ dword_415080[8] ^ dword_415080[11], 1);\nv34 = (v66 ^ v99 ^ v131) + dword_415080[11] + __ROL4__(v164, 5) - 899497514 + v33;\nv132 = __ROR4__(v131, 2);\ndword_415080[12] = __ROL4__(dword_415080[14] ^ dword_415080[4] ^ dword_415080[9] ^ dword_415080[12], 1);\nv67 = (v99 ^ v132 ^ v164) + dword_415080[12] + __ROL4__(v34, 5) - 899497514 + v66;\nv165 = __ROR4__(v164, 2);\ndword_415080[13] = __ROL4__(dword_415080[15] ^ dword_415080[5] ^ dword_415080[10] ^ dword_415080[13], 1);\nv100 = (v132 ^ v165 ^ v34) + dword_415080[13] + __ROL4__(v67, 5) - 899497514 + v99;\nv35 = __ROR4__(v34, 2);\ndword_415080[14] = __ROL4__(dword_415080[0] ^ dword_415080[6] ^ dword_415080[11] ^ dword_415080[14], 1);\nv133 = (v165 ^ v35 ^ v67) + dword_415080[14] + __ROL4__(v100, 5) - 899497514 + v132;\nv68 = __ROR4__(v67, 2);\ndword_415080[15] = __ROL4__(dword_415080[1] ^ dword_415080[7] ^ dword_415080[12] ^ dword_415080[15], 1);\n*a1 += (v35 ^ v68 ^ v100) + dword_415080[15] + __ROL4__(v133, 5) - 899497514 + v165;\na1[1] += v133;\na1[2] += __ROR4__(v100, 2);\na1[3] += v68;\na1[4] += v35;\nreturn 0LL;\n}"}, {"addr": 4229311, "funname": "sub_4088BF", "code": "_DWORD *__fastcall sub_4088BF(_DWORD *a1)\n{\n_DWORD *result; // rax\n\n*a1 = 1732584193;\na1[1] = -271733879;\na1[2] = -1732584194;\na1[3] = 271733878;\na1[4] = -1009589776;\na1[6] = 0;\nresult = a1;\na1[5] = a1[6];\nreturn result;\n}"}, {"addr": 4229401, "funname": "sub_408919", "code": "void *__fastcall sub_408919(int *a1, char *a2, unsigned int a3)\n{\nunsigned int v5; // [rsp+28h] [rbp-8h]\nunsigned int n; // [rsp+2Ch] [rbp-4h]\n\nv5 = ((unsigned int)a1[5] >> 3) & 0x3F;\na1[5] += 8 * a3;\nif ( a1[5] < 8 * a3 )\n++a1[6];\na1[6] += a3 >> 29;\nif ( v5 + a3 <= 0x3F )\n{\nn = 0;\n}\nelse\n{\nn = 64 - v5;\nmemcpy((char *)a1 + v5 + 28, a2, 64 - v5);\nsub_406C3F(a1, a1 + 7);\nwhile ( a3 > n + 63 )\n{\nsub_406C3F(a1, &a2[n]);\nn += 64;\n}\nv5 = 0;\n}\nreturn memcpy((char *)a1 + v5 + 28, &a2[n], a3 - n);\n}"}, {"addr": 4229705, "funname": "sub_408A49", "code": "__int64 __fastcall sub_408A49(__int64 a1, int *a2)\n{\nchar v3[8]; // [rsp+10h] [rbp-10h] BYREF\nint v4; // [rsp+18h] [rbp-8h]\nunsigned int i; // [rsp+1Ch] [rbp-4h]\n\nfor ( i = 0; i <= 7; ++i )\nv3[i] = (unsigned int)a2[(i <= 3) + 5] >> (8 * (~(_BYTE)i & 3));\nsub_408919(a2, byte_4102C1, 1u);\nwhile ( (a2[5] & 0x1F8) != 448 )\nsub_408919(a2, byte_4102C3, 1u);\nsub_408919(a2, v3, 8u);\nfor ( i = 0; i <= 0x13; ++i )\n*(_BYTE *)(i + a1) = (unsigned int)a2[i >> 2] >> (8 * (~(_BYTE)i & 3));\nv4 = 0;\ni = 0;\nmemset(a2 + 7, 0, 0x40uLL);\nmemset(a2, 0, 0x14uLL);\nmemset(a2 + 5, 0, 8uLL);\nmemset(v3, 0, sizeof(v3));\nreturn sub_406C3F(a2, a2 + 7);\n}"}, {"addr": 4230082, "funname": "sub_408BC2", "code": "__int64 __fastcall sub_408BC2(unsigned int a1)\n{\n__int64 v2; // [rsp+18h] [rbp-8h]\n\nv2 = sub_40C999();\nsub_40CE13(v2, a1);\nreturn v2;\n}"}, {"addr": 4230126, "funname": "sub_408BEE", "code": "__int64 __fastcall sub_408BEE(__int64 a1, unsigned int a2)\n{\n__int64 v3; // [rsp+18h] [rbp-8h]\n\nv3 = sub_40C999();\nsub_40CF0A(a1, a2, v3);\nreturn v3;\n}"}, {"addr": 4230177, "funname": "sub_408C21", "code": "__int64 __fastcall sub_408C21(__int64 a1, __int64 a2)\n{\nreturn sub_40D0BF(a1, a2);\n}"}, {"addr": 4230214, "funname": "sub_408C46", "code": "__int64 __fastcall sub_408C46(__int64 a1, __int64 a2)\n{\nreturn sub_40D215(a1, a2);\n}"}, {"addr": 4230251, "funname": "sub_408C6B", "code": "__int64 __fastcall sub_408C6B(__int64 a1, unsigned int a2)\n{\nunsigned int v3; // [rsp+14h] [rbp-Ch]\n__int64 v4; // [rsp+18h] [rbp-8h]\n\nv4 = sub_40C999();\nsub_40CE13(v4, a2);\nv3 = sub_40D215(a1, v4);\nsub_40C906(v4);\nreturn v3;\n}"}, {"addr": 4230332, "funname": "sub_408CBC", "code": "__int64 __fastcall sub_408CBC(__int64 a1, __int64 a2, __int64 a3)\n{\nreturn sub_40A34C(a1, a2, a3);\n}"}, {"addr": 4230378, "funname": "sub_408CEA", "code": "__int64 __fastcall sub_408CEA(__int64 a1, __int64 a2, unsigned int a3)\n{\n__int64 v5; // [rsp+28h] [rbp-8h]\n\nv5 = sub_40C999();\nsub_40CE13(v5, a3);\nsub_40A34C(a1, a2, v5);\nreturn sub_40C906(v5);\n}"}, {"addr": 4230462, "funname": "sub_408D3E", "code": "__int64 __fastcall sub_408D3E(__int64 a1, __int64 a2, __int64 a3)\n{\nreturn sub_40A857(a1, a2, a3);\n}"}, {"addr": 4230508, "funname": "sub_408D6C", "code": "__int64 __fastcall sub_408D6C(__int64 a1, __int64 a2, unsigned int a3)\n{\n__int64 v5; // [rsp+20h] [rbp-10h]\n__int64 v6; // [rsp+28h] [rbp-8h]\n\nv6 = sub_40A9D9();\nv5 = sub_40C999();\nsub_40CE13(v5, a3);\nsub_40B1C5(a1, a2, v5, v6);\nreturn sub_40AA9A(v6);\n}"}, {"addr": 4230602, "funname": "sub_408DCA", "code": "__int64 __fastcall sub_408DCA(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n__int64 v7; // [rsp+28h] [rbp-8h]\n\nv7 = sub_40A9D9();\nsub_40AC4C(a1, a2, a3, a4, v7);\nreturn sub_40AA9A(v7);\n}"}, {"addr": 4230681, "funname": "sub_408E19", "code": "__int64 __fastcall sub_408E19(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n__int64 v7; // [rsp+28h] [rbp-8h]\n\nv7 = sub_40A9D9();\nsub_40AD12(a1, a2, a3, a4, v7);\nreturn sub_40AA9A(v7);\n}"}, {"addr": 4230760, "funname": "sub_408E68", "code": "__int64 __fastcall sub_408E68(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)\n{\n__int64 v7; // [rsp+20h] [rbp-10h]\n__int64 v8; // [rsp+28h] [rbp-8h]\n\nv8 = sub_40A9D9();\nv7 = sub_40C999();\nsub_40CE13(v7, a3);\nsub_40AD12(a1, a2, v7, a4, v8);\nsub_40C906(v7);\nreturn sub_40AA9A(v8);\n}"}, {"addr": 4230877, "funname": "sub_408EDD", "code": "__int64 __fastcall sub_408EDD(__int64 a1)\n{\nreturn sub_40C906(a1);\n}"}, {"addr": 4230904, "funname": "sub_408EF8", "code": "__int64 __fastcall sub_408EF8(__int64 a1)\n{\nunsigned int v1; // eax\nint v3[24]; // [rsp+10h] [rbp-170h] BYREF\nchar dest[264]; // [rsp+70h] [rbp-110h] BYREF\nchar **i; // [rsp+178h] [rbp-8h]\n\nsub_4088BF(v3);\nfor ( i = environ; *i; ++i )\n{\nstrncpy(dest, *i, 0xFFuLL);\ndest[255] = 0;\nv1 = strlen(dest);\nsub_408919(v3, dest, v1);\n}\nreturn sub_408A49(a1, v3);\n}"}, {"addr": 4231942, "funname": "sub_409306", "code": "unsigned __int64 __fastcall sub_409306(char *a1, unsigned int a2)\n{\nunsigned __int64 result; // rax\nunsigned int n; // [rsp+4h] [rbp-Ch]\n\nn = a2;\nresult = (unsigned __int8)byte_415164;\nif ( !byte_415164 )\nresult = sub_4091A7();\nif ( a2 )\n{\nwhile ( 1 )\n{\nresult = (unsigned int)::n;\nif ( n <= (unsigned int)::n )\nbreak;\nif ( (_DWORD)::n )\n{\nmemcpy(a1, (char *)&unk_415140 + 20LL - (unsigned int)::n, (unsigned int)::n);\na1 += (unsigned int)::n;\nn -= ::n;\n}\nsub_4088BF(dword_4150C0);\nsub_408919(dword_4150C0, byte_415120, 0x14u);\nsub_408A49((__int64)&unk_415140, dword_4150C0);\nsub_4088BF(dword_4150C0);\nsub_408919(dword_4150C0, (char *)&qword_415158, 8u);\nsub_408919(dword_4150C0, byte_415120, 0x14u);\nsub_408A49((__int64)byte_415120, dword_4150C0);\n++qword_415158;\nLODWORD(::n) = 20;\n}\nif ( n )\n{\nmemcpy(a1, (char *)&unk_415140 + 20LL - (unsigned int)::n, n);\nresult = (unsigned int)::n - n;\nLODWORD(::n) = ::n - n;\n}\n}\nreturn result;\n}"}, {"addr": 4232290, "funname": "sub_409462", "code": "__int64 __fastcall sub_409462(__int64 a1, _BYTE *a2, unsigned int a3)\n{\nint v6[24]; // [rsp+20h] [rbp-90h] BYREF\nchar s[32]; // [rsp+80h] [rbp-30h] BYREF\nvoid *ptr; // [rsp+A0h] [rbp-10h]\nsize_t size; // [rsp+A8h] [rbp-8h]\n\nwhile ( a3 && !*a2 )\n{\n--a3;\n++a2;\n}\nLODWORD(size) = a3 >> 1;\nptr = malloc(a3 >> 1);\nif ( !ptr )\nreturn 0LL;\nfor ( HIDWORD(size) = 0; HIDWORD(size) < (unsigned int)size; ++HIDWORD(size) )\n*((_BYTE *)ptr + HIDWORD(size)) = a2[a3 - 2 * HIDWORD(size) - 1];\nsub_4088BF(v6);\nsub_408919(v6, (char *)ptr, size);\nsub_408A49((__int64)s, v6);\nfor ( HIDWORD(size) = 0; HIDWORD(size) <= 0x13; ++HIDWORD(size) )\n*(_BYTE *)(a1 + (unsigned int)(2 * HIDWORD(size))) = s[HIDWORD(size)];\nfor ( HIDWORD(size) = 0; HIDWORD(size) < (unsigned int)size; ++HIDWORD(size) )\n*((_BYTE *)ptr + HIDWORD(size)) = a2[a3 - 2 * HIDWORD(size) - 2];\nsub_4088BF(v6);\nsub_408919(v6, (char *)ptr, size);\nsub_408A49((__int64)s, v6);\nfor ( HIDWORD(size) = 0; HIDWORD(size) <= 0x13; ++HIDWORD(size) )\n*(_BYTE *)(a1 + (unsigned int)(2 * HIDWORD(size) + 1)) = s[HIDWORD(size)];\nmemset(s, 0, 0x14uLL);\nmemset(ptr, 0, (unsigned int)size);\nfree(ptr);\nreturn a1;\n}"}, {"addr": 4232816, "funname": "sub_409670", "code": "char *__fastcall sub_409670(__int64 a1, __int64 a2)\n{\nunsigned int v3; // eax\nint v4[24]; // [rsp+10h] [rbp-B0h] BYREF\nchar v5[32]; // [rsp+70h] [rbp-50h] BYREF\nchar v6[32]; // [rsp+90h] [rbp-30h] BYREF\nchar *v7; // [rsp+B0h] [rbp-10h]\nunsigned int i; // [rsp+BCh] [rbp-4h]\n\nv7 = (char *)malloc(0x658uLL);\nif ( !v7 )\nreturn 0LL;\nsub_4088BF((_DWORD *)v7 + 95);\n*(_DWORD *)v7 = *(_DWORD *)(a1 + 40);\n*((_DWORD *)v7 + 2) = *(_DWORD *)(a2 + 8);\n*((_QWORD *)v7 + 2) = v7 + 532;\nmemcpy(*((void **)v7 + 2), *(const void **)(a2 + 16), *((int *)v7 + 2));\nsub_4088BF(v4);\nsub_408919(v4, *((char **)v7 + 2), *((_DWORD *)v7 + 2));\nsub_408A49((__int64)v6, v4);\n*((_DWORD *)v7 + 6) = *(_DWORD *)(a2 + 24);\n*((_QWORD *)v7 + 4) = v7 + 788;\nmemcpy(*((void **)v7 + 4), *(const void **)(a2 + 32), *((int *)v7 + 6));\nsub_4088BF(v4);\nsub_408919(v4, *((char **)v7 + 4), *((_DWORD *)v7 + 6));\nsub_408A49((__int64)v5, v4);\nfor ( i = 0; i <= 0x13; ++i )\nv6[i] ^= v5[i];\nsub_408919((int *)v7 + 95, v6, 0x14u);\nsub_4088BF(v4);\nv3 = strlen(*(const char **)a1);\nsub_408919(v4, *(char **)a1, v3);\nsub_408A49((__int64)v6, v4);\nsub_408919((int *)v7 + 95, v6, 0x14u);\n*((_DWORD *)v7 + 10) = *(_DWORD *)(a1 + 8);\n*((_QWORD *)v7 + 6) = v7 + 1044;\nmemcpy(*((void **)v7 + 6), *(const void **)(a1 + 16), *((int *)v7 + 10));\n*((_DWORD *)v7 + 14) = *(_DWORD *)(a1 + 24);\n*((_QWORD *)v7 + 8) = v7 + 1300;\nmemcpy(*((void **)v7 + 8), *(const void **)(a1 + 32), *((int *)v7 + 14));\nsub_408919((int *)v7 + 95, *((char **)v7 + 8), *((_DWORD *)v7 + 14));\n*((_QWORD *)v7 + 10) = v7 + 1332;\n*((_QWORD *)v7 + 12) = v7 + 1364;\nsub_4088BF((_DWORD *)v7 + 49);\nsub_4088BF((_DWORD *)v7 + 26);\nsub_4088BF((_DWORD *)v7 + 72);\nreturn v7;\n}"}, {"addr": 4233690, "funname": "sub_4099DA", "code": "__int64 __fastcall sub_4099DA(__int64 a1)\n{\n__int64 v2; // [rsp+18h] [rbp-28h]\n__int64 v3; // [rsp+20h] [rbp-20h]\n__int64 v4; // [rsp+28h] [rbp-18h]\n__int64 v5; // [rsp+30h] [rbp-10h]\n__int64 v6; // [rsp+38h] [rbp-8h]\n\nif ( *(int *)(a1 + 8) > 31 )\n*(_DWORD *)(a1 + 72) = 32;\nelse\n*(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 8);\nsub_409306(*(char **)(a1 + 80), *(_DWORD *)(a1 + 72));\nv6 = sub_408BEE(*(_QWORD *)(a1 + 80), *(_DWORD *)(a1 + 72));\nv5 = sub_408BEE(*(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 8));\nv4 = sub_408BEE(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 24));\nv3 = sub_408BC2(0);\nsub_408E19(v3, v4, v6, v5);\nv2 = sub_408BEE(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 40));\nsub_408CBC(v3, v3, v2);\nif ( (int)sub_408C46(v3, v5) > 0 )\nsub_408D3E(v3, v3, v5);\n*(_DWORD *)(a1 + 88) = sub_408C21(v3, *(_QWORD *)(a1 + 96));\nsub_408EDD(v2);\nsub_408EDD(v3);\nsub_408EDD(v6);\nsub_408EDD(v4);\nsub_408EDD(v5);\nsub_408919((int *)(a1 + 288), *(char **)(a1 + 96), *(_DWORD *)(a1 + 88));\nreturn a1 + 88;\n}"}, {"addr": 4234132, "funname": "sub_409B94", "code": "__int64 __fastcall sub_409B94(__int64 a1, __int64 a2)\n{\n__int64 result; // rax\nunsigned int v5[8]; // [rsp+10h] [rbp-1C0h] BYREF\nchar s[256]; // [rsp+30h] [rbp-1A0h] BYREF\nint v7[23]; // [rsp+130h] [rbp-A0h] BYREF\nunsigned int n[3]; // [rsp+18Ch] [rbp-44h]\n__int64 v9; // [rsp+198h] [rbp-38h]\n__int64 v10; // [rsp+1A0h] [rbp-30h]\n__int64 v11; // [rsp+1A8h] [rbp-28h]\n__int64 v12; // [rsp+1B0h] [rbp-20h]\n__int64 v13; // [rsp+1B8h] [rbp-18h]\n__int64 v14; // [rsp+1C0h] [rbp-10h]\nunsigned int v15; // [rsp+1CCh] [rbp-4h]\n\nsub_408919((int *)(a1 + 380), *(char **)(a2 + 8), *(_DWORD *)a2);\nsub_408919((int *)(a1 + 380), *(char **)(a1 + 96), *(_DWORD *)(a1 + 88));\nsub_4088BF(v7);\nsub_408919(v7, *(char **)(a1 + 96), *(_DWORD *)(a1 + 88));\nsub_408A49((__int64)v5, v7);\nv15 = _byteswap_ulong(v5[0]);\nsub_408919((int *)(a1 + 104), *(char **)(a2 + 8), *(_DWORD *)a2);\nsub_408919((int *)(a1 + 196), *(char **)(a2 + 8), *(_DWORD *)a2);\nv14 = sub_408BEE(*(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 8));\nv13 = sub_408BEE(*(_QWORD *)(a1 + 80), *(_DWORD *)(a1 + 72));\nv12 = sub_408BEE(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 40));\nv11 = sub_408BEE(*(_QWORD *)(a2 + 8), *(_DWORD *)a2);\nv10 = sub_408BC2(0);\nsub_408E68(v10, v12, v15, v14);\nv9 = sub_408BC2(0);\nsub_408DCA(v9, v10, v11, v14);\nsub_408EDD(v11);\nsub_408EDD(v12);\nsub_408EDD(v10);\nif ( (int)sub_408C6B(v9, 1u) > 0 )\n{\n*(_QWORD *)&n[1] = sub_408BC2(0);\nsub_408CEA(*(__int64 *)&n[1], v9, 1u);\nif ( (unsigned int)sub_408C46(*(__int64 *)&n[1], v14) )\n{\nsub_408E19(*(__int64 *)&n[1], v9, v13, v14);\nn[0] = sub_408C21(*(__int64 *)&n[1], (__int64)s);\nsub_408EDD(*(__int64 *)&n[1]);\nsub_408EDD(v9);\nsub_408EDD(v13);\nsub_408EDD(v14);\nsub_409462(a1 + 472, s, n[0]);\nmemset(s, 0, n[0]);\nsub_408919((int *)(a1 + 104), (char *)(a1 + 472), 0x28u);\nsub_408919((int *)(a1 + 288), (char *)(a1 + 472), 0x28u);\nsub_408919((int *)(a1 + 380), (char *)(a1 + 472), 0x28u);\nresult = a1 + 472;\n}\nelse\n{\nsub_408EDD(v9);\nsub_408EDD(v13);\nsub_408EDD(v14);\nsub_408EDD(*(__int64 *)&n[1]);\nresult = 0LL;\n}\n}\nelse\n{\nsub_408EDD(v9);\nsub_408EDD(v13);\nsub_408EDD(v14);\nresult = 0LL;\n}\nreturn result;\n}"}, {"addr": 4235225, "funname": "sub_409FD9", "code": "__int64 __fastcall sub_409FD9(__int64 a1, const void *a2)\n{\n__int64 result; // rax\nchar s1[28]; // [rsp+10h] [rbp-20h] BYREF\nunsigned int v4; // [rsp+2Ch] [rbp-4h]\n\nsub_408A49((__int64)s1, (int *)(a1 + 288));\nv4 = memcmp(s1, a2, 0x14uLL);\nif ( v4 )\n{\nsub_408A49((__int64)s1, (int *)(a1 + 380));\nv4 = memcmp(s1, a2, 0x14uLL);\nif ( !v4 )\n{\nsub_408919((int *)(a1 + 196), s1, 0x14u);\nsub_408919((int *)(a1 + 196), (char *)(a1 + 472), 0x28u);\nsub_408A49(a1 + 512, (int *)(a1 + 196));\n}\nresult = v4;\n}\nelse\n{\nsub_408A49(a1 + 512, (int *)(a1 + 104));\nresult = 0LL;\n}\nreturn result;\n}"}, {"addr": 4235503, "funname": "sub_40A0EF", "code": "__int64 __fastcall sub_40A0EF(__int64 a1)\n{\nreturn a1 + 512;\n}"}, {"addr": 4235523, "funname": "sub_40A103", "code": "void __fastcall sub_40A103(__int64 a1)\n{\nmemset((void *)(a1 + 1332), 0, 0x20uLL);\nmemset((void *)(a1 + 1044), 0, 0x100uLL);\nmemset((void *)(a1 + 1300), 0, 0x20uLL);\nmemset((void *)(a1 + 472), 0, 0x28uLL);\nfree((void *)a1);\n}"}, {"addr": 4235740, "funname": "sub_40A1DC", "code": "void sub_40A1DC()\n{\nif ( dword_4151E0 )\n{\n++dword_4151E4;\n}\nelse\n{\nsignal(14, sub_40A1DC);\nsub_40A18E();\n}\n}"}, {"addr": 4235798, "funname": "sub_40A216", "code": "__int64 sub_40A216()\n{\ndword_4151E4 = 0;\nsignal(14, (__sighandler_t)sub_40A1DC);\ndword_4151E0 = 0;\nsub_40A18E();\nwhile ( !dword_4151E4 )\n++dword_4151E0;\ndword_4151E0 ^= dword_4151E8 ^ ((unsigned int)dword_4151E0 >> 6) ^ ((unsigned int)dword_4151E0 >> 3);\ndword_4151E0 &= 7u;\ndword_4151E8 = dword_4151E0;\ndword_4151EC = (8 * dword_4151EC) ^ dword_4151E0;\nreturn (unsigned int)dword_4151EC;\n}"}, {"addr": 4235982, "funname": "sub_40A2CE", "code": "__int64 sub_40A2CE()\n{\ndword_4151E0 = 0;\nsub_40A216();\nsub_40A216();\nsub_40A216();\nsub_40A216();\nsub_40A216();\nsub_40A216();\nsub_40A216();\nsub_40A216();\nsub_40A216();\nsub_40A216();\nreturn sub_40A216();\n}"}, {"addr": 4236108, "funname": "sub_40A34C", "code": "_BOOL8 __fastcall sub_40A34C(__int64 a1, __int64 a2, __int64 a3)\n{\n_BOOL8 result; // rax\n__int64 v4; // [rsp+8h] [rbp-28h]\n__int64 v5; // [rsp+10h] [rbp-20h]\n\nv5 = a2;\nv4 = a3;\nif ( *(_DWORD *)(a2 + 16) == *(_DWORD *)(a3 + 16) )\n{\nif ( *(_DWORD *)(a2 + 16) )\n*(_DWORD *)(a1 + 16) = 1;\nelse\n*(_DWORD *)(a1 + 16) = 0;\nresult = (unsigned int)sub_40A462(a1, a2, a3) != 0;\n}\nelse\n{\nif ( *(_DWORD *)(a2 + 16) )\n{\nv5 = a3;\nv4 = a2;\n}\nif ( (int)sub_40D158(v5, v4) >= 0 )\n{\nif ( !(unsigned int)sub_40A626(a1, v5, v4) )\nreturn 0LL;\n*(_DWORD *)(a1 + 16) = 0;\n}\nelse\n{\nif ( !(unsigned int)sub_40A626(a1, v4, v5) )\nreturn 0LL;\n*(_DWORD *)(a1 + 16) = 1;\n}\nresult = 1LL;\n}\nreturn result;\n}"}, {"addr": 4236386, "funname": "sub_40A462", "code": "__int64 __fastcall sub_40A462(__int64 *a1, __int64 *a2, __int64 *a3)\n{\nbool v3; // al\nint v5; // ebx\nunsigned __int64 *v6; // rax\nunsigned __int64 *v7; // rax\nunsigned __int64 *v8; // rax\nunsigned __int64 *v9; // rdx\nunsigned __int64 *v10; // rax\n__int64 *v11; // [rsp+8h] [rbp-68h]\n__int64 *v12; // [rsp+10h] [rbp-60h]\nunsigned __int64 v13; // [rsp+28h] [rbp-48h]\nunsigned int v14; // [rsp+38h] [rbp-38h]\nint v15; // [rsp+3Ch] [rbp-34h]\n__int64 v16; // [rsp+48h] [rbp-28h]\n__int64 v17; // [rsp+50h] [rbp-20h]\nunsigned __int64 *v18; // [rsp+50h] [rbp-20h]\n__int64 v19; // [rsp+58h] [rbp-18h]\nunsigned __int64 *v20; // [rsp+58h] [rbp-18h]\n\nv12 = a2;\nv11 = a3;\nif ( *((_DWORD *)a2 + 2) < *((_DWORD *)a3 + 2) )\n{\nv12 = a3;\nv11 = a2;\n}\nv15 = *((_DWORD *)v12 + 2);\nv14 = *((_DWORD *)v11 + 2);\nif ( v15 < *((_DWORD *)a1 + 3) )\nv3 = a1 == 0LL;\nelse\nv3 = sub_40C9FA(a1, (unsigned int)(v15 + 1)) == 0;\nif ( v3 )\nreturn 0LL;\n*((_DWORD *)a1 + 2) = v15;\nv19 = *v12;\nv17 = *a1;\nv16 = sub_40C4C7(*a1, *v12, *v11, v14);\nv18 = (unsigned __int64 *)(8LL * (int)v14 + v17);\nv20 = (unsigned __int64 *)(8LL * (int)v14 + v19);\nv5 = v14;\nif ( v16 )\n{\nwhile ( v5 < v15 )\n{\n++v5;\nv6 = v20++;\nv13 = *v6;\nv7 = v18++;\n*v7 = v13 + 1;\nif ( v13 <= *v7 )\n{\nv16 = 0LL;\nbreak;\n}\n}\nif ( v5 >= v15 && v16 )\n{\nv8 = v18++;\n*v8 = 1LL;\n++*((_DWORD *)a1 + 2);\n}\n}\nif ( v18 != v20 )\n{\nwhile ( v5 < v15 )\n{\nv9 = v20++;\nv10 = v18++;\n*v10 = *v9;\n++v5;\n}\n}\nreturn 1LL;\n}"}, {"addr": 4236838, "funname": "sub_40A626", "code": "__int64 __fastcall sub_40A626(__int64 a1, __int64 a2, __int64 a3)\n{\nbool v4; // al\nunsigned __int64 *v5; // rbx\nunsigned __int64 *v6; // r15\nunsigned __int64 *v7; // r12\nunsigned __int64 *v8; // rax\nunsigned __int64 v9; // r13\nunsigned __int64 *v10; // rax\nunsigned __int64 v11; // r14\n__int64 v12; // r13\n__int64 *v13; // rax\nunsigned __int64 *v14; // rax\nunsigned __int64 v15; // r13\nunsigned __int64 v16; // r14\nunsigned __int64 *v17; // rax\nint v18; // eax\nint v19; // eax\nint v20; // eax\nint v21; // eax\n_QWORD *v22; // rax\nint v24; // [rsp+28h] [rbp-48h]\nsigned int v25; // [rsp+2Ch] [rbp-44h]\n__int64 v26; // [rsp+30h] [rbp-40h]\n_BOOL4 v27; // [rsp+38h] [rbp-38h]\nint i; // [rsp+3Ch] [rbp-34h]\nint v29; // [rsp+3Ch] [rbp-34h]\nint v30; // [rsp+3Ch] [rbp-34h]\nint v31; // [rsp+3Ch] [rbp-34h]\n\nif ( *(_DWORD *)(a2 + 8) < *(_DWORD *)(a3 + 8) )\nreturn 0LL;\nv25 = *(_DWORD *)(a2 + 8);\nv24 = *(_DWORD *)(a3 + 8);\nif ( v25 <= *(_DWORD *)(a1 + 12) )\nv4 = a1 == 0;\nelse\nv4 = sub_40C9FA(a1, (unsigned int)v25) == 0;\nif ( v4 )\nreturn 0LL;\nv5 = *(unsigned __int64 **)a2;\nv6 = *(unsigned __int64 **)a3;\nv7 = *(unsigned __int64 **)a1;\nv27 = 0;\nfor ( i = 0; i < v24; ++i )\n{\nv8 = v5++;\nv9 = *v8;\nv10 = v6++;\nv11 = *v10;\nif ( v27 )\n{\nv27 = v9 <= v11;\nv12 = v9 - v11 - 1;\n}\nelse\n{\nv27 = v9 < v11;\nv12 = v9 - v11;\n}\nv13 = (__int64 *)v7++;\n*v13 = v12;\n}\nif ( v27 )\n{\ndo\n{\nif ( i >= v25 )\nbreak;\n++i;\nv14 = v5++;\nv15 = *v14;\nv16 = *v14 - 1;\nv17 = v7++;\n*v17 = v16;\n}\nwhile ( v15 <= v16 );\n}\nif ( v7 != v5 )\n{\nwhile ( 1 )\n{\nv18 = i;\nv29 = i + 1;\nif ( v25 <= v18 )\nbreak;\n*v7 = *v5;\nv19 = v29;\nv30 = v29 + 1;\nif ( v25 <= v19 )\nbreak;\nv7[1] = v5[1];\nv20 = v30;\nv31 = v30 + 1;\nif ( v25 <= v20 )\nbreak;\nv7[2] = v5[2];\nv21 = v31;\ni = v31 + 1;\nif ( v25 <= v21 )\nbreak;\nv7[3] = v5[3];\nv7 += 4;\nv5 += 4;\n}\n}\n*(_DWORD *)(a1 + 8) = v25;\nif ( *(int *)(a1 + 8) > 0 )\n{\nv26 = *(_QWORD *)a1 + 8LL * *(int *)(a1 + 8) - 8;\nwhile ( *(int *)(a1 + 8) > 0 )\n{\nv22 = (_QWORD *)v26;\nv26 -= 8LL;\nif ( *v22 )\nbreak;\n--*(_DWORD *)(a1 + 8);\n}\n}\nreturn 1LL;\n}"}, {"addr": 4237399, "funname": "sub_40A857", "code": "__int64 __fastcall sub_40A857(__int64 a1, __int64 a2, __int64 a3)\n{\n__int64 result; // rax\nsigned int v4; // eax\nbool v5; // al\n__int64 v6; // [rsp+8h] [rbp-38h]\n__int64 v7; // [rsp+10h] [rbp-30h]\nint v8; // [rsp+38h] [rbp-8h]\nint v9; // [rsp+3Ch] [rbp-4h]\n\nv7 = a2;\nv6 = a3;\nv9 = 0;\nv8 = 0;\nif ( *(_DWORD *)(a2 + 16) )\n{\nif ( *(_DWORD *)(a3 + 16) )\n{\nv7 = a3;\nv6 = a2;\n}\nelse\n{\nv9 = 1;\nv8 = 1;\n}\n}\nelse if ( *(_DWORD *)(a3 + 16) )\n{\nv9 = 1;\nv8 = 0;\n}\nif ( v9 )\n{\nif ( (unsigned int)sub_40A462((__int64 *)a1, (__int64 *)v7, (__int64 *)v6) )\n{\n*(_DWORD *)(a1 + 16) = v8;\nresult = 1LL;\n}\nelse\n{\nresult = 0LL;\n}\n}\nelse\n{\nv4 = *(_DWORD *)(v7 + 8);\nif ( *(_DWORD *)(v6 + 8) >= v4 )\nv4 = *(_DWORD *)(v6 + 8);\nif ( v4 <= *(_DWORD *)(a1 + 12) )\nv5 = a1 == 0;\nelse\nv5 = sub_40C9FA(a1, (unsigned int)v4) == 0;\nif ( v5 )\nreturn 0LL;\nif ( (int)sub_40D158(v7, v6) >= 0 )\n{\nif ( !(unsigned int)sub_40A626(a1, v7, v6) )\nreturn 0LL;\n*(_DWORD *)(a1 + 16) = 0;\n}\nelse\n{\nif ( !(unsigned int)sub_40A626(a1, v6, v7) )\nreturn 0LL;\n*(_DWORD *)(a1 + 16) = 1;\n}\nresult = 1LL;\n}\nreturn result;\n}"}, {"addr": 4237785, "funname": "sub_40A9D9", "code": "_DWORD *sub_40A9D9()\n{\n_DWORD *v1; // [rsp+8h] [rbp-8h]\n\nv1 = malloc(0x168uLL);\nif ( !v1 )\nreturn 0LL;\nsub_40AA1D(v1);\nv1[74] = 1;\nreturn v1;\n}"}, {"addr": 4237853, "funname": "sub_40AA1D", "code": "__int64 __fastcall sub_40AA1D(_DWORD *a1)\n{\n__int64 result; // rax\nint i; // [rsp+1Ch] [rbp-4h]\n\n*a1 = 0;\na1[74] = 0;\na1[75] = 0;\nresult = (__int64)a1;\na1[88] = 0;\nfor ( i = 0; i <= 11; ++i )\nresult = sub_40C974(&a1[6 * i + 2]);\nreturn result;\n}"}, {"addr": 4237978, "funname": "sub_40AA9A", "code": "void __fastcall sub_40AA9A(_DWORD *a1)\n{\nint i; // [rsp+1Ch] [rbp-4h]\n\nif ( a1 )\n{\nfor ( i = 0; i <= 11; ++i )\nsub_40C867(&a1[6 * i + 2]);\nif ( (a1[74] & 1) != 0 )\nfree(a1);\n}\n}"}, {"addr": 4238088, "funname": "sub_40AB08", "code": "_DWORD *__fastcall sub_40AB08(_DWORD *a1)\n{\n_DWORD *result; // rax\n\nif ( (int)a1[75] <= 11 )\na1[a1[75] + 76] = *a1;\nresult = a1;\n++a1[75];\nreturn result;\n}"}, {"addr": 4238167, "funname": "sub_40AB57", "code": "__int64 __fastcall sub_40AB57(int *a1)\n{\n__int64 result; // rax\nint v2; // eax\n\nif ( a1[75] <= 12 && *a1 <= 11 )\n{\nv2 = (*a1)++;\nresult = (__int64)&a1[6 * v2 + 2];\n}\nelse\n{\nif ( !a1[88] )\na1[88] = 1;\nresult = 0LL;\n}\nreturn result;\n}"}, {"addr": 4238280, "funname": "sub_40ABC8", "code": "unsigned __int64 __fastcall sub_40ABC8(_DWORD *a1)\n{\nunsigned __int64 result; // rax\n\nif ( a1 )\n{\nif ( !a1[75] )\nsub_40AB08(a1);\na1[88] = 0;\nresult = (unsigned int)--a1[75];\nif ( (int)result <= 11 )\n{\nresult = (unsigned __int64)a1;\n*a1 = a1[a1[75] + 76];\n}\n}\nreturn result;\n}"}, {"addr": 4238412, "funname": "sub_40AC4C", "code": "__int64 __fastcall sub_40AC4C(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n__int64 v9; // [rsp+30h] [rbp-10h]\nunsigned int v10; // [rsp+3Ch] [rbp-4h]\n\nv10 = 0;\nsub_40AB08(a5);\nv9 = sub_40AB57(a5);\nif ( v9 )\n{\nif ( a2 == a3 )\n{\nif ( !(unsigned int)sub_40D3CB(v9, a2, a5) )\ngoto LABEL_8;\n}\nelse if ( !(unsigned int)sub_40B1C5(v9, a2, a3, a5) )\n{\ngoto LABEL_8;\n}\nif ( (unsigned int)sub_40DEE2(a1, v9, a4, a5) )\nv10 = 1;\n}\nLABEL_8:\nsub_40ABC8(a5);\nreturn v10;\n}"}, {"addr": 4238610, "funname": "sub_40AD12", "code": "__int64 __fastcall sub_40AD12(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\nreturn (unsigned int)sub_40AD55(a1, a2, a3, a4, a5);\n}"}, {"addr": 4238677, "funname": "sub_40AD55", "code": "__int64 __fastcall sub_40AD55(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\nint v6; // eax\n_QWORD v10[96]; // [rsp+30h] [rbp-330h] BYREF\nint v11; // [rsp+330h] [rbp-30h]\nint v12; // [rsp+334h] [rbp-2Ch]\n__int64 v13; // [rsp+338h] [rbp-28h]\nint v14; // [rsp+340h] [rbp-20h]\nint v15; // [rsp+344h] [rbp-1Ch]\nint v16; // [rsp+348h] [rbp-18h]\nint v17; // [rsp+34Ch] [rbp-14h]\nint v18; // [rsp+350h] [rbp-10h]\nunsigned int v19; // [rsp+354h] [rbp-Ch]\nunsigned int v20; // [rsp+358h] [rbp-8h]\nint i; // [rsp+35Ch] [rbp-4h]\n\nv20 = 0;\nv16 = 0;\nv15 = 1;\nv14 = sub_40C804(a3);\nif ( !v14 )\n{\nsub_40CE13(a1, 1LL);\nreturn 1LL;\n}\nsub_40AB08(a5);\nv13 = sub_40AB57(a5);\nif ( v13 )\n{\nsub_40C974(v10);\nv16 = 1;\nif ( (unsigned int)sub_40DEE2(v10, a2, a4, a5) )\n{\nif ( v14 > 671 )\n{\nv6 = 6;\n}\nelse if ( v14 > 239 )\n{\nv6 = 5;\n}\nelse if ( v14 > 79 )\n{\nv6 = 4;\n}\nelse if ( v14 <= 23 )\n{\nv6 = 1;\n}\nelse\n{\nv6 = 3;\n}\nv12 = v6;\nif ( v6 <= 1 )\n{\nLABEL_21:\nv15 = 1;\nv17 = 0;\nv19 = v14 - 1;\nv18 = 0;\nif ( (unsigned int)sub_40CE13(a1, 1LL) )\n{\ndo\n{\nwhile ( !(unsigned int)sub_40D358(a3, v19) )\n{\nif ( !v15 && !(unsigned int)sub_40AC4C(a1, a1, a1, a4, a5) )\ngoto LABEL_41;\nif ( !v19 )\ngoto LABEL_40;\n--v19;\n}\nv11 = v19;\nv17 = 1;\nv18 = 0;\nfor ( i = 1; i < v12 && (int)(v19 - i) >= 0; ++i )\n{\nif ( (unsigned int)sub_40D358(a3, v19 - i) )\n{\nv17 <<= i - v18;\nv17 |= 1u;\nv18 = i;\n}\n}\nv11 = v18 + 1;\nif ( !v15 )\n{\nfor ( i = 0; i < v11; ++i )\n{\nif ( !(unsigned int)sub_40AC4C(a1, a1, a1, a4, a5) )\ngoto LABEL_41;\n}\n}\nif ( !(unsigned int)sub_40AC4C(a1, a1, (__int64)&v10[3 * (v17 >> 1)], a4, a5) )\ngoto LABEL_41;\nv19 -= v18 + 1;\nv17 = 0;\nv15 = 0;\n}\nwhile ( (v19 & 0x80000000) == 0 );\nLABEL_40:\nv20 = 1;\n}\ngoto LABEL_41;\n}\nif ( (unsigned int)sub_40AC4C(v13, (__int64)v10, (__int64)v10, a4, a5) )\n{\nv11 = 1 << (v12 - 1);\nfor ( i = 1; i < v11; ++i )\n{\nsub_40C974(&v10[3 * i]);\nif ( !(unsigned int)sub_40AC4C((__int64)&v10[3 * i], (__int64)&v10[3 * i - 3], v13, a4, a5) )\ngoto LABEL_41;\n}\nv16 = i;\ngoto LABEL_21;\n}\n}\n}\nLABEL_41:\nsub_40ABC8(a5);\nfor ( i = 0; i < v16; ++i )\nsub_40C867(&v10[3 * i]);\nreturn v20;\n}"}, {"addr": 4239813, "funname": "sub_40B1C5", "code": "__int64 __fastcall sub_40B1C5(__int64 a1, __int64 a2, __int64 a3, int *a4)\n{\nbool v5; // al\n_QWORD *v6; // rax\nunsigned int v9; // [rsp+2Ch] [rbp-24h]\nunsigned int v10; // [rsp+30h] [rbp-20h]\nunsigned int v11; // [rsp+34h] [rbp-1Ch]\n__int64 v12; // [rsp+38h] [rbp-18h]\nunsigned int v13; // [rsp+44h] [rbp-Ch]\n__int64 v14; // [rsp+48h] [rbp-8h]\n\nv13 = 0;\nv11 = *(_DWORD *)(a2 + 8);\nv10 = *(_DWORD *)(a3 + 8);\nif ( !v11 || !v10 )\n{\nsub_40CE13(a1, 0LL);\nreturn 1LL;\n}\nv9 = v11 + v10;\nsub_40AB08(a4);\nif ( a1 != a2 && a1 != a3 )\n{\nv14 = a1;\nLABEL_9:\n*(_DWORD *)(v14 + 16) = *(_DWORD *)(a3 + 16) ^ *(_DWORD *)(a2 + 16);\nif ( (signed int)v9 <= *(_DWORD *)(v14 + 12) )\nv5 = v14 == 0;\nelse\nv5 = sub_40C9FA(v14, v9) == 0;\nif ( !v5 )\n{\n*(_DWORD *)(v14 + 8) = v9;\nsub_40B381(*(_QWORD *)v14, *(_QWORD *)a2, v11, *(_QWORD *)a3, v10);\nif ( *(int *)(v14 + 8) > 0 )\n{\nv12 = *(_QWORD *)v14 + 8LL * *(int *)(v14 + 8) - 8;\nwhile ( *(int *)(v14 + 8) > 0 )\n{\nv6 = (_QWORD *)v12;\nv12 -= 8LL;\nif ( *v6 )\nbreak;\n--*(_DWORD *)(v14 + 8);\n}\n}\nif ( a1 != v14 )\nsub_40CC70(a1, v14);\nv13 = 1;\n}\ngoto LABEL_21;\n}\nv14 = sub_40AB57(a4);\nif ( v14 )\ngoto LABEL_9;\nLABEL_21:\nsub_40ABC8(a4);\nreturn v13;\n}"}, {"addr": 4240257, "funname": "sub_40B381", "code": "__int64 __fastcall sub_40B381(__int64 a1, _QWORD *a2, int a3, _QWORD *a4, int a5)\n{\n__int64 result; // rax\n_QWORD *v6; // [rsp+0h] [rbp-50h]\nint v7; // [rsp+8h] [rbp-48h]\nint v8; // [rsp+8h] [rbp-48h]\nint v9; // [rsp+8h] [rbp-48h]\nint v10; // [rsp+8h] [rbp-48h]\nunsigned int v11; // [rsp+Ch] [rbp-44h]\n_QWORD *v12; // [rsp+10h] [rbp-40h]\n__int64 v13; // [rsp+18h] [rbp-38h]\n__int64 *v14; // [rsp+38h] [rbp-18h]\n\nv13 = a1;\nv12 = a2;\nv11 = a3;\nv6 = a4;\nv7 = a5;\nif ( a3 < a5 )\n{\nv11 = a5;\nv7 = a3;\nv12 = a4;\nv6 = a2;\n}\nv14 = (__int64 *)(8LL * (int)v11 + a1);\nresult = sub_40BB0A(a1, v12, v11, *v6);\n*v14 = result;\nwhile ( 1 )\n{\nv8 = v7 - 1;\nif ( v8 <= 0 )\nbreak;\nresult = sub_40B510(v13 + 8, v12, v11, v6[1]);\nv14[1] = result;\nv9 = v8 - 1;\nif ( v9 <= 0 )\nbreak;\nresult = sub_40B510(v13 + 16, v12, v11, v6[2]);\nv14[2] = result;\nv10 = v9 - 1;\nif ( v10 <= 0 )\nbreak;\nresult = sub_40B510(v13 + 24, v12, v11, v6[3]);\nv14[3] = result;\nv7 = v10 - 1;\nif ( v7 <= 0 )\nbreak;\nresult = sub_40B510(v13 + 32, v12, v11, v6[4]);\nv14[4] = result;\nv14 += 4;\nv13 += 32LL;\nv6 += 4;\n}\nreturn result;\n}"}, {"addr": 4240656, "funname": "sub_40B510", "code": "unsigned __int64 __fastcall sub_40B510(unsigned __int64 *a1, _QWORD *a2, int a3, unsigned __int64 a4)\n{\nint v5; // [rsp+Ch] [rbp-F4h]\nint v6; // [rsp+Ch] [rbp-F4h]\nint v7; // [rsp+Ch] [rbp-F4h]\nint v8; // [rsp+Ch] [rbp-F4h]\nunsigned __int64 v11; // [rsp+30h] [rbp-D0h]\nunsigned __int64 v12; // [rsp+38h] [rbp-C8h]\n__int64 v13; // [rsp+40h] [rbp-C0h]\nunsigned __int64 v14; // [rsp+40h] [rbp-C0h]\nunsigned __int64 v15; // [rsp+50h] [rbp-B0h]\nunsigned __int64 v16; // [rsp+58h] [rbp-A8h]\n__int64 v17; // [rsp+60h] [rbp-A0h]\nunsigned __int64 v18; // [rsp+60h] [rbp-A0h]\nunsigned __int64 v19; // [rsp+70h] [rbp-90h]\nunsigned __int64 v20; // [rsp+78h] [rbp-88h]\n__int64 v21; // [rsp+80h] [rbp-80h]\nunsigned __int64 v22; // [rsp+80h] [rbp-80h]\nunsigned __int64 v23; // [rsp+90h] [rbp-70h]\nunsigned __int64 v24; // [rsp+98h] [rbp-68h]\n__int64 v25; // [rsp+A0h] [rbp-60h]\nunsigned __int64 v26; // [rsp+A0h] [rbp-60h]\nunsigned __int64 v27; // [rsp+A8h] [rbp-58h]\n__int64 v28; // [rsp+B8h] [rbp-48h]\nunsigned __int64 v29; // [rsp+B8h] [rbp-48h]\nunsigned __int64 v30; // [rsp+C0h] [rbp-40h]\nunsigned __int64 v31; // [rsp+C0h] [rbp-40h]\n__int64 v32; // [rsp+C8h] [rbp-38h]\nunsigned __int64 v33; // [rsp+C8h] [rbp-38h]\nunsigned __int64 v34; // [rsp+D0h] [rbp-30h]\nunsigned __int64 v35; // [rsp+D0h] [rbp-30h]\n__int64 v36; // [rsp+D8h] [rbp-28h]\nunsigned __int64 v37; // [rsp+D8h] [rbp-28h]\nunsigned __int64 v38; // [rsp+E0h] [rbp-20h]\nunsigned __int64 v39; // [rsp+E0h] [rbp-20h]\n__int64 v40; // [rsp+E8h] [rbp-18h]\nunsigned __int64 v41; // [rsp+E8h] [rbp-18h]\n__int64 v42; // [rsp+F0h] [rbp-10h]\nunsigned __int64 v43; // [rsp+F0h] [rbp-10h]\nunsigned __int64 v44; // [rsp+F8h] [rbp-8h]\nunsigned __int64 v45; // [rsp+F8h] [rbp-8h]\nunsigned __int64 v46; // [rsp+F8h] [rbp-8h]\nunsigned __int64 v47; // [rsp+F8h] [rbp-8h]\n\nv5 = a3;\nv44 = 0LL;\nif ( a3 <= 0 )\nreturn 0LL;\nv27 = HIDWORD(a4);\nwhile ( 1 )\n{\nv25 = (unsigned int)*a2;\nv42 = HIDWORD(*a2);\nv40 = v27 * v42;\nv23 = v42 * (unsigned int)a4 + v25 * v27;\nif ( v23 < v42 * (unsigned __int64)(unsigned int)a4 )\nv40 += 0x100000000LL;\nv41 = HIDWORD(v23) + v40;\nv24 = (v23 << 32) + (unsigned int)a4 * v25;\nif ( v24 < v23 << 32 )\n++v41;\nv43 = v41;\nif ( v44 + v24 < v44 )\nv43 = v41 + 1;\nv26 = *a1 + v44 + v24;\nif ( v26 < *a1 )\n++v43;\nv44 = v43;\n*a1 = v26;\nv6 = v5 - 1;\nif ( !v6 )\nbreak;\nv38 = a2[1];\nv21 = (unsigned int)v38;\nv38 >>= 32;\nv36 = v27 * v38;\nv19 = v38 * (unsigned int)a4 + v21 * v27;\nif ( v19 < v38 * (unsigned int)a4 )\nv36 += 0x100000000LL;\nv37 = HIDWORD(v19) + v36;\nv20 = (v19 << 32) + (unsigned int)a4 * v21;\nif ( v20 < v19 << 32 )\n++v37;\nv39 = v37;\nif ( v43 + v20 < v43 )\nv39 = v37 + 1;\nv45 = a1[1];\nv22 = v45 + v43 + v20;\nif ( v22 < v45 )\n++v39;\nv44 = v39;\na1[1] = v22;\nv7 = v6 - 1;\nif ( !v7 )\nbreak;\nv34 = a2[2];\nv17 = (unsigned int)v34;\nv34 >>= 32;\nv32 = v27 * v34;\nv15 = v34 * (unsigned int)a4 + v17 * v27;\nif ( v15 < v34 * (unsigned int)a4 )\nv32 += 0x100000000LL;\nv33 = HIDWORD(v15) + v32;\nv16 = (v15 << 32) + (unsigned int)a4 * v17;\nif ( v16 < v15 << 32 )\n++v33;\nv35 = v33;\nif ( v39 + v16 < v39 )\nv35 = v33 + 1;\nv46 = a1[2];\nv18 = v46 + v39 + v16;\nif ( v18 < v46 )\n++v35;\nv44 = v35;\na1[2] = v18;\nv8 = v7 - 1;\nif ( !v8 )\nbreak;\nv30 = a2[3];\nv13 = (unsigned int)v30;\nv30 >>= 32;\nv28 = v27 * v30;\nv11 = v30 * (unsigned int)a4 + v13 * v27;\nif ( v11 < v30 * (unsigned int)a4 )\nv28 += 0x100000000LL;\nv29 = HIDWORD(v11) + v28;\nv12 = (v11 << 32) + (unsigned int)a4 * v13;\nif ( v12 < v11 << 32 )\n++v29;\nv31 = v29;\nif ( v35 + v12 < v35 )\nv31 = v29 + 1;\nv47 = a1[3];\nv14 = v47 + v35 + v12;\nif ( v14 < v47 )\n++v31;\nv44 = v31;\na1[3] = v14;\nv5 = v8 - 1;\nif ( !v5 )\nbreak;\na2 += 4;\na1 += 4;\n}\nreturn v44;\n}"}, {"addr": 4242186, "funname": "sub_40BB0A", "code": "unsigned __int64 __fastcall sub_40BB0A(_QWORD *a1, _QWORD *a2, int a3, unsigned __int64 a4)\n{\nint v5; // [rsp+Ch] [rbp-F4h]\nint v6; // [rsp+Ch] [rbp-F4h]\nint v7; // [rsp+Ch] [rbp-F4h]\nint v8; // [rsp+Ch] [rbp-F4h]\nunsigned __int64 v11; // [rsp+30h] [rbp-D0h]\nunsigned __int64 v12; // [rsp+38h] [rbp-C8h]\n__int64 v13; // [rsp+40h] [rbp-C0h]\nunsigned __int64 v14; // [rsp+50h] [rbp-B0h]\nunsigned __int64 v15; // [rsp+58h] [rbp-A8h]\n__int64 v16; // [rsp+60h] [rbp-A0h]\nunsigned __int64 v17; // [rsp+70h] [rbp-90h]\nunsigned __int64 v18; // [rsp+78h] [rbp-88h]\n__int64 v19; // [rsp+80h] [rbp-80h]\nunsigned __int64 v20; // [rsp+90h] [rbp-70h]\nunsigned __int64 v21; // [rsp+98h] [rbp-68h]\n__int64 v22; // [rsp+A0h] [rbp-60h]\n__int64 v23; // [rsp+A0h] [rbp-60h]\nunsigned __int64 v24; // [rsp+A8h] [rbp-58h]\n__int64 v25; // [rsp+B8h] [rbp-48h]\nunsigned __int64 v26; // [rsp+B8h] [rbp-48h]\nunsigned __int64 v27; // [rsp+C0h] [rbp-40h]\nunsigned __int64 v28; // [rsp+C0h] [rbp-40h]\n__int64 v29; // [rsp+C8h] [rbp-38h]\nunsigned __int64 v30; // [rsp+C8h] [rbp-38h]\nunsigned __int64 v31; // [rsp+D0h] [rbp-30h]\nunsigned __int64 v32; // [rsp+D0h] [rbp-30h]\n__int64 v33; // [rsp+D8h] [rbp-28h]\nunsigned __int64 v34; // [rsp+D8h] [rbp-28h]\nunsigned __int64 v35; // [rsp+E0h] [rbp-20h]\nunsigned __int64 v36; // [rsp+E0h] [rbp-20h]\n__int64 v37; // [rsp+E8h] [rbp-18h]\nunsigned __int64 v38; // [rsp+E8h] [rbp-18h]\n__int64 v39; // [rsp+F0h] [rbp-10h]\nunsigned __int64 v40; // [rsp+F0h] [rbp-10h]\nunsigned __int64 v41; // [rsp+F8h] [rbp-8h]\n\nv5 = a3;\nv41 = 0LL;\nif ( a3 <= 0 )\nreturn 0LL;\nv24 = HIDWORD(a4);\nwhile ( 1 )\n{\nv22 = (unsigned int)*a2;\nv39 = HIDWORD(*a2);\nv37 = v24 * v39;\nv20 = v39 * (unsigned int)a4 + v22 * v24;\nif ( v20 < v39 * (unsigned __int64)(unsigned int)a4 )\nv37 += 0x100000000LL;\nv38 = HIDWORD(v20) + v37;\nv21 = (v20 << 32) + (unsigned int)a4 * v22;\nif ( v21 < v20 << 32 )\n++v38;\nv40 = v38;\nv23 = v41 + v21;\nif ( v41 + v21 < v41 )\nv40 = v38 + 1;\nv41 = v40;\n*a1 = v23;\nv6 = v5 - 1;\nif ( !v6 )\nbreak;\nv35 = a2[1];\nv19 = (unsigned int)v35;\nv35 >>= 32;\nv33 = v24 * v35;\nv17 = v35 * (unsigned int)a4 + v19 * v24;\nif ( v17 < v35 * (unsigned int)a4 )\nv33 += 0x100000000LL;\nv34 = HIDWORD(v17) + v33;\nv18 = (v17 << 32) + (unsigned int)a4 * v19;\nif ( v18 < v17 << 32 )\n++v34;\nv36 = v34;\nif ( v40 + v18 < v40 )\nv36 = v34 + 1;\nv41 = v36;\na1[1] = v40 + v18;\nv7 = v6 - 1;\nif ( !v7 )\nbreak;\nv31 = a2[2];\nv16 = (unsigned int)v31;\nv31 >>= 32;\nv29 = v24 * v31;\nv14 = v31 * (unsigned int)a4 + v16 * v24;\nif ( v14 < v31 * (unsigned int)a4 )\nv29 += 0x100000000LL;\nv30 = HIDWORD(v14) + v29;\nv15 = (v14 << 32) + (unsigned int)a4 * v16;\nif ( v15 < v14 << 32 )\n++v30;\nv32 = v30;\nif ( v36 + v15 < v36 )\nv32 = v30 + 1;\nv41 = v32;\na1[2] = v36 + v15;\nv8 = v7 - 1;\nif ( !v8 )\nbreak;\nv27 = a2[3];\nv13 = (unsigned int)v27;\nv27 >>= 32;\nv25 = v24 * v27;\nv11 = v27 * (unsigned int)a4 + v13 * v24;\nif ( v11 < v27 * (unsigned int)a4 )\nv25 += 0x100000000LL;\nv26 = HIDWORD(v11) + v25;\nv12 = (v11 << 32) + (unsigned int)a4 * v13;\nif ( v12 < v11 << 32 )\n++v26;\nv28 = v26;\nif ( v32 + v12 < v32 )\nv28 = v26 + 1;\nv41 = v28;\na1[3] = v32 + v12;\nv5 = v8 - 1;\nif ( !v5 )\nbreak;\na2 += 4;\na1 += 4;\n}\nreturn v41;\n}"}, {"addr": 4243553, "funname": "sub_40C061", "code": "unsigned __int64 __fastcall sub_40C061(unsigned __int64 *a1, _QWORD *a2, int a3)\n{\nunsigned __int64 result; // rax\nint v4; // [rsp+0h] [rbp-74h]\nint v5; // [rsp+0h] [rbp-74h]\nint v6; // [rsp+0h] [rbp-74h]\nint v7; // [rsp+0h] [rbp-74h]\nunsigned __int64 v10; // [rsp+14h] [rbp-60h]\n__int64 v11; // [rsp+1Ch] [rbp-58h]\nunsigned __int64 v12; // [rsp+1Ch] [rbp-58h]\nunsigned __int64 v13; // [rsp+24h] [rbp-50h]\n__int64 v14; // [rsp+2Ch] [rbp-48h]\nunsigned __int64 v15; // [rsp+2Ch] [rbp-48h]\nunsigned __int64 v16; // [rsp+34h] [rbp-40h]\n__int64 v17; // [rsp+3Ch] [rbp-38h]\nunsigned __int64 v18; // [rsp+3Ch] [rbp-38h]\nunsigned __int64 v19; // [rsp+44h] [rbp-30h]\n__int64 v20; // [rsp+4Ch] [rbp-28h]\nunsigned __int64 v21; // [rsp+4Ch] [rbp-28h]\nunsigned __int64 v22; // [rsp+54h] [rbp-20h]\nunsigned __int64 v23; // [rsp+54h] [rbp-20h]\nunsigned __int64 v24; // [rsp+5Ch] [rbp-18h]\nunsigned __int64 v25; // [rsp+5Ch] [rbp-18h]\nunsigned __int64 v26; // [rsp+64h] [rbp-10h]\nunsigned __int64 v27; // [rsp+64h] [rbp-10h]\n__int64 v28; // [rsp+6Ch] [rbp-8h]\nunsigned __int64 v29; // [rsp+6Ch] [rbp-8h]\n\nv4 = a3;\nif ( a3 > 0 )\n{\nwhile ( 1 )\n{\nv20 = (unsigned int)*a2;\nv28 = HIDWORD(*a2);\nv19 = v28 * v20;\nv29 = ((unsigned __int64)(v28 * v20) >> 31) + v28 * v28;\nv19 <<= 33;\nv21 = v19 + v20 * v20;\nif ( v21 < v19 )\n++v29;\n*a1 = v21;\nresult = v29;\na1[1] = v29;\nv5 = v4 - 1;\nif ( !v5 )\nbreak;\nv26 = a2[1];\nv17 = (unsigned int)v26;\nv26 >>= 32;\nv16 = v26 * v17;\nv27 = ((v26 * v17) >> 31) + v26 * v26;\nv16 <<= 33;\nv18 = v16 + v17 * v17;\nif ( v18 < v16 )\n++v27;\na1[2] = v18;\nresult = v27;\na1[3] = v27;\nv6 = v5 - 1;\nif ( !v6 )\nbreak;\nv24 = a2[2];\nv14 = (unsigned int)v24;\nv24 >>= 32;\nv13 = v24 * v14;\nv25 = ((v24 * v14) >> 31) + v24 * v24;\nv13 <<= 33;\nv15 = v13 + v14 * v14;\nif ( v15 < v13 )\n++v25;\na1[4] = v15;\nresult = v25;\na1[5] = v25;\nv7 = v6 - 1;\nif ( !v7 )\nbreak;\nv22 = a2[3];\nv11 = (unsigned int)v22;\nv22 >>= 32;\nv10 = v22 * v11;\nv23 = ((v22 * v11) >> 31) + v22 * v22;\nv10 <<= 33;\nv12 = v10 + v11 * v11;\nif ( v12 < v10 )\n++v23;\na1[6] = v12;\nresult = v23;\na1[7] = v23;\nv4 = v7 - 1;\nif ( !v4 )\nbreak;\na2 += 4;\na1 += 8;\n}\n}\nreturn result;\n}"}, {"addr": 4244191, "funname": "sub_40C2DF", "code": "__int64 __fastcall sub_40C2DF(unsigned __int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\nunsigned __int64 v4; // [rsp+8h] [rbp-58h]\n__int128 v5; // [rsp+10h] [rbp-50h]\nunsigned __int64 v6; // [rsp+20h] [rbp-40h]\nunsigned __int64 v7; // [rsp+30h] [rbp-30h]\nint v8; // [rsp+38h] [rbp-28h]\nint v9; // [rsp+3Ch] [rbp-24h]\nunsigned __int64 i; // [rsp+40h] [rbp-20h]\nunsigned __int64 v11; // [rsp+40h] [rbp-20h]\n__int64 v12; // [rsp+48h] [rbp-18h]\nunsigned __int64 v13; // [rsp+48h] [rbp-18h]\n__int64 v14; // [rsp+50h] [rbp-10h]\n__int64 v15; // [rsp+58h] [rbp-8h]\n\n*((_QWORD *)&v5 + 1) = a1;\n*(_QWORD *)&v5 = a2;\nv4 = a3;\nv14 = 0LL;\nv9 = 2;\nif ( !a3 )\nreturn -1LL;\nv8 = 64 - sub_40C6B5(a3);\nif ( a1 >= v4 )\n*((_QWORD *)&v5 + 1) = a1 - v4;\nif ( v8 )\n{\nv4 <<= v8;\n*((_QWORD *)&v5 + 1) = (*((_QWORD *)&v5 + 1) << v8) | (a2 >> (64 - (unsigned __int8)v8));\n*(_QWORD *)&v5 = a2 << v8;\n}\nv7 = HIDWORD(v4);\nwhile ( 1 )\n{\nif ( v7 == HIDWORD(*((_QWORD *)&v5 + 1)) )\nv15 = 0xFFFFFFFFLL;\nelse\nv15 = *((_QWORD *)&v5 + 1) / v7;\nv12 = v7 * v15;\nfor ( i = v15 * (unsigned int)v4;\n((*((_QWORD *)&v5 + 1) - v12) & 0xFFFFFFFF00000000LL) == 0\n&& i > (((*((_QWORD *)&v5 + 1) - v12) << 32) | DWORD1(v5));\ni -= (unsigned int)v4 )\n{\n--v15;\nv12 -= v7;\n}\nv6 = HIDWORD(i);\nv11 = i << 32;\nv13 = v6 + v12;\nif ( (unsigned __int64)v5 < v11 )\n++v13;\n*(_QWORD *)&v5 = v5 - v11;\nif ( *((_QWORD *)&v5 + 1) < v13 )\n{\n*((_QWORD *)&v5 + 1) += v4;\n--v15;\n}\n*((_QWORD *)&v5 + 1) -= v13;\nif ( !--v9 )\nbreak;\nv14 = v15 << 32;\nv5 *= 0x100000000LL;\n}\nreturn v15 | v14;\n}"}, {"addr": 4244679, "funname": "sub_40C4C7", "code": "unsigned __int64 __fastcall sub_40C4C7(unsigned __int64 *a1, _QWORD *a2, _QWORD *a3, int a4)\n{\nint v5; // [rsp+0h] [rbp-3Ch]\nint v6; // [rsp+0h] [rbp-3Ch]\nint v7; // [rsp+0h] [rbp-3Ch]\nint v8; // [rsp+0h] [rbp-3Ch]\nunsigned __int64 v12; // [rsp+24h] [rbp-18h]\nunsigned __int64 v13; // [rsp+24h] [rbp-18h]\nunsigned __int64 v14; // [rsp+24h] [rbp-18h]\nunsigned __int64 v15; // [rsp+24h] [rbp-18h]\nunsigned __int64 v16; // [rsp+2Ch] [rbp-10h]\nunsigned __int64 v17; // [rsp+2Ch] [rbp-10h]\nunsigned __int64 v18; // [rsp+2Ch] [rbp-10h]\nunsigned __int64 v19; // [rsp+2Ch] [rbp-10h]\nunsigned __int64 v20; // [rsp+34h] [rbp-8h]\n\nv5 = a4;\nif ( a4 <= 0 )\nreturn 0LL;\nv20 = 0LL;\nwhile ( 1 )\n{\nv16 = v20 + *a2;\nv12 = *a3 + v16;\nv20 = (v12 < v16) + (unsigned __int64)(v16 < v20);\n*a1 = v12;\nv6 = v5 - 1;\nif ( v6 <= 0 )\nbreak;\nv17 = v20 + a2[1];\nv13 = a3[1] + v17;\nv20 = (v13 < v17) + (unsigned __int64)(v17 < v20);\na1[1] = v13;\nv7 = v6 - 1;\nif ( v7 <= 0 )\nbreak;\nv18 = v20 + a2[2];\nv14 = a3[2] + v18;\nv20 = (v14 < v18) + (unsigned __int64)(v18 < v20);\na1[2] = v14;\nv8 = v7 - 1;\nif ( v8 <= 0 )\nbreak;\nv19 = v20 + a2[3];\nv15 = a3[3] + v19;\nv20 = (v15 < v19) + (unsigned __int64)(v19 < v20);\na1[3] = v15;\nv5 = v8 - 1;\nif ( v5 <= 0 )\nbreak;\na2 += 4;\na3 += 4;\na1 += 4;\n}\nreturn v20;\n}"}, {"addr": 4245173, "funname": "sub_40C6B5", "code": "__int64 __fastcall sub_40C6B5(unsigned __int64 a1)\n{\n__int64 result; // rax\n\nif ( (a1 & 0xFFFFFFFF00000000LL) != 0 )\n{\nif ( (a1 & 0xFFFF000000000000LL) != 0 )\n{\nif ( (a1 & 0xFF00000000000000LL) != 0 )\nresult = (unsigned int)(byte_410320[HIBYTE(a1)] + 56);\nelse\nresult = (unsigned int)(byte_410320[HIWORD(a1)] + 48);\n}\nelse if ( (a1 & 0xFF0000000000LL) != 0 )\n{\nresult = (unsigned int)(byte_410320[a1 >> 40] + 40);\n}\nelse\n{\nresult = (unsigned int)(byte_410320[SHIDWORD(a1)] + 32);\n}\n}\nelse if ( (a1 & 0xFFFF0000) != 0 )\n{\nif ( (a1 & 0xFF000000) != 0 )\nresult = (unsigned int)(byte_410320[(int)(a1 >> 24)] + 24);\nelse\nresult = (unsigned int)(byte_410320[(int)(a1 >> 16)] + 16);\n}\nelse if ( (a1 & 0xFF00) != 0 )\n{\nresult = (unsigned int)(byte_410320[(int)(a1 >> 8)] + 8);\n}\nelse\n{\nresult = (unsigned int)byte_410320[(int)a1];\n}\nreturn result;\n}"}, {"addr": 4245508, "funname": "sub_40C804", "code": "__int64 __fastcall sub_40C804(__int64 a1)\n{\nint v2; // [rsp+Ch] [rbp-Ch]\n\nif ( !*(_DWORD *)(a1 + 8) )\nreturn 0LL;\nv2 = (*(_DWORD *)(a1 + 8) - 1) << 6;\nreturn v2 + (unsigned int)sub_40C6B5(*(_QWORD *)(*(_QWORD *)a1 + 8LL * *(int *)(a1 + 8) - 8));\n}"}, {"addr": 4245607, "funname": "sub_40C867", "code": "void __fastcall sub_40C867(__int64 a1)\n{\nint v1; // [rsp+1Ch] [rbp-4h]\n\nif ( a1 )\n{\nif ( *(_QWORD *)a1 )\n{\nmemset(*(void **)a1, 0, 8LL * *(int *)(a1 + 12));\nif ( (*(_DWORD *)(a1 + 20) & 2) == 0 )\nfree(*(void **)a1);\n}\nv1 = *(_DWORD *)(a1 + 20) & 1;\nmemset((void *)a1, 0, 0x18uLL);\nif ( v1 )\nfree((void *)a1);\n}\n}"}, {"addr": 4245766, "funname": "sub_40C906", "code": "void __fastcall sub_40C906(__int64 a1)\n{\nint v1; // eax\n\nif ( a1 )\n{\nif ( *(_QWORD *)a1 && (*(_DWORD *)(a1 + 20) & 2) == 0 )\nfree(*(void **)a1);\nv1 = *(_DWORD *)(a1 + 20);\nBYTE1(v1) |= 0x80u;\n*(_DWORD *)(a1 + 20) = v1;\nif ( (*(_DWORD *)(a1 + 20) & 1) != 0 )\nfree((void *)a1);\n}\n}"}, {"addr": 4245876, "funname": "sub_40C974", "code": "void *__fastcall sub_40C974(void *a1)\n{\nreturn memset(a1, 0, 0x18uLL);\n}"}, {"addr": 4245913, "funname": "sub_40C999", "code": "_DWORD *sub_40C999()\n{\n_DWORD *v1; // [rsp+8h] [rbp-8h]\n\nv1 = malloc(0x18uLL);\nif ( !v1 )\nreturn 0LL;\nv1[5] = 1;\nv1[2] = 0;\nv1[4] = 0;\nv1[3] = 0;\n*(_QWORD *)v1 = 0LL;\nreturn v1;\n}"}, {"addr": 4246010, "funname": "sub_40C9FA", "code": "__int64 __fastcall sub_40C9FA(__int64 a1, int a2)\n{\nint v3; // eax\n__int64 v4; // [rsp+10h] [rbp-40h]\n__int64 v5; // [rsp+18h] [rbp-38h]\n__int64 v6; // [rsp+20h] [rbp-30h]\n_QWORD *v7; // [rsp+30h] [rbp-20h]\nint i; // [rsp+3Ch] [rbp-14h]\nint j; // [rsp+3Ch] [rbp-14h]\nint k; // [rsp+3Ch] [rbp-14h]\n_QWORD *v11; // [rsp+40h] [rbp-10h]\n_QWORD *v12; // [rsp+48h] [rbp-8h]\n_QWORD *v13; // [rsp+48h] [rbp-8h]\n\nif ( a2 <= *(_DWORD *)(a1 + 12) )\nreturn a1;\nif ( (*(_DWORD *)(a1 + 20) & 2) != 0 )\nreturn 0LL;\nv12 = malloc(8LL * (a2 + 1));\nv7 = v12;\nif ( !v12 )\nreturn 0LL;\nv11 = *(_QWORD **)a1;\nif ( *(_QWORD *)a1 )\n{\nfor ( i = *(int *)(a1 + 8) >> 2; i > 0; --i )\n{\nv6 = v11[1];\nv5 = v11[2];\nv4 = v11[3];\n*v12 = *v11;\nv12[1] = v6;\nv12[2] = v5;\nv12[3] = v4;\nv12 += 4;\nv11 += 4;\n}\nv3 = *(_DWORD *)(a1 + 8) & 3;\nswitch ( v3 )\n{\ncase 3:\nv12[2] = v11[2];\nbreak;\ncase 1:\nLABEL_16:\n*v12 = *v11;\nLABEL_17:\nfree(*(void **)a1);\ngoto LABEL_18;\ncase 2:\nbreak;\ndefault:\ngoto LABEL_17;\n}\nv12[1] = v11[1];\ngoto LABEL_16;\n}\nLABEL_18:\n*(_QWORD *)a1 = v7;\n*(_DWORD *)(a1 + 12) = a2;\nv13 = (_QWORD *)(*(_QWORD *)a1 + 8LL * *(int *)(a1 + 8));\nfor ( j = (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) >> 3; j > 0; --j )\n{\n*v13 = 0LL;\nv13[1] = 0LL;\nv13[2] = 0LL;\nv13[3] = 0LL;\nv13[4] = 0LL;\nv13[5] = 0LL;\nv13[6] = 0LL;\nv13[7] = 0LL;\nv13 += 8;\n}\nfor ( k = ((unsigned __int8)*(_DWORD *)(a1 + 12) - (unsigned __int8)*(_DWORD *)(a1 + 8)) & 7; k > 0; --k )\n*v13++ = 0LL;\nreturn a1;\n}"}, {"addr": 4246640, "funname": "sub_40CC70", "code": "__int64 __fastcall sub_40CC70(__int64 a1, __int64 a2)\n{\nbool v3; // al\nint v4; // eax\n__int64 v5; // [rsp+18h] [rbp-38h]\n__int64 v6; // [rsp+20h] [rbp-30h]\n__int64 v7; // [rsp+28h] [rbp-28h]\n_QWORD *v8; // [rsp+38h] [rbp-18h]\n_QWORD *v9; // [rsp+40h] [rbp-10h]\nint i; // [rsp+4Ch] [rbp-4h]\n\nif ( a1 == a2 )\nreturn a1;\nif ( *(_DWORD *)(a2 + 8) <= *(_DWORD *)(a1 + 12) )\nv3 = a1 == 0;\nelse\nv3 = sub_40C9FA(a1, *(_DWORD *)(a2 + 8)) == 0;\nif ( v3 )\nreturn 0LL;\nv9 = *(_QWORD **)a1;\nv8 = *(_QWORD **)a2;\nfor ( i = *(int *)(a2 + 8) >> 2; i > 0; --i )\n{\nv7 = v8[1];\nv6 = v8[2];\nv5 = v8[3];\n*v9 = *v8;\nv9[1] = v7;\nv9[2] = v6;\nv9[3] = v5;\nv9 += 4;\nv8 += 4;\n}\nv4 = *(_DWORD *)(a2 + 8) & 3;\nif ( v4 == 3 )\n{\nv9[2] = v8[2];\nLABEL_16:\nv9[1] = v8[1];\ngoto LABEL_17;\n}\nif ( v4 != 1 )\n{\nif ( v4 != 2 )\ngoto LABEL_18;\ngoto LABEL_16;\n}\nLABEL_17:\n*v9 = *v8;\nLABEL_18:\n*(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);\nif ( !*(_DWORD *)(a1 + 8) )\n{\nif ( *(_QWORD *)a1 )\n**(_QWORD **)a1 = 0LL;\n}\n*(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);\nreturn a1;\n}"}, {"addr": 4247059, "funname": "sub_40CE13", "code": "__int64 __fastcall sub_40CE13(__int64 a1, __int64 a2)\n{\nbool v2; // al\n\nif ( *(_DWORD *)(a1 + 12) )\nv2 = a1 == 0;\nelse\nv2 = sub_40C9FA(a1, 2) == 0;\nif ( v2 )\nreturn 0LL;\n*(_DWORD *)(a1 + 16) = 0;\n*(_DWORD *)(a1 + 8) = 0;\n**(_QWORD **)a1 = a2;\nif ( **(_QWORD **)a1 )\n*(_DWORD *)(a1 + 8) = 1;\nreturn 1LL;\n}"}, {"addr": 4247306, "funname": "sub_40CF0A", "code": "_DWORD *__fastcall sub_40CF0A(unsigned __int8 *a1, int a2, _DWORD *a3)\n{\n_DWORD *result; // rax\nint v4; // eax\nbool v5; // al\nunsigned __int8 *v6; // rax\n_QWORD *v8; // rax\n_DWORD *v9; // [rsp+8h] [rbp-38h]\n__int64 v11; // [rsp+20h] [rbp-20h]\n__int64 v12; // [rsp+28h] [rbp-18h]\nint v13; // [rsp+34h] [rbp-Ch]\nint v14; // [rsp+38h] [rbp-8h]\nunsigned int v15; // [rsp+3Ch] [rbp-4h]\n\nv9 = a3;\nif ( !a3 )\nv9 = sub_40C999();\nif ( !v9 )\nreturn 0LL;\nv12 = 0LL;\nv13 = a2;\nif ( a2 )\n{\nif ( (8 * (a2 + 10) - 1) / 64 <= v9[3] )\n{\nv5 = v9 == 0LL;\n}\nelse\n{\nv4 = a2 + 2;\nif ( a2 + 2 < 0 )\nv4 = a2 + 9;\nv5 = sub_40C9FA((__int64)v9, (v4 >> 3) + 1) == 0;\n}\nif ( v5 )\n{\nresult = 0LL;\n}\nelse\n{\nv15 = ((unsigned int)(a2 - 1) >> 3) + 1;\nv14 = ((_BYTE)a2 - 1) & 7;\nv9[2] = v15;\nwhile ( v13-- )\n{\nv6 = a1++;\nv12 = (v12 << 8) | *v6;\nLODWORD(v6) = v14--;\nif ( !(_DWORD)v6 )\n{\n*(_QWORD *)(8LL * --v15 + *(_QWORD *)v9) = v12;\nv12 = 0LL;\nv14 = 7;\n}\n}\nif ( (int)v9[2] > 0 )\n{\nv11 = *(_QWORD *)v9 + 8LL * (int)v9[2] - 8;\nwhile ( (int)v9[2] > 0 )\n{\nv8 = (_QWORD *)v11;\nv11 -= 8LL;\nif ( *v8 )\nbreak;\n--v9[2];\n}\n}\nresult = v9;\n}\n}\nelse\n{\nv9[2] = 0;\nresult = v9;\n}\nreturn result;\n}"}, {"addr": 4247743, "funname": "sub_40D0BF", "code": "__int64 __fastcall sub_40D0BF(_QWORD *a1, _BYTE *a2)\n{\nint v2; // kr04_4\n_BYTE *v3; // rax\nint v4; // eax\nint i; // [rsp+1Ch] [rbp-4h]\n\nv2 = sub_40C804((__int64)a1) + 7;\nfor ( i = v2 / 8; ; *v3 = *(_QWORD *)(*a1 + 8LL * (i / 8)) >> (8 * (unsigned __int8)(i % 8)) )\n{\nv4 = i--;\nif ( v4 <= 0 )\nbreak;\nv3 = a2++;\n}\nreturn (unsigned int)(v2 / 8);\n}"}, {"addr": 4247896, "funname": "sub_40D158", "code": "__int64 __fastcall sub_40D158(__int64 a1, __int64 a2)\n{\n__int64 result; // rax\nunsigned __int64 v3; // [rsp+18h] [rbp-28h]\nunsigned __int64 v4; // [rsp+20h] [rbp-20h]\nunsigned int v5; // [rsp+3Ch] [rbp-4h]\nint i; // [rsp+3Ch] [rbp-4h]\n\nv5 = *(_DWORD *)(a1 + 8) - *(_DWORD *)(a2 + 8);\nif ( v5 )\nreturn v5;\nfor ( i = *(_DWORD *)(a1 + 8) - 1; ; --i )\n{\nif ( i < 0 )\nreturn 0LL;\nv4 = *(_QWORD *)(8LL * i + *(_QWORD *)a1);\nv3 = *(_QWORD *)(8LL * i + *(_QWORD *)a2);\nif ( v4 != v3 )\nbreak;\n}\nif ( v4 <= v3 )\nresult = 0xFFFFFFFFLL;\nelse\nresult = 1LL;\nreturn result;\n}"}, {"addr": 4248085, "funname": "sub_40D215", "code": "__int64 __fastcall sub_40D215(__int64 a1, __int64 a2)\n{\n__int64 result; // rax\nunsigned __int64 v3; // [rsp+10h] [rbp-20h]\nunsigned __int64 v4; // [rsp+18h] [rbp-18h]\nunsigned int v5; // [rsp+24h] [rbp-Ch]\nunsigned int v6; // [rsp+28h] [rbp-8h]\nint i; // [rsp+2Ch] [rbp-4h]\n\nif ( a1 && a2 )\n{\nif ( *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16) )\n{\nif ( *(_DWORD *)(a1 + 16) )\n{\nv6 = -1;\nv5 = 1;\n}\nelse\n{\nv6 = 1;\nv5 = -1;\n}\nif ( *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a2 + 8) )\n{\nif ( *(_DWORD *)(a1 + 8) >= *(_DWORD *)(a2 + 8) )\n{\nfor ( i = *(_DWORD *)(a1 + 8) - 1; i >= 0; --i )\n{\nv4 = *(_QWORD *)(*(_QWORD *)a1 + 8LL * i);\nv3 = *(_QWORD *)(*(_QWORD *)a2 + 8LL * i);\nif ( v4 > v3 )\nreturn v6;\nif ( v4 < v3 )\nreturn v5;\n}\nresult = 0LL;\n}\nelse\n{\nresult = v5;\n}\n}\nelse\n{\nresult = v6;\n}\n}\nelse if ( *(_DWORD *)(a1 + 16) )\n{\nresult = 0xFFFFFFFFLL;\n}\nelse\n{\nresult = 1LL;\n}\n}\nelse if ( a1 )\n{\nresult = 0xFFFFFFFFLL;\n}\nelse\n{\nresult = a2 != 0;\n}\nreturn result;\n}"}, {"addr": 4248408, "funname": "sub_40D358", "code": "__int64 __fastcall sub_40D358(__int64 a1, int a2)\n{\nif ( a2 < 0 )\nreturn 0LL;\nif ( a2 / 64 < *(_DWORD *)(a1 + 8) )\nreturn (*(_QWORD *)(*(_QWORD *)a1 + 8LL * (a2 / 64)) >> (a2 % 64)) & 1LL;\nreturn 0LL;\n}"}, {"addr": 4248523, "funname": "sub_40D3CB", "code": "__int64 __fastcall sub_40D3CB(__int64 a1, _QWORD *a2, int *a3)\n{\n_QWORD *v4; // rax\nbool v6; // al\nchar v8[132]; // [rsp+20h] [rbp-A0h] BYREF\nint v9; // [rsp+A4h] [rbp-1Ch]\n__int64 v10; // [rsp+A8h] [rbp-18h]\n_QWORD *v11; // [rsp+B0h] [rbp-10h]\nunsigned int v12; // [rsp+B8h] [rbp-8h]\nunsigned int v13; // [rsp+BCh] [rbp-4h]\n\nv13 = 0;\nv12 = *((_DWORD *)a2 + 2);\nif ( (int)v12 <= 0 )\n{\n*(_DWORD *)(a1 + 8) = 0;\nreturn 1LL;\n}\nsub_40AB08(a3);\nif ( a2 == (_QWORD *)a1 )\nv4 = (_QWORD *)sub_40AB57(a3);\nelse\nv4 = (_QWORD *)a1;\nv11 = v4;\nv10 = sub_40AB57(a3);\nif ( v10 )\n{\nv9 = 2 * v12;\nif ( !((signed int)(2 * v12) < *((_DWORD *)v11 + 3) ? v11 == 0LL : sub_40C9FA((__int64)v11, v9 + 1) == 0) )\n{\n*(_DWORD *)(a1 + 16) = 0;\nif ( v12 == 4 )\n{\nsub_40D606(*v11, *a2, 4LL, v8);\ngoto LABEL_20;\n}\nif ( v12 == 8 )\n{\nsub_40D606(*v11, *a2, 8LL, v8);\ngoto LABEL_20;\n}\nif ( v9 <= *(_DWORD *)(v10 + 12) )\nv6 = v10 == 0;\nelse\nv6 = sub_40C9FA(v10, v9) == 0;\nif ( !v6 )\n{\nsub_40D606(*v11, *a2, v12, *(_QWORD *)v10);\nLABEL_20:\n*((_DWORD *)v11 + 2) = v9;\nif ( v9 > 0 && !*(_QWORD *)(*v11 + 8LL * v9 - 8) )\n--*((_DWORD *)v11 + 2);\nif ( v11 != (_QWORD *)a1 )\nsub_40CC70(a1, (__int64)v11);\nv13 = 1;\ngoto LABEL_26;\n}\n}\n}\nLABEL_26:\nsub_40ABC8(a3);\nreturn v13;\n}"}, {"addr": 4249094, "funname": "sub_40D606", "code": "unsigned __int64 __fastcall sub_40D606(unsigned __int64 *a1, unsigned __int64 *a2, int a3, unsigned __int64 *a4)\n{\nunsigned __int64 *v4; // rax\nint v8; // [rsp+24h] [rbp-2Ch]\nunsigned __int64 *v9; // [rsp+28h] [rbp-28h]\nunsigned __int64 *v10; // [rsp+30h] [rbp-20h]\nint v11; // [rsp+38h] [rbp-18h]\nint i; // [rsp+3Ch] [rbp-14h]\n\nv8 = 2 * a3;\nv10 = a2;\nv4 = &a1[2 * a3 - 1];\n*v4 = 0LL;\n*a1 = *v4;\nv9 = a1 + 1;\nv11 = a3 - 1;\nif ( a3 - 1 > 0 )\n{\nv10 = a2 + 1;\nv9[v11] = sub_40BB0A(v9, a2 + 1, v11, *a2);\nv9 = a1 + 3;\n}\nfor ( i = a3 - 2; i > 0; --i )\n{\n--v11;\n++v10;\nv9[v11] = sub_40B510(v9, v10, v11, *(v10 - 1));\nv9 += 2;\n}\nsub_40C4C7(a1, a1, a1, v8);\nsub_40C061(a4, a2, a3);\nreturn sub_40C4C7(a1, a1, a4, v8);\n}"}, {"addr": 4249428, "funname": "sub_40D754", "code": "__int64 __fastcall sub_40D754(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n__int64 v6; // rax\n_QWORD *v9; // rax\n__int64 v13; // [rsp+30h] [rbp-E0h] BYREF\nint v14; // [rsp+38h] [rbp-D8h]\nint v15; // [rsp+3Ch] [rbp-D4h]\nint v16; // [rsp+40h] [rbp-D0h]\nunsigned __int64 v17; // [rsp+50h] [rbp-C0h]\nunsigned __int64 v18; // [rsp+58h] [rbp-B8h]\nunsigned __int64 v19; // [rsp+60h] [rbp-B0h]\nunsigned __int64 v20; // [rsp+68h] [rbp-A8h]\nunsigned __int64 v21; // [rsp+70h] [rbp-A0h]\n__int64 v22; // [rsp+78h] [rbp-98h]\nunsigned __int64 v23; // [rsp+80h] [rbp-90h]\nunsigned __int64 v24; // [rsp+88h] [rbp-88h]\nunsigned __int64 v25; // [rsp+90h] [rbp-80h]\nunsigned __int64 v26; // [rsp+98h] [rbp-78h]\nint v27; // [rsp+A0h] [rbp-70h]\nint v28; // [rsp+A4h] [rbp-6Ch]\nint v29; // [rsp+A8h] [rbp-68h]\nunsigned int v30; // [rsp+ACh] [rbp-64h]\n__int64 v31; // [rsp+B0h] [rbp-60h]\n__int64 v32; // [rsp+B8h] [rbp-58h]\n__int64 v33; // [rsp+C0h] [rbp-50h]\nunsigned __int64 v34; // [rsp+C8h] [rbp-48h]\nunsigned __int64 v35; // [rsp+D0h] [rbp-40h]\nunsigned __int64 v36; // [rsp+D8h] [rbp-38h]\nunsigned __int64 v37; // [rsp+E0h] [rbp-30h]\nunsigned __int64 v38; // [rsp+E8h] [rbp-28h]\nunsigned __int64 *v39; // [rsp+F0h] [rbp-20h]\n_QWORD *v40; // [rsp+F8h] [rbp-18h]\n__int64 v41; // [rsp+100h] [rbp-10h]\nint j; // [rsp+108h] [rbp-8h]\nint i; // [rsp+10Ch] [rbp-4h]\n\nif ( !*(_DWORD *)(a4 + 8) || *(_DWORD *)(a4 + 8) == 1 && !**(_QWORD **)a4 )\nreturn 0LL;\nif ( (int)sub_40D158(a3, a4) < 0 )\n{\nif ( a2 && !sub_40CC70(a2, a3) )\nreturn 0LL;\nif ( a1 )\nsub_40CE13(a1, 0LL);\nreturn 1LL;\n}\nsub_40AB08(a5);\nv33 = sub_40AB57(a5);\n*(_DWORD *)(v33 + 16) = 0;\nv32 = sub_40AB57(a5);\nv31 = sub_40AB57(a5);\nif ( a1 )\nv41 = a1;\nelse\nv41 = sub_40AB57(a5);\nif ( !v41 )\ngoto LABEL_57;\nv30 = 64 - (int)sub_40C804(a4) % 64;\nsub_40DF1C(v31, a4, v30);\n*(_DWORD *)(v31 + 16) = 0;\nv30 += 64;\nsub_40DF1C(v32, a3, v30);\n*(_DWORD *)(v32 + 16) = 0;\nv29 = *(_DWORD *)(v31 + 8);\nv28 = *(_DWORD *)(v32 + 8);\nv27 = v28 - v29;\nsub_40C974(&v13);\nv13 = *(_QWORD *)v32 + 8LL * v27;\nv14 = v29;\nv15 = *(_DWORD *)(v32 + 12) + 1;\nv26 = *(_QWORD *)(*(_QWORD *)v31 + 8LL * v29 - 8);\nv6 = v29 == 1 ? 0LL : *(_QWORD *)(*(_QWORD *)v31 + 8LL * v29 - 16);\nv25 = v6;\nv39 = (unsigned __int64 *)(*(_QWORD *)v32 + 8LL * v28 - 8);\n*(_DWORD *)(v41 + 16) = *(_DWORD *)(a4 + 16) ^ *(_DWORD *)(a3 + 16);\nif ( v27 >= *(_DWORD *)(v41 + 12) ? sub_40C9FA(v41, v27 + 1) == 0 : v41 == 0 )\ngoto LABEL_57;\n*(_DWORD *)(v41 + 8) = v27;\nv40 = (_QWORD *)(*(_QWORD *)v41 + 8LL * v27 - 8);\nif ( v29 >= *(_DWORD *)(v33 + 12) ? sub_40C9FA(v33, v29 + 1) == 0 : v33 == 0 )\ngoto LABEL_57;\nif ( (int)sub_40D158((__int64)&v13, v31) >= 0 )\n{\nif ( (unsigned int)sub_40A626((__int64)&v13, (__int64)&v13, v31) )\n{\n*v40 = 1LL;\n*(_QWORD *)(*(_QWORD *)v41 + 8LL * *(int *)(v41 + 8) - 8) = 1LL;\ngoto LABEL_31;\n}\nLABEL_57:\nsub_40ABC8(a5);\nreturn 0LL;\n}\n--*(_DWORD *)(v41 + 8);\nLABEL_31:\n--v40;\nfor ( i = 0; i < v27 - 1; ++i )\n{\nv37 = 0LL;\nv24 = *v39;\nv23 = *(v39 - 1);\nif ( v24 == v26 )\n{\nv38 = -1LL;\n}\nelse\n{\nv38 = sub_40C2DF(v24, v23, v26);\nv37 = v23 - v26 * v38;\nv36 = (unsigned int)v25;\nv35 = HIDWORD(v25);\nv22 = (unsigned int)v38;\nv21 = HIDWORD(v38);\nv19 = (unsigned int)v25 * HIDWORD(v38);\nv20 = (unsigned int)v38 * (unsigned __int64)(unsigned int)v25;\nv18 = HIDWORD(v25) * (unsigned int)v38;\nv34 = HIDWORD(v38) * HIDWORD(v25);\nv19 += v18;\nif ( v19 < v18 )\nv34 += 0x100000000LL;\nv34 += HIDWORD(v19);\nv18 = v19 << 32;\nv20 += v19 << 32;\nif ( v20 < v19 << 32 )\n++v34;\nv36 = v20;\nv35 = v34;\nwhile ( v35 >= v37 && (v35 != v37 || v36 > *(v39 - 2)) )\n{\n--v38;\nv37 += v26;\nif ( v37 < v26 )\nbreak;\nif ( v36 < v25 )\n--v35;\nv36 -= v25;\n}\n}\nv17 = sub_40BB0A(*(_QWORD **)v33, *(_QWORD **)v31, v29, v38);\nv13 -= 8LL;\n++v14;\n*(_QWORD *)(8LL * v29 + *(_QWORD *)v33) = v17;\nfor ( j = v29 + 1; j > 0 && !*(_QWORD *)(*(_QWORD *)v33 + 8LL * j - 8); --j )\n;\n*(_DWORD *)(v33 + 8) = j;\nj = v14;\nsub_40A857((__int64)&v13, (__int64)&v13, v33);\n*(_DWORD *)(v32 + 8) = *(_DWORD *)(v32 + 8) + v14 - j;\nif ( v16 )\n{\n--v38;\nj = v14;\nsub_40A34C((__int64)&v13, (__int64)&v13, v31);\n*(_DWORD *)(v32 + 8) += v14 - j;\n}\nv9 = v40--;\n*v9 = v38;\n--v39;\n}\nif ( a2 )\n{\nsub_40E1BA(a2, v32, v30);\n*(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);\n}\nsub_40ABC8(a5);\nreturn 1LL;\n}"}, {"addr": 4251362, "funname": "sub_40DEE2", "code": "__int64 __fastcall sub_40DEE2(__int64 a1, __int64 a2, __int64 a3, int *a4)\n{\nreturn sub_40D754(0LL, a1, a2, a3, a4);\n}"}, {"addr": 4251420, "funname": "sub_40DF1C", "code": "__int64 __fastcall sub_40DF1C(__int64 a1, __int64 *a2, int a3)\n{\nint v3; // eax\nint v4; // edx\nbool v5; // al\n_QWORD *v7; // rax\nint v8; // [rsp+Ch] [rbp-54h]\nunsigned __int64 v9; // [rsp+28h] [rbp-38h]\n_QWORD *s; // [rsp+30h] [rbp-30h]\n__int64 v11; // [rsp+38h] [rbp-28h]\nint v12; // [rsp+4Ch] [rbp-14h]\n__int64 v13; // [rsp+50h] [rbp-10h]\nint j; // [rsp+5Ch] [rbp-4h]\nint i; // [rsp+5Ch] [rbp-4h]\n\nv8 = a3;\n*(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);\nv3 = a3;\nv4 = a3 + 63;\nif ( v8 < 0 )\nv3 = v4;\nif ( *((_DWORD *)a2 + 2) + (v3 >> 6) < *(_DWORD *)(a1 + 12) )\nv5 = a1 == 0;\nelse\nv5 = sub_40C9FA(a1, *((_DWORD *)a2 + 2) + v8 / 64 + 1) == 0;\nif ( v5 )\nreturn 0LL;\nv12 = v8 / 64;\nv11 = *a2;\ns = *(_QWORD **)a1;\n*(_QWORD *)(8LL * (*((_DWORD *)a2 + 2) + v8 / 64) + *(_QWORD *)a1) = 0LL;\nif ( v8 % 64 )\n{\nfor ( i = *((_DWORD *)a2 + 2) - 1; i >= 0; --i )\n{\nv9 = *(_QWORD *)(8LL * i + v11);\ns[v12 + 1 + i] |= v9 >> (64 - (unsigned __int8)(v8 % 64));\ns[v12 + i] = v9 << (v8 % 64);\n}\n}\nelse\n{\nfor ( j = *((_DWORD *)a2 + 2) - 1; j >= 0; --j )\ns[v12 + j] = *(_QWORD *)(8LL * j + v11);\n}\nmemset(s, 0, 8LL * v12);\n*(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2) + v12 + 1;\nif ( *(int *)(a1 + 8) > 0 )\n{\nv13 = *(_QWORD *)a1 + 8LL * *(int *)(a1 + 8) - 8;\nwhile ( *(int *)(a1 + 8) > 0 )\n{\nv7 = (_QWORD *)v13;\nv13 -= 8LL;\nif ( *v7 )\nbreak;\n--*(_DWORD *)(a1 + 8);\n}\n}\nreturn 1LL;\n}"}, {"addr": 4252090, "funname": "sub_40E1BA", "code": "__int64 __fastcall sub_40E1BA(__int64 a1, __int64 a2, int a3)\n{\nint v3; // eax\nint v4; // edx\n__int64 result; // rax\nbool v6; // al\n__int64 *v7; // rdx\n__int64 *v8; // rax\nunsigned __int64 *v9; // rax\nunsigned __int64 *v10; // rax\n__int64 *v11; // rax\nunsigned __int64 *v12; // rax\n_QWORD *v13; // rax\nint v14; // [rsp+Ch] [rbp-54h]\nunsigned __int64 v15; // [rsp+20h] [rbp-40h]\nint v16; // [rsp+28h] [rbp-38h]\nint v17; // [rsp+30h] [rbp-30h]\nint v18; // [rsp+34h] [rbp-2Ch]\n__int64 v19; // [rsp+38h] [rbp-28h]\nunsigned __int64 v20; // [rsp+40h] [rbp-20h]\n__int64 v21; // [rsp+48h] [rbp-18h]\nunsigned __int64 *v22; // [rsp+48h] [rbp-18h]\n__int64 *v23; // [rsp+50h] [rbp-10h]\nint j; // [rsp+5Ch] [rbp-4h]\nint i; // [rsp+5Ch] [rbp-4h]\n\nv14 = a3;\nv3 = a3;\nv4 = a3 + 63;\nif ( v3 < 0 )\nv3 = v4;\nv18 = v3 >> 6;\nv17 = v14 % 64;\nif ( v3 >> 6 <= *(_DWORD *)(a2 + 8) && *(_DWORD *)(a2 + 8) )\n{\nif ( a1 == a2\n|| ((*(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 8) - v18 < *(_DWORD *)(a1 + 12)) ? (v6 = a1 == 0) : (v6 = sub_40C9FA(a1, *(_DWORD *)(a2 + 8) - v18 + 1) == 0),\n!v6) )\n{\nv21 = *(_QWORD *)a2 + 8LL * v18;\nv23 = *(__int64 **)a1;\nv16 = *(_DWORD *)(a2 + 8) - v18;\n*(_DWORD *)(a1 + 8) = v16;\nif ( v17 )\n{\nv9 = (unsigned __int64 *)v21;\nv22 = (unsigned __int64 *)(v21 + 8);\nv20 = *v9;\nfor ( i = 1; i < v16; ++i )\n{\nv15 = v20 >> v17;\nv10 = v22++;\nv20 = *v10;\nv11 = v23++;\n*v11 = v15 | (v20 << (64 - (unsigned __int8)(v14 % 64)));\n}\nv12 = (unsigned __int64 *)v23++;\n*v12 = v20 >> v17;\n}\nelse\n{\nfor ( j = v16 + 1; j > 0; --j )\n{\nv7 = (__int64 *)v21;\nv21 += 8LL;\nv8 = v23++;\n*v8 = *v7;\n}\n}\n*v23 = 0LL;\nif ( *(int *)(a1 + 8) > 0 )\n{\nv19 = *(_QWORD *)a1 + 8LL * *(int *)(a1 + 8) - 8;\nwhile ( *(int *)(a1 + 8) > 0 )\n{\nv13 = (_QWORD *)v19;\nv19 -= 8LL;\nif ( *v13 )\nbreak;\n--*(_DWORD *)(a1 + 8);\n}\n}\nresult = 1LL;\n}\nelse\n{\nresult = 0LL;\n}\n}\nelse\n{\nsub_40CE13(a1, 0LL);\nresult = 1LL;\n}\nreturn result;\n}"}, {"addr": 4252688, "funname": "init", "code": "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\nsigned __int64 v4; // rbp\n__int64 i; // rbx\n\ninit_proc();\nv4 = &off_412DF8 - &off_412DF0;\nif ( v4 )\n{\nfor ( i = 0LL; i != v4; ++i )\n((void (__fastcall *)(_QWORD, __int64, __int64))*(&off_412DF0 + i))(a1, a2, a3);\n}\n}"}, {"addr": 4252784, "funname": "fini", "code": "void fini(void)\n{\n;\n}"}, {"addr": 4252800, "funname": "sub_40E480", "code": "int __fastcall sub_40E480(char *filename, struct stat *stat_buf)\n{\nreturn __xstat(1, filename, stat_buf);\n}"}, {"addr": 4252816, "funname": "sub_40E490", "code": "int __fastcall sub_40E490(int fildes, struct stat *stat_buf)\n{\nreturn __fxstat(1, fildes, stat_buf);\n}"}, {"addr": 4252832, "funname": ".term_proc", "code": "void term_proc()\n{\n;\n}"}]