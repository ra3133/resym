[{"addr": 4198400, "funname": ".init_proc", "code": "__int64 (**init_proc())(void)\n{\n__int64 (**result)(void); // rax\n\nresult = &_gmon_start__;\nif ( &_gmon_start__ )\nresult = (__int64 (**)(void))_gmon_start__();\nreturn result;\n}"}, {"addr": 4198432, "funname": "sub_401020", "code": "__int64 sub_401020()\n{\nreturn qword_410010();\n}"}, {"addr": 4198448, "funname": ".memset", "code": "// attributes: thunk\nvoid *memset(void *s, int c, size_t n)\n{\nreturn memset(s, c, n);\n}"}, {"addr": 4198464, "funname": ".close", "code": "// attributes: thunk\nint close(int fd)\n{\nreturn close(fd);\n}"}, {"addr": 4198480, "funname": ".__fprintf_chk", "code": "// attributes: thunk\n__int64 __fprintf_chk()\n{\nreturn _fprintf_chk();\n}"}, {"addr": 4198496, "funname": ".exit", "code": "// attributes: thunk\nvoid __noreturn exit(int status)\n{\nexit(status);\n}"}, {"addr": 4198512, "funname": ".getopt", "code": "// attributes: thunk\nint getopt(int argc, char *const *argv, const char *shortopts)\n{\nreturn getopt(argc, argv, shortopts);\n}"}, {"addr": 4198528, "funname": ".read", "code": "// attributes: thunk\nssize_t read(int fd, void *buf, size_t nbytes)\n{\nreturn read(fd, buf, nbytes);\n}"}, {"addr": 4198544, "funname": ".malloc", "code": "// attributes: thunk\nvoid *malloc(size_t size)\n{\nreturn malloc(size);\n}"}, {"addr": 4198560, "funname": ".fputc", "code": "// attributes: thunk\nint fputc(int c, FILE *stream)\n{\nreturn fputc(c, stream);\n}"}, {"addr": 4198576, "funname": ".free", "code": "// attributes: thunk\nvoid free(void *ptr)\n{\nfree(ptr);\n}"}, {"addr": 4198592, "funname": ".strlen", "code": "// attributes: thunk\nsize_t strlen(const char *s)\n{\nreturn strlen(s);\n}"}, {"addr": 4198608, "funname": ".compress2", "code": "// attributes: thunk\n__int64 compress2()\n{\nreturn compress2();\n}"}, {"addr": 4198624, "funname": ".__vfprintf_chk", "code": "// attributes: thunk\n__int64 __vfprintf_chk()\n{\nreturn _vfprintf_chk();\n}"}, {"addr": 4198640, "funname": ".MD5_Final", "code": "// attributes: thunk\n__int64 MD5_Final()\n{\nreturn MD5_Final();\n}"}, {"addr": 4198656, "funname": ".MD5_Update", "code": "// attributes: thunk\n__int64 MD5_Update()\n{\nreturn MD5_Update();\n}"}, {"addr": 4198672, "funname": ".fputs", "code": "// attributes: thunk\nint fputs(const char *s, FILE *stream)\n{\nreturn fputs(s, stream);\n}"}, {"addr": 4198688, "funname": ".lseek", "code": "// attributes: thunk\n__off_t lseek(int fd, __off_t offset, int whence)\n{\nreturn lseek(fd, offset, whence);\n}"}, {"addr": 4198704, "funname": ".strchr", "code": "// attributes: thunk\nchar *strchr(const char *s, int c)\n{\nreturn strchr(s, c);\n}"}, {"addr": 4198720, "funname": ".__stack_chk_fail", "code": "// attributes: thunk\nvoid __noreturn __stack_chk_fail()\n{\n_stack_chk_fail();\n}"}, {"addr": 4198736, "funname": ".MD5_Init", "code": "// attributes: thunk\n__int64 MD5_Init()\n{\nreturn MD5_Init();\n}"}, {"addr": 4198752, "funname": ".memcmp", "code": "// attributes: thunk\nint memcmp(const void *s1, const void *s2, size_t n)\n{\nreturn memcmp(s1, s2, n);\n}"}, {"addr": 4198768, "funname": ".__snprintf_chk", "code": "// attributes: thunk\n__int64 __snprintf_chk()\n{\nreturn _snprintf_chk();\n}"}, {"addr": 4198784, "funname": ".strtoll", "code": "// attributes: thunk\n__int64 strtoll(const char *nptr, char **endptr, int base)\n{\nreturn strtoll(nptr, endptr, base);\n}"}, {"addr": 4198800, "funname": ".fwrite", "code": "// attributes: thunk\nsize_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)\n{\nreturn fwrite(ptr, size, n, s);\n}"}, {"addr": 4198816, "funname": ".realloc", "code": "// attributes: thunk\nvoid *realloc(void *ptr, size_t size)\n{\nreturn realloc(ptr, size);\n}"}, {"addr": 4198832, "funname": ".fprintf", "code": "// attributes: thunk\nint fprintf(FILE *stream, const char *format, ...)\n{\nreturn fprintf(stream, format);\n}"}, {"addr": 4198848, "funname": ".localtime", "code": "// attributes: thunk\nstruct tm *localtime(const time_t *timer)\n{\nreturn localtime(timer);\n}"}, {"addr": 4198864, "funname": ".write", "code": "// attributes: thunk\nssize_t write(int fd, const void *buf, size_t n)\n{\nreturn write(fd, buf, n);\n}"}, {"addr": 4198880, "funname": ".strftime", "code": "// attributes: thunk\nsize_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)\n{\nreturn strftime(s, maxsize, format, tp);\n}"}, {"addr": 4198896, "funname": ".uncompress", "code": "// attributes: thunk\n__int64 uncompress()\n{\nreturn uncompress();\n}"}, {"addr": 4198912, "funname": ".memcpy", "code": "// attributes: thunk\nvoid *memcpy(void *dest, const void *src, size_t n)\n{\nreturn memcpy(dest, src, n);\n}"}, {"addr": 4198928, "funname": ".open", "code": "// attributes: thunk\nint open(const char *file, int oflag, ...)\n{\nreturn open(file, oflag);\n}"}, {"addr": 4198944, "funname": ".time", "code": "// attributes: thunk\ntime_t time(time_t *timer)\n{\nreturn time(timer);\n}"}, {"addr": 4198960, "funname": "start", "code": "// positive sp value has been detected, the output may be wrong!\nvoid __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void))\n{\n__int64 v3; // rax\nint v4; // esi\n__int64 v5; // [rsp-8h] [rbp-8h] BYREF\nchar *retaddr; // [rsp+0h] [rbp+0h] BYREF\n\nv4 = v5;\nv5 = v3;\n_libc_start_main(main, v4, &retaddr, init, fini, a3, &v5);\n__halt();\n}"}, {"addr": 4199008, "funname": "nullsub_1", "code": "void nullsub_1()\n{\n;\n}"}, {"addr": 4199024, "funname": "sub_401270", "code": "void *sub_401270()\n{\nreturn &unk_410138;\n}"}, {"addr": 4199136, "funname": "sub_4012E0", "code": "void *sub_4012E0()\n{\nvoid *result; // rax\n\nif ( !byte_410140 )\n{\nresult = sub_401270();\nbyte_410140 = 1;\n}\nreturn result;\n}"}, {"addr": 4199184, "funname": "sub_401310", "code": "// attributes: thunk\n__int64 sub_401310()\n{\nreturn 0LL;\n}"}, {"addr": 4202000, "funname": "sub_401E10", "code": "__int64 __fastcall sub_401E10(unsigned __int16 *a1)\n{\nreturn *a1;\n}"}, {"addr": 4202016, "funname": "sub_401E20", "code": "__int64 __fastcall sub_401E20(unsigned __int8 *a1)\n{\nreturn *a1 | ((a1[1] | (*((unsigned __int16 *)a1 + 1) << 8)) << 8);\n}"}, {"addr": 4202048, "funname": "sub_401E40", "code": "unsigned __int64 __fastcall sub_401E40(unsigned __int8 *a1)\n{\nreturn *a1 | ((a1[1] | ((a1[2] | ((a1[3] | ((a1[4] | ((a1[5] | ((unsigned __int64)*((unsigned __int16 *)a1 + 3) << 8)) << 8)) << 8)) << 8)) << 8)) << 8);\n}"}, {"addr": 4202160, "funname": "sub_401EB0", "code": "__int64 __fastcall sub_401EB0(unsigned int a1, unsigned int *a2)\n{\n*a2 = a1;\nreturn HIWORD(a1);\n}"}, {"addr": 4203056, "funname": "sub_402230", "code": "_BYTE *__fastcall sub_402230(void *a1, char a2)\n{\n_BYTE *v2; // rbx\nchar *v3; // r12\nchar v4; // al\nconst char *v5; // rbp\nchar v6; // al\nconst char *v7; // rbp\nchar v8; // al\nconst char *v9; // rbp\nchar v10; // al\nunsigned int v11; // eax\nunsigned int v12; // ebp\n__int64 v13; // rax\nconst char *v15; // rbp\nchar v16; // al\nconst char *v17; // rbp\nchar v18; // al\nconst char *v19; // rbp\nchar v20; // al\nconst char *v21; // rbp\nchar v22; // al\nunsigned int v23[10]; // [rsp+0h] [rbp-28h] BYREF\n\nv2 = 0LL;\nv23[0] = 0;\nif ( a1 )\n{\nv3 = sub_4020C0(a1, 32, v23);\nif ( v23[0] == 6 )\n{\nv2 = sub_401FB0(0x14uLL, 32);\nif ( a2 == 2 )\n{\nv15 = (const char *)*((_QWORD *)v3 + 1);\nif ( strlen(v15) == 1 )\n{\n*v2 = 48;\nv16 = **((_BYTE **)v3 + 1);\n}\nelse\n{\n*v2 = *v15;\nv16 = *(_BYTE *)(*((_QWORD *)v3 + 1) + 1LL);\n}\nv2[1] = v16;\nv2[2] = 47;\nv17 = (const char *)*((_QWORD *)v3 + 2);\nif ( strlen(v17) == 1 )\n{\nv2[3] = 48;\nv18 = **((_BYTE **)v3 + 2);\n}\nelse\n{\nv2[3] = *v17;\nv18 = *(_BYTE *)(*((_QWORD *)v3 + 2) + 1LL);\n}\nv2[4] = v18;\n}\nelse if ( a2 == 1 )\n{\nv19 = (const char *)*((_QWORD *)v3 + 2);\nif ( strlen(v19) == 1 )\n{\n*v2 = 48;\nv20 = **((_BYTE **)v3 + 2);\n}\nelse\n{\n*v2 = *v19;\nv20 = *(_BYTE *)(*((_QWORD *)v3 + 2) + 1LL);\n}\nv2[1] = v20;\nv2[2] = 47;\nv21 = (const char *)*((_QWORD *)v3 + 1);\nif ( strlen(v21) == 1 )\n{\nv2[3] = 48;\nv22 = **((_BYTE **)v3 + 1);\n}\nelse\n{\nv2[3] = *v21;\nv22 = *(_BYTE *)(*((_QWORD *)v3 + 1) + 1LL);\n}\nv2[4] = v22;\n}\nv2[5] = 47;\nv2[6] = **(_BYTE **)v3;\nv2[7] = *(_BYTE *)(*(_QWORD *)v3 + 1LL);\nv2[8] = *(_BYTE *)(*(_QWORD *)v3 + 2LL);\nv4 = *(_BYTE *)(*(_QWORD *)v3 + 3LL);\nv2[10] = 32;\nv2[9] = v4;\nv5 = (const char *)*((_QWORD *)v3 + 3);\nif ( strlen(v5) == 1 )\n{\nv2[11] = 48;\nv6 = **((_BYTE **)v3 + 3);\n}\nelse\n{\nv2[11] = *v5;\nv6 = *(_BYTE *)(*((_QWORD *)v3 + 3) + 1LL);\n}\nv2[12] = v6;\nv2[13] = 58;\nv7 = (const char *)*((_QWORD *)v3 + 4);\nif ( strlen(v7) == 1 )\n{\nv2[14] = 48;\nv8 = **((_BYTE **)v3 + 4);\n}\nelse\n{\nv2[14] = *v7;\nv8 = *(_BYTE *)(*((_QWORD *)v3 + 4) + 1LL);\n}\nv2[15] = v8;\nv2[16] = 58;\nv9 = (const char *)*((_QWORD *)v3 + 5);\nif ( strlen(v9) == 1 )\n{\nv2[17] = 48;\nv10 = **((_BYTE **)v3 + 5);\n}\nelse\n{\nv2[17] = *v9;\nv10 = *(_BYTE *)(*((_QWORD *)v3 + 5) + 1LL);\n}\nv2[18] = v10;\nv11 = v23[0];\nv2[19] = 0;\nif ( v11 )\n{\nv12 = 0;\ndo\n{\nv13 = v12++;\nfree(*(void **)&v3[8 * v13]);\n}\nwhile ( v23[0] > v12 );\n}\n}\n}\nreturn v2;\n}"}, {"addr": 4203712, "funname": "sub_4024C0", "code": "void *__fastcall sub_4024C0(__int64 a1, int a2)\n{\nvoid *v2; // rbx\ntime_t timer; // [rsp+38h] [rbp-10h] BYREF\n\nv2 = sub_401FB0(0x14uLL, a2);\ntimer = time(0LL);\nlocaltime(&timer);\n__snprintf_chk();\nreturn v2;\n}"}, {"addr": 4204048, "funname": "sub_402610", "code": "void *__fastcall sub_402610(__int64 a1, int a2)\n{\nvoid *v2; // rbx\n\nv2 = sub_401FB0(0x14uLL, a2);\ntime(0LL);\n__snprintf_chk();\nreturn v2;\n}"}, {"addr": 4204112, "funname": "sub_402650", "code": "void *__fastcall sub_402650(void *a1, const char *a2)\n{\nvoid *v2; // rbx\nunsigned int v3; // eax\nsize_t v4; // rbp\n\nif ( a1 )\nfree(a1);\nv2 = 0LL;\nv3 = strlen(a2);\nv4 = v3;\nif ( v3 )\n{\nv2 = sub_401FB0(v3 + 1, (int)a2);\nmemcpy(v2, a2, v4);\n*((_BYTE *)v2 + v4) = 0;\n}\nreturn v2;\n}"}, {"addr": 4211040, "funname": "sub_404160", "code": "__int64 __fastcall sub_404160(__int64 a1, __int64 a2)\n{\nsub_406C00(a1, a2 - 4, 1LL);\nsub_405D20(a1, a2);\nreturn __fprintf_chk();\n}"}, {"addr": 4217584, "funname": "sub_405AF0", "code": "_BYTE *__fastcall sub_405AF0()\n{\n_BYTE *result; // rax\n\nresult = byte_410160;\nif ( byte_410160[0] )\nresult = (_BYTE *)__vfprintf_chk();\nreturn result;\n}"}, {"addr": 4217776, "funname": "sub_405BB0", "code": "_BYTE *__fastcall sub_405BB0()\n{\n_BYTE *result; // rax\n\n__vfprintf_chk();\nresult = byte_410150;\nif ( byte_410150[0] )\nexit(1);\nreturn result;\n}"}, {"addr": 4217968, "funname": "sub_405C70", "code": "void __fastcall __noreturn sub_405C70()\n{\n__vfprintf_chk();\nexit(1);\n}"}, {"addr": 4218720, "funname": "sub_405F60", "code": "void __fastcall sub_405F60(void *ptr)\n{\nfree(*((void **)ptr + 2));\nfree(*((void **)ptr + 4));\nfree(*((void **)ptr + 5));\nfree(ptr);\n}"}, {"addr": 4221952, "funname": "sub_406C00", "code": "__int64 __fastcall sub_406C00(unsigned __int8 *a1, __int64 a2, unsigned int a3)\n{\nunsigned int v3; // er8\nunsigned int v4; // er9\nunsigned __int64 v5; // rcx\n\nv3 = (unsigned __int16)a3;\nv4 = HIWORD(a3);\nif ( a2 )\n{\nv5 = 0LL;\nv3 = *a1 + (unsigned __int16)a3;\nv4 += v3;\nwhile ( ++v5 != a2 )\n{\nwhile ( 1 )\n{\nv3 += a1[v5];\nv4 += v3;\nif ( !v5 || v5 != 5552 * (v5 / 0x15B0) && a2 - 1 != v5 )\nbreak;\n++v5;\nv3 %= 0xFFF1u;\nv4 %= 0xFFF1u;\nif ( v5 == a2 )\nreturn v3 | (v4 << 16);\n}\n}\n}\nreturn v3 | (v4 << 16);\n}"}, {"addr": 4222224, "funname": "sub_406D10", "code": "unsigned __int64 __fastcall sub_406D10(unsigned int a1, int a2)\n{\nunsigned __int64 result; // rax\nunsigned int v3; // [rsp+0h] [rbp-18h] BYREF\nunsigned __int64 v4; // [rsp+8h] [rbp-10h]\n\nv4 = __readfsqword(0x28u);\nsub_401EB0(a1, &v3);\nresult = write(a2, &v3, 4uLL);\nif ( result <= 3 )\nresult = -1LL;\nreturn result;\n}"}, {"addr": 4223440, "funname": "sub_4071D0", "code": "bool __fastcall sub_4071D0(void *s2)\n{\nbool result; // al\n\nresult = 0;\nif ( s2 )\nresult = memcmp(&unk_410130, s2, 8uLL) == 0;\nreturn result;\n}"}, {"addr": 4224672, "funname": "sub_4076A0", "code": "int __fastcall sub_4076A0(FILE *stream, char *s)\n{\nint result; // eax\n\nresult = (int)s;\nif ( s )\n{\nif ( stream )\nresult = fputs(s, stream);\n}\nreturn result;\n}"}, {"addr": 4224976, "funname": "sub_4077D0", "code": "_BYTE *__fastcall sub_4077D0(__int64 a1, unsigned __int64 a2)\n{\n_BYTE *result; // rax\n__int64 v5; // rdx\n__int64 v6; // rcx\n__int64 v7; // rsi\nchar v8; // di\n__int64 v9; // rsi\n\nresult = sub_407440(2 * a2 + 4);\n*result = -1;\nresult[1] = -2;\nv5 = 3LL;\nv6 = 2LL;\nif ( a2 )\n{\nv7 = 0LL;\nLOBYTE(v5) = 2;\nLOBYTE(v6) = 0;\ndo\n{\nLODWORD(v6) = v6 + 1;\nresult[(unsigned int)v5] = 0;\nv8 = *(_BYTE *)(a1 + v7);\nv9 = (unsigned int)(v5 + 1);\nLODWORD(v5) = v5 + 2;\nresult[v9] = v8;\nv7 = (unsigned int)v6;\n}\nwhile ( a2 > (unsigned int)v6 );\nv6 = (unsigned int)v5;\nv5 = (unsigned int)(v5 + 1);\n}\nresult[v6] = 0;\nresult[v5] = 0;\nreturn result;\n}"}, {"addr": 4225088, "funname": "sub_407840", "code": "_BYTE *__fastcall sub_407840(int a1, size_t a2)\n{\n_BYTE *v2; // rbx\n_BYTE *v3; // rbp\nsize_t v5[2]; // [rsp+8h] [rbp-20h] BYREF\n\nv5[0] = a2;\nv2 = sub_4075F0(a1, v5);\nv3 = sub_4076C0(v2, v5[0]);\nsub_407490(v2);\nreturn v3;\n}"}, {"addr": 4227296, "funname": "sub_4080E0", "code": "// attributes: thunk\n__int64 __fastcall sub_4080E0(__int64 a1, int *a2)\n{\nreturn sub_406B90(a1, a2);\n}"}, {"addr": 4228672, "funname": "sub_408640", "code": "__int64 __fastcall sub_408640(__int64 a1)\n{\nint v1; // ebp\n\nv1 = sub_401E20((unsigned __int8 *)(a1 + 8));\nreturn v1 * (unsigned int)sub_401E20((unsigned __int8 *)(a1 + 12));\n}"}, {"addr": 4229824, "funname": "init", "code": "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\nsigned __int64 v4; // rbp\n__int64 i; // rbx\n\ninit_proc();\nv4 = &off_40FDD0 - &off_40FDC8;\nif ( v4 )\n{\nfor ( i = 0LL; i != v4; ++i )\n((void (__fastcall *)(_QWORD, __int64, __int64))*(&off_40FDC8 + i))(a1, a2, a3);\n}\n}"}, {"addr": 4229920, "funname": "fini", "code": "void fini(void)\n{\n;\n}"}, {"addr": 4229924, "funname": ".term_proc", "code": "void term_proc()\n{\n;\n}"}]