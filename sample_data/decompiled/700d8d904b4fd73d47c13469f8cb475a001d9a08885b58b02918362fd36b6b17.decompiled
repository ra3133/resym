[{"addr": 4202496, "funname": ".init_proc", "code": "__int64 (**init_proc())(void)\n{\n__int64 (**result)(void); // rax\n\nresult = &_gmon_start__;\nif ( &_gmon_start__ )\nresult = (__int64 (**)(void))_gmon_start__();\nreturn result;\n}"}, {"addr": 4202528, "funname": "sub_402020", "code": "__int64 sub_402020()\n{\nreturn qword_411010();\n}"}, {"addr": 4202544, "funname": ".has_colors", "code": "// attributes: thunk\nbool has_colors(void)\n{\nreturn has_colors();\n}"}, {"addr": 4202560, "funname": ".nodelay", "code": "// attributes: thunk\nint nodelay(WINDOW *a1, bool a2)\n{\nreturn nodelay(a1, a2);\n}"}, {"addr": 4202576, "funname": ".getenv", "code": "// attributes: thunk\nchar *getenv(const char *name)\n{\nreturn getenv(name);\n}"}, {"addr": 4202592, "funname": ".wattrset", "code": "// attributes: thunk\nint wattrset(WINDOW *a1, int a2)\n{\nreturn wattrset(a1, a2);\n}"}, {"addr": 4202608, "funname": ".raise", "code": "// attributes: thunk\nint raise(int sig)\n{\nreturn raise(sig);\n}"}, {"addr": 4202624, "funname": ".free", "code": "// attributes: thunk\nvoid free(void *ptr)\n{\nfree(ptr);\n}"}, {"addr": 4202640, "funname": ".wscrl", "code": "// attributes: thunk\nint wscrl(WINDOW *a1, int a2)\n{\nreturn wscrl(a1, a2);\n}"}, {"addr": 4202656, "funname": ".abort", "code": "// attributes: thunk\nvoid __noreturn abort(void)\n{\nabort();\n}"}, {"addr": 4202672, "funname": ".__errno_location", "code": "// attributes: thunk\nint *__errno_location(void)\n{\nreturn _errno_location();\n}"}, {"addr": 4202688, "funname": ".scrollok", "code": "// attributes: thunk\nint scrollok(WINDOW *a1, bool a2)\n{\nreturn scrollok(a1, a2);\n}"}, {"addr": 4202704, "funname": ".unlink", "code": "// attributes: thunk\nint unlink(const char *name)\n{\nreturn unlink(name);\n}"}, {"addr": 4202720, "funname": ".newwin", "code": "// attributes: thunk\nWINDOW *newwin(int a1, int a2, int a3, int a4)\n{\nreturn newwin(a1, a2, a3, a4);\n}"}, {"addr": 4202736, "funname": ".curs_set", "code": "// attributes: thunk\nint curs_set(int a1)\n{\nreturn curs_set(a1);\n}"}, {"addr": 4202752, "funname": ".idlok", "code": "// attributes: thunk\nint idlok(WINDOW *a1, bool a2)\n{\nreturn idlok(a1, a2);\n}"}, {"addr": 4202768, "funname": ".fcntl", "code": "// attributes: thunk\nint fcntl(int fd, int cmd, ...)\n{\nreturn fcntl(fd, cmd);\n}"}, {"addr": 4202784, "funname": ".setenv", "code": "// attributes: thunk\nint setenv(const char *name, const char *value, int replace)\n{\nreturn setenv(name, value, replace);\n}"}, {"addr": 4202800, "funname": ".write", "code": "// attributes: thunk\nssize_t write(int fd, const void *buf, size_t n)\n{\nreturn write(fd, buf, n);\n}"}, {"addr": 4202816, "funname": ".wgetch", "code": "// attributes: thunk\nint wgetch(WINDOW *a1)\n{\nreturn wgetch(a1);\n}"}, {"addr": 4202832, "funname": ".getpid", "code": "// attributes: thunk\n__pid_t getpid(void)\n{\nreturn getpid();\n}"}, {"addr": 4202848, "funname": ".tigetflag", "code": "// attributes: thunk\nint tigetflag(char *a1)\n{\nreturn tigetflag(a1);\n}"}, {"addr": 4202864, "funname": ".wmouse_trafo", "code": "// attributes: thunk\nbool wmouse_trafo(const WINDOW *a1, int *a2, int *a3, bool a4)\n{\nreturn wmouse_trafo(a1, a2, a3, a4);\n}"}, {"addr": 4202880, "funname": ".regfree", "code": "// attributes: thunk\nvoid regfree(regex_t *preg)\n{\nregfree(preg);\n}"}, {"addr": 4202896, "funname": ".strlen", "code": "// attributes: thunk\nsize_t strlen(const char *s)\n{\nreturn strlen(s);\n}"}, {"addr": 4202912, "funname": ".noecho", "code": "// attributes: thunk\nint noecho(void)\n{\nreturn noecho();\n}"}, {"addr": 4202928, "funname": ".dup2", "code": "// attributes: thunk\nint dup2(int fd, int fd2)\n{\nreturn dup2(fd, fd2);\n}"}, {"addr": 4202944, "funname": ".wredrawln", "code": "// attributes: thunk\nint wredrawln(WINDOW *a1, int a2, int a3)\n{\nreturn wredrawln(a1, a2, a3);\n}"}, {"addr": 4202960, "funname": ".snprintf", "code": "// attributes: thunk\nint snprintf(char *s, size_t maxlen, const char *format, ...)\n{\nreturn snprintf(s, maxlen, format);\n}"}, {"addr": 4202976, "funname": ".use_default_colors", "code": "// attributes: thunk\nint use_default_colors(void)\n{\nreturn use_default_colors();\n}"}, {"addr": 4202992, "funname": ".strrchr", "code": "// attributes: thunk\nchar *strrchr(const char *s, int c)\n{\nreturn strrchr(s, c);\n}"}, {"addr": 4203008, "funname": ".fputs", "code": "// attributes: thunk\nint fputs(const char *s, FILE *stream)\n{\nreturn fputs(s, stream);\n}"}, {"addr": 4203024, "funname": ".mousemask", "code": "// attributes: thunk\nmmask_t mousemask(mmask_t a1, mmask_t *a2)\n{\nreturn mousemask(a1, a2);\n}"}, {"addr": 4203040, "funname": ".ioctl", "code": "// attributes: thunk\nint ioctl(int fd, unsigned __int64 request, ...)\n{\nreturn ioctl(fd, request);\n}"}, {"addr": 4203056, "funname": ".start_color", "code": "// attributes: thunk\nint start_color(void)\n{\nreturn start_color();\n}"}, {"addr": 4203072, "funname": ".strncat", "code": "// attributes: thunk\nchar *strncat(char *dest, const char *src, size_t n)\n{\nreturn strncat(dest, src, n);\n}"}, {"addr": 4203088, "funname": ".close", "code": "// attributes: thunk\nint close(int fd)\n{\nreturn close(fd);\n}"}, {"addr": 4203104, "funname": ".pipe", "code": "// attributes: thunk\nint pipe(int pipedes[2])\n{\nreturn pipe(pipedes);\n}"}, {"addr": 4203120, "funname": ".keypad", "code": "// attributes: thunk\nint keypad(WINDOW *a1, bool a2)\n{\nreturn keypad(a1, a2);\n}"}, {"addr": 4203136, "funname": ".regcomp", "code": "// attributes: thunk\nint regcomp(regex_t *preg, const char *pattern, int cflags)\n{\nreturn regcomp(preg, pattern, cflags);\n}"}, {"addr": 4203152, "funname": ".wattr_on", "code": "// attributes: thunk\nint wattr_on(WINDOW *a1, attr_t a2, void *a3)\n{\nreturn wattr_on(a1, a2, a3);\n}"}, {"addr": 4203168, "funname": ".read", "code": "// attributes: thunk\nssize_t read(int fd, void *buf, size_t nbytes)\n{\nreturn read(fd, buf, nbytes);\n}"}, {"addr": 4203184, "funname": ".memcmp", "code": "// attributes: thunk\nint memcmp(const void *s1, const void *s2, size_t n)\n{\nreturn memcmp(s1, s2, n);\n}"}, {"addr": 4203200, "funname": ".calloc", "code": "// attributes: thunk\nvoid *calloc(size_t nmemb, size_t size)\n{\nreturn calloc(nmemb, size);\n}"}, {"addr": 4203216, "funname": ".strcmp", "code": "// attributes: thunk\nint strcmp(const char *s1, const char *s2)\n{\nreturn strcmp(s1, s2);\n}"}, {"addr": 4203232, "funname": ".signal", "code": "// attributes: thunk\n__sighandler_t signal(int sig, __sighandler_t handler)\n{\nreturn signal(sig, handler);\n}"}, {"addr": 4203248, "funname": ".fprintf", "code": "// attributes: thunk\nint fprintf(FILE *stream, const char *format, ...)\n{\nreturn fprintf(stream, format);\n}"}, {"addr": 4203264, "funname": ".mkfifo", "code": "// attributes: thunk\nint mkfifo(const char *path, __mode_t mode)\n{\nreturn mkfifo(path, mode);\n}"}, {"addr": 4203280, "funname": ".raw", "code": "// attributes: thunk\nint raw(void)\n{\nreturn raw();\n}"}, {"addr": 4203296, "funname": ".memcpy", "code": "// attributes: thunk\nvoid *memcpy(void *dest, const void *src, size_t n)\n{\nreturn memcpy(dest, src, n);\n}"}, {"addr": 4203312, "funname": ".wtimeout", "code": "// attributes: thunk\nvoid wtimeout(WINDOW *a1, int a2)\n{\nwtimeout(a1, a2);\n}"}, {"addr": 4203328, "funname": ".select", "code": "// attributes: thunk\nint select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)\n{\nreturn select(nfds, readfds, writefds, exceptfds, timeout);\n}"}, {"addr": 4203344, "funname": ".delwin", "code": "// attributes: thunk\nint delwin(WINDOW *a1)\n{\nreturn delwin(a1);\n}"}, {"addr": 4203360, "funname": ".meta", "code": "// attributes: thunk\nint meta(WINDOW *a1, bool a2)\n{\nreturn meta(a1, a2);\n}"}, {"addr": 4203376, "funname": ".reset_shell_mode", "code": "// attributes: thunk\nint reset_shell_mode(void)\n{\nreturn reset_shell_mode();\n}"}, {"addr": 4203392, "funname": ".init_pair", "code": "// attributes: thunk\nint init_pair(__int16 a1, __int16 a2, __int16 a3)\n{\nreturn init_pair(a1, a2, a3);\n}"}, {"addr": 4203408, "funname": ".fflush", "code": "// attributes: thunk\nint fflush(FILE *stream)\n{\nreturn fflush(stream);\n}"}, {"addr": 4203424, "funname": ".regexec", "code": "// attributes: thunk\nint regexec(const regex_t *preg, const char *string, size_t nmatch, regmatch_t pmatch[], int eflags)\n{\nreturn regexec(preg, string, nmatch, pmatch, eflags);\n}"}, {"addr": 4203440, "funname": ".wnoutrefresh", "code": "// attributes: thunk\nint wnoutrefresh(WINDOW *a1)\n{\nreturn wnoutrefresh(a1);\n}"}, {"addr": 4203456, "funname": ".reset_prog_mode", "code": "// attributes: thunk\nint reset_prog_mode(void)\n{\nreturn reset_prog_mode();\n}"}, {"addr": 4203472, "funname": ".putp", "code": "// attributes: thunk\nint putp(const char *a1)\n{\nreturn putp(a1);\n}"}, {"addr": 4203488, "funname": ".ttyname", "code": "// attributes: thunk\nchar *ttyname(int fd)\n{\nreturn ttyname(fd);\n}"}, {"addr": 4203504, "funname": ".realloc", "code": "// attributes: thunk\nvoid *realloc(void *ptr, size_t size)\n{\nreturn realloc(ptr, size);\n}"}, {"addr": 4203520, "funname": ".setlocale", "code": "// attributes: thunk\nchar *setlocale(int category, const char *locale)\n{\nreturn setlocale(category, locale);\n}"}, {"addr": 4203536, "funname": ".memmove", "code": "// attributes: thunk\nvoid *memmove(void *dest, const void *src, size_t n)\n{\nreturn memmove(dest, src, n);\n}"}, {"addr": 4203552, "funname": ".init_color", "code": "// attributes: thunk\nint init_color(__int16 a1, __int16 a2, __int16 a3, __int16 a4)\n{\nreturn init_color(a1, a2, a3, a4);\n}"}, {"addr": 4203568, "funname": ".waitpid", "code": "// attributes: thunk\n__pid_t waitpid(__pid_t pid, int *stat_loc, int options)\n{\nreturn waitpid(pid, stat_loc, options);\n}"}, {"addr": 4203584, "funname": ".unctrl", "code": "// attributes: thunk\nchar *unctrl(chtype a1)\n{\nreturn unctrl(a1);\n}"}, {"addr": 4203600, "funname": ".doupdate", "code": "// attributes: thunk\nint doupdate(void)\n{\nreturn doupdate();\n}"}, {"addr": 4203616, "funname": ".tigetstr", "code": "// attributes: thunk\nchar *tigetstr(char *a1)\n{\nreturn tigetstr(a1);\n}"}, {"addr": 4203632, "funname": ".open", "code": "// attributes: thunk\nint open(const char *file, int oflag, ...)\n{\nreturn open(file, oflag);\n}"}, {"addr": 4203648, "funname": ".perror", "code": "// attributes: thunk\nvoid perror(const char *s)\n{\nperror(s);\n}"}, {"addr": 4203664, "funname": ".strtok", "code": "// attributes: thunk\nchar *strtok(char *s, const char *delim)\n{\nreturn strtok(s, delim);\n}"}, {"addr": 4203680, "funname": ".unsetenv", "code": "// attributes: thunk\nint unsetenv(const char *name)\n{\nreturn unsetenv(name);\n}"}, {"addr": 4203696, "funname": ".wmove", "code": "// attributes: thunk\nint wmove(WINDOW *a1, int a2, int a3)\n{\nreturn wmove(a1, a2, a3);\n}"}, {"addr": 4203712, "funname": ".execvp", "code": "// attributes: thunk\nint execvp(const char *file, char *const argv[])\n{\nreturn execvp(file, argv);\n}"}, {"addr": 4203728, "funname": ".atoi", "code": "// attributes: thunk\nint atoi(const char *nptr)\n{\nreturn atoi(nptr);\n}"}, {"addr": 4203744, "funname": ".waddch", "code": "// attributes: thunk\nint waddch(WINDOW *a1, const chtype a2)\n{\nreturn waddch(a1, a2);\n}"}, {"addr": 4203760, "funname": ".exit", "code": "// attributes: thunk\nvoid __noreturn exit(int status)\n{\nexit(status);\n}"}, {"addr": 4203776, "funname": ".newterm", "code": "// attributes: thunk\nSCREEN *newterm(char *a1, FILE *a2, FILE *a3)\n{\nreturn newterm(a1, a2, a3);\n}"}, {"addr": 4203792, "funname": ".getmouse", "code": "// attributes: thunk\nint getmouse(MEVENT *a1)\n{\nreturn getmouse(a1);\n}"}, {"addr": 4203808, "funname": ".endwin", "code": "// attributes: thunk\nint endwin(void)\n{\nreturn endwin();\n}"}, {"addr": 4203824, "funname": ".strdup", "code": "// attributes: thunk\nchar *strdup(const char *s)\n{\nreturn strdup(s);\n}"}, {"addr": 4203840, "funname": ".execl", "code": "// attributes: thunk\nint execl(const char *path, const char *arg, ...)\n{\nreturn execl(path, arg);\n}"}, {"addr": 4203856, "funname": ".waddnstr", "code": "// attributes: thunk\nint waddnstr(WINDOW *a1, const char *a2, int a3)\n{\nreturn waddnstr(a1, a2, a3);\n}"}, {"addr": 4203872, "funname": ".nl", "code": "// attributes: thunk\nint nl(void)\n{\nreturn nl();\n}"}, {"addr": 4203888, "funname": ".fork", "code": "// attributes: thunk\n__pid_t fork(void)\n{\nreturn fork();\n}"}, {"addr": 4203904, "funname": ".mouseinterval", "code": "// attributes: thunk\nint mouseinterval(int a1)\n{\nreturn mouseinterval(a1);\n}"}, {"addr": 4203920, "funname": "start", "code": "// positive sp value has been detected, the output may be wrong!\nvoid __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void))\n{\n__int64 v3; // rax\nint v4; // esi\n__int64 v5; // [rsp-8h] [rbp-8h] BYREF\nchar *retaddr; // [rsp+0h] [rbp+0h] BYREF\n\nv4 = v5;\nv5 = v3;\n_libc_start_main(main, v4, &retaddr, init, fini, a3, &v5);\n__halt();\n}"}, {"addr": 4203968, "funname": "nullsub_1", "code": "void nullsub_1()\n{\n;\n}"}, {"addr": 4203984, "funname": "sub_4025D0", "code": "FILE **sub_4025D0()\n{\nreturn &stdin;\n}"}, {"addr": 4204096, "funname": "sub_402640", "code": "FILE **sub_402640()\n{\nFILE **result; // rax\n\nif ( !byte_4114A8 )\n{\nresult = sub_4025D0();\nbyte_4114A8 = 1;\n}\nreturn result;\n}"}, {"addr": 4204144, "funname": "sub_402670", "code": "// attributes: thunk\n__int64 sub_402670()\n{\nreturn 0LL;\n}"}, {"addr": 4204146, "funname": "sub_402672", "code": "__int64 __fastcall sub_402672(__int64 a1)\n{\n__int64 result; // rax\n\nsub_407267(&qword_4114E0, &qword_4114F0);\nqword_4114E8 = 0LL;\nsub_4032E2(a1);\nresult = qword_4114F0;\nqword_4114E0 = qword_4114F0;\nqword_4114E8 = qword_4114F8;\nreturn result;\n}"}, {"addr": 4204227, "funname": "sub_4026C3", "code": "__int64 __fastcall sub_4026C3(__int64 a1)\n{\n__int64 v2; // [rsp+18h] [rbp-8h] BYREF\n\nv2 = 2LL;\nsub_402A76(&v2);\nreturn sub_4032E2(a1);\n}"}, {"addr": 4204274, "funname": "sub_4026F2", "code": "__int64 __fastcall sub_4026F2(__int64 a1)\n{\nqword_4114E0 = qword_4114F0;\nqword_4114E8 = qword_4114F8;\nreturn sub_4032E2(a1);\n}"}, {"addr": 4204516, "funname": "sub_4027E4", "code": "__int64 __fastcall sub_4027E4(__int64 *a1)\n{\n__int64 v1; // rax\n\nv1 = qword_411340;\nBYTE1(v1) = BYTE1(qword_411340) & 0xDF;\nqword_411340 = v1;\nif ( *a1 )\nqword_414660 = *a1;\nif ( *a1 )\nqword_414660 = *a1;\nif ( *a1 )\nqword_414660 = *a1;\nreturn sub_405ACD(qword_414658, qword_414660);\n}"}, {"addr": 4204648, "funname": "sub_402868", "code": "__int64 sub_402868()\n{\nint v0; // ecx\nint v1; // edx\nint v3; // [rsp+1Ch] [rbp-4h]\n\nv3 = (dword_41464C - (qword_414578 != 0LL)) / 2;\nfor ( qword_4114D8 = qword_4114F0; ; qword_4114D8 = *(_QWORD *)(qword_4114D8 + 48) )\n{\nv0 = v3;\nv1 = qword_4114D8 ? *(_QWORD *)(qword_4114D8 + 16) / (unsigned __int64)dword_414648 + 1 : 1;\nv3 -= v1;\nif ( v0 - v1 <= 0 || !*(_QWORD *)(qword_4114D8 + 48) )\nbreak;\n}\nreturn sub_406983();\n}"}, {"addr": 4204822, "funname": "sub_402916", "code": "__int64 __fastcall sub_402916(__int64 (__fastcall **a1)(__int64, __int64))\n{\n__int64 v1; // rdx\n__int64 result; // rax\n__int64 v3; // [rsp+10h] [rbp-30h] BYREF\n__int64 v4; // [rsp+18h] [rbp-28h]\n__int64 v5; // [rsp+20h] [rbp-20h] BYREF\n__int64 v6; // [rsp+28h] [rbp-18h]\nvoid *ptr; // [rsp+38h] [rbp-8h]\n\nv5 = qword_4114F0;\nv6 = qword_4114F8;\nv3 = (*a1)(qword_4114F0, qword_4114F8);\nv4 = v1;\nsub_407267(&v5, &v3);\nptr = (void *)sub_4056B5(v5, v6, v3, v4);\nsub_403DA1(0LL, v5, v6, v3, v4, ptr);\nfree(ptr);\nif ( !(unsigned __int8)sub_4046A1(v5, v6, v3, v4) )\n{\nqword_4114E0 = v5;\nqword_4114E8 = v6;\n}\nqword_4114F0 = v5;\nqword_4114F8 = v6;\nif ( (unsigned __int64)qword_4114E8 > *(_QWORD *)(qword_4114E0 + 8) )\nqword_4114E8 = *(_QWORD *)(qword_4114E0 + 8);\nresult = qword_411340 | 0x10;\nqword_411340 |= 0x10uLL;\ndword_414644 = 1;\nreturn result;\n}"}, {"addr": 4205174, "funname": "sub_402A76", "code": "__int64 __fastcall sub_402A76(__int64 *a1)\n{\n__int64 v1; // rax\n__int64 v2; // rdx\n__int64 result; // rax\n__int64 v4; // rdx\n__int64 v5; // [rsp+10h] [rbp-20h] BYREF\n__int64 v6; // [rsp+18h] [rbp-18h] BYREF\n__int64 v7; // [rsp+20h] [rbp-10h] BYREF\n__int64 v8; // [rsp+28h] [rbp-8h] BYREF\n\nqword_411500 = qword_4114F0;\nqword_411508 = qword_4114F8;\nsub_407267(&qword_4114E0, &qword_4114F0);\nv1 = *a1;\nif ( *a1 == 3 )\n{\nqword_4114E0 = qword_4114C8;\nqword_4114F0 = qword_4114D0;\nv8 = 2LL;\nreturn sub_402A76(&v8);\n}\nif ( v1 > 3 )\ngoto LABEL_27;\nif ( v1 != 1 )\n{\nif ( v1 == 2 )\n{\nqword_4114E8 = 0LL;\nresult = *(_QWORD *)(qword_4114F0 + 8);\nqword_4114F8 = result;\nreturn result;\n}\nLABEL_27:\nif ( qword_4114E8 || qword_4114F8 != *(_QWORD *)(qword_4114F0 + 8) )\n{\nif ( (unsigned __int8)sub_4098D3()\n|| *(char *)(*(_QWORD *)qword_4114F0 + qword_4114F8) >= 0\n&& (*(char *)(*(_QWORD *)qword_4114F0 + qword_4114F8) <= 47\n|| *(char *)(*(_QWORD *)qword_4114F0 + qword_4114F8) > 57\n&& *(char *)(*(_QWORD *)qword_4114F0 + qword_4114F8) <= 64\n|| *(char *)(*(_QWORD *)qword_4114F0 + qword_4114F8) > 90\n&& *(char *)(*(_QWORD *)qword_4114F0 + qword_4114F8) <= 94\n|| *(_BYTE *)(*(_QWORD *)qword_4114F0 + qword_4114F8) == 96\n|| *(char *)(*(_QWORD *)qword_4114F0 + qword_4114F8) > 122) )\n{\nv6 = 2LL;\nresult = sub_402A76(&v6);\n}\nelse\n{\nv5 = 1LL;\nresult = sub_402A76(&v5);\n}\n}\nelse\n{\nv7 = 3LL;\nresult = sub_402A76(&v7);\n}\nreturn result;\n}\nif ( qword_4114E8\n&& (*(char *)(*(_QWORD *)qword_4114E0 + qword_4114E8 - 1) < 0\n|| *(char *)(*(_QWORD *)qword_4114E0 + qword_4114E8 - 1) > 47\n&& (*(char *)(*(_QWORD *)qword_4114E0 + qword_4114E8 - 1) <= 57\n|| *(char *)(*(_QWORD *)qword_4114E0 + qword_4114E8 - 1) > 64)\n&& (*(char *)(*(_QWORD *)qword_4114E0 + qword_4114E8 - 1) <= 90\n|| *(char *)(*(_QWORD *)qword_4114E0 + qword_4114E8 - 1) > 94)\n&& *(_BYTE *)(*(_QWORD *)qword_4114E0 + qword_4114E8 - 1) != 96\n&& *(char *)(*(_QWORD *)qword_4114E0 + qword_4114E8 - 1) <= 122) )\n{\nqword_4114E0 = sub_408D62(qword_4114E0, qword_4114E8);\nqword_4114E8 = v2;\n}\nif ( *(char *)(*(_QWORD *)qword_4114F0 + qword_4114F8) < 0\n|| (result = *(unsigned __int8 *)(*(_QWORD *)qword_4114F0 + qword_4114F8), (char)result > 47)\n&& (*(char *)(*(_QWORD *)qword_4114F0 + qword_4114F8) <= 57\n|| (result = *(unsigned __int8 *)(*(_QWORD *)qword_4114F0 + qword_4114F8), (char)result > 64))\n&& (*(char *)(*(_QWORD *)qword_4114F0 + qword_4114F8) <= 90\n|| (result = *(unsigned __int8 *)(*(_QWORD *)qword_4114F0 + qword_4114F8), (char)result > 94))\n&& (result = *(unsigned __int8 *)(*(_QWORD *)qword_4114F0 + qword_4114F8), (_BYTE)result != 96)\n&& (result = *(unsigned __int8 *)(*(_QWORD *)qword_4114F0 + qword_4114F8), (char)result <= 122) )\n{\nresult = sub_408B24(qword_4114F0, qword_4114F8);\nqword_4114F0 = result;\nqword_4114F8 = v4;\n}\nreturn result;\n}"}, {"addr": 4206308, "funname": "sub_402EE4", "code": "__int64 __fastcall sub_402EE4(_QWORD *a1)\n{\n__int64 result; // rax\n\nresult = sub_406C4F(*a1);\nif ( (_BYTE)result )\nresult = sub_40544F(0LL);\nreturn result;\n}"}, {"addr": 4206352, "funname": "sub_402F10", "code": "__int64 __fastcall sub_402F10(_QWORD *a1)\n{\n__int64 result; // rax\n\nresult = sub_406C4F(*a1);\nif ( (_BYTE)result )\nresult = sub_40544F(1LL);\nreturn result;\n}"}, {"addr": 4206396, "funname": "sub_402F3C", "code": "__int64 __fastcall sub_402F3C(_QWORD *a1)\n{\n__int64 v1; // rdx\n__int64 v2; // rbx\n__int64 result; // rax\n__int64 v4; // [rsp+10h] [rbp-20h]\n__int64 v5; // [rsp+18h] [rbp-18h]\n\nv4 = sub_403F0B(*a1, qword_4114F0, qword_4114F8);\nv5 = v1;\nif ( (qword_411340 & 0x200) != 0\n&& qword_414588\n&& (*(_BYTE *)qword_414588 & 1) != 0\n&& qword_4114F8 == *(_QWORD *)(qword_414588 + 32)\n&& (v2 = *(_QWORD *)(qword_414588 + 16), v2 == sub_4058FA(qword_4114F0))\n&& *(_BYTE *)*a1 != 10 )\n{\nsub_403CCF(v4, v5, *a1);\n}\nelse\n{\nsub_403DA1(1LL, qword_4114F0, qword_4114F8, v4, v5, *a1);\nif ( qword_4114F0 != v4 )\n{\nqword_4114E0 = v4;\nqword_4114E8 = v5;\n}\n}\nqword_4114E0 = v4;\nqword_4114E8 = v5;\nqword_4114F0 = v4;\nqword_4114F8 = v5;\nresult = qword_411340 | 0x210;\nqword_411340 |= 0x210uLL;\ndword_414644 = 2;\nreturn result;\n}"}, {"addr": 4206774, "funname": "sub_4030B6", "code": "unsigned __int64 __fastcall sub_4030B6(const char **a1)\n{\nint v1; // eax\nunsigned __int64 result; // rax\n__int64 v3; // [rsp+18h] [rbp-8h]\n\nv1 = atoi(*a1);\nv3 = v1;\nif ( !v1 )\nv3 = 1LL;\nqword_4114F0 = sub_4058A8(v3);\nif ( (unsigned __int64)qword_4114F8 > *(_QWORD *)(qword_4114F0 + 8) )\nqword_4114F8 = *(_QWORD *)(qword_4114F0 + 8);\ndo\n{\nresult = *(unsigned __int8 *)(*(_QWORD *)qword_4114F0 + qword_4114F8);\nif ( (result & 0x80u) == 0LL )\nbreak;\nresult = *(unsigned __int8 *)(*(_QWORD *)qword_4114F0 + qword_4114F8);\nif ( (unsigned __int8)result > 0xBFu )\nbreak;\n++qword_4114F8;\nresult = *(_QWORD *)(qword_4114F0 + 8);\n}\nwhile ( qword_4114F8 < result );\nreturn result;\n}"}, {"addr": 4206999, "funname": "sub_403197", "code": "__int64 sub_403197()\n{\n__int64 result; // rax\n\nresult = qword_4114F0;\nqword_411500 = qword_4114F0;\nqword_411508 = qword_4114F8;\nreturn result;\n}"}, {"addr": 4207038, "funname": "sub_4031BE", "code": "__int64 __fastcall sub_4031BE(__int64 (__fastcall **a1)(__int64, __int64))\n{\n__int64 v1; // rdx\n__int64 result; // rax\n\nqword_4114F0 = (*a1)(qword_4114F0, qword_4114F8);\nqword_4114F8 = v1;\nresult = (unsigned int)sub_409939() ^ 1;\nif ( (_BYTE)result )\n{\nresult = qword_4114F0;\nqword_4114E0 = qword_4114F0;\nqword_4114E8 = qword_4114F8;\n}\nreturn result;\n}"}, {"addr": 4207136, "funname": "sub_403220", "code": "unsigned __int64 __fastcall sub_403220(const char **a1)\n{\nunsigned __int64 result; // rax\n\nqword_4114F8 = atoi(*a1);\nif ( (unsigned __int64)qword_4114F8 > *(_QWORD *)(qword_4114F0 + 8) )\nqword_4114F8 = *(_QWORD *)(qword_4114F0 + 8);\ndo\n{\nresult = *(unsigned __int8 *)(*(_QWORD *)qword_4114F0 + qword_4114F8);\nif ( (result & 0x80u) == 0LL )\nbreak;\nresult = *(unsigned __int8 *)(*(_QWORD *)qword_4114F0 + qword_4114F8);\nif ( (unsigned __int8)result > 0xBFu )\nbreak;\n++qword_4114F8;\nresult = *(_QWORD *)(qword_4114F0 + 8);\n}\nwhile ( qword_4114F8 < result );\nreturn result;\n}"}, {"addr": 4207330, "funname": "sub_4032E2", "code": "__int64 __fastcall sub_4032E2(_QWORD *a1)\n{\n__int64 result; // rax\n\nsub_405B6F(*a1);\nresult = qword_411340 | 0x10;\nqword_411340 |= 0x10uLL;\ndword_414644 = 3;\nreturn result;\n}"}, {"addr": 4207388, "funname": "sub_40331C", "code": "__int64 __fastcall sub_40331C(_QWORD *a1)\n{\n__int64 result; // rax\n__int64 v2; // [rsp+18h] [rbp-8h]\n\nv2 = qword_411340;\nqword_411340 |= 2uLL;\nsub_405B6F(*a1);\nresult = v2;\nqword_411340 = v2;\ndword_414644 = 4;\nreturn result;\n}"}, {"addr": 4207468, "funname": "sub_40336C", "code": "__int64 sub_40336C()\n{\n__int64 result; // rax\n__int64 v1; // [rsp+10h] [rbp-20h] BYREF\n__int64 (__fastcall *v2)(); // [rsp+18h] [rbp-18h] BYREF\nchar *v3; // [rsp+20h] [rbp-10h] BYREF\nchar *v4; // [rsp+28h] [rbp-8h] BYREF\n\nsub_407267(&qword_4114E0, &qword_4114F0);\nresult = (unsigned int)dword_414644;\nif ( dword_414644 == 4 )\n{\nv3 = getenv(name);\nresult = sub_40331C(&v3);\n}\nelse if ( dword_414644 <= 4 )\n{\nif ( dword_414644 == 3 )\n{\nv4 = getenv(name);\nresult = sub_4032E2(&v4);\n}\nelse if ( dword_414644 <= 3 )\n{\nif ( dword_414644 == 1 )\n{\nresult = sub_4098D3();\nif ( (_BYTE)result )\n{\nv2 = sub_40980E;\nresult = sub_402916((__int64 (__fastcall **)(__int64, __int64))&v2);\n}\n}\nelse if ( dword_414644 == 2 )\n{\nresult = qword_414588;\nif ( qword_414588 )\n{\nresult = *(_BYTE *)qword_414588 & 1;\nif ( (*(_BYTE *)qword_414588 & 1) != 0 )\n{\nv1 = *(_QWORD *)(qword_414588 + 40);\nresult = sub_402F3C(&v1);\n}\n}\n}\n}\n}\nreturn result;\n}"}, {"addr": 4208104, "funname": "sub_4035E8", "code": "__int64 __fastcall sub_4035E8(__int64 (__fastcall **a1)(__int64, __int64))\n{\n__int64 v1; // rdx\n__int64 result; // rax\n__int64 v3; // [rsp+10h] [rbp-10h]\n__int64 v4; // [rsp+18h] [rbp-8h]\n\nv3 = qword_4114F0;\nv4 = qword_4114F8;\nqword_4114F0 = (*a1)(qword_4114F0, qword_4114F8);\nqword_4114F8 = v1;\nresult = v3;\nqword_4114E0 = v3;\nqword_4114E8 = v4;\nreturn result;\n}"}, {"addr": 4208481, "funname": "sub_403761", "code": "int sub_403761()\n{\nendwin();\nsignal(18, handler);\nreturn raise(19);\n}"}, {"addr": 4209231, "funname": "sub_403A4F", "code": "__int64 __fastcall sub_403A4F(__int64 *a1)\n{\nchar *v1; // rax\n__int64 v2; // rdx\nint v3; // edx\nchar *v4; // rax\n__int64 result; // rax\n__int64 v6; // [rsp+10h] [rbp-30h] BYREF\n__int64 v7; // [rsp+18h] [rbp-28h]\n__int64 v8; // [rsp+20h] [rbp-20h] BYREF\n__int64 v9; // [rsp+28h] [rbp-18h]\nbool v10; // [rsp+33h] [rbp-Dh]\nint v11; // [rsp+34h] [rbp-Ch]\nchar *v12; // [rsp+38h] [rbp-8h]\n\nv10 = *a1 < 0;\nif ( v10 )\nv1 = (char *)qword_414590;\nelse\nv1 = (char *)qword_414588;\nv12 = v1;\nqword_4114E8 = *((_QWORD *)v1 + 3);\nqword_4114E0 = sub_4058A8(*((_QWORD *)v1 + 1));\nqword_4114F0 = qword_4114E0;\nqword_4114F8 = qword_4114E8;\nwhile ( v12 )\n{\nv9 = *((_QWORD *)v12 + 3);\nv8 = sub_4058A8(*((_QWORD *)v12 + 1));\nv7 = *((_QWORD *)v12 + 4);\nv6 = sub_4058A8(*((_QWORD *)v12 + 2));\nif ( v10 == (*v12 & 1) )\n{\nqword_4114E0 = sub_403F0B(*((_QWORD *)v12 + 5), qword_4114F0, qword_4114F8);\nqword_4114E8 = v2;\nqword_4114F0 = qword_4114E0;\nqword_4114F8 = v2;\n}\nelse\n{\nsub_407267(&v8, &v6);\nsub_4046A1(v8, v9, v6, v7);\nqword_4114E0 = v8;\nqword_4114E8 = v9;\nqword_4114F0 = v8;\nqword_4114F8 = v9;\n}\nif ( v10 )\n{\nqword_414590 = *((_QWORD *)v12 + 6);\n*((_QWORD *)v12 + 6) = qword_414588;\nqword_414588 = (__int64)v12;\n}\nelse\n{\nqword_414588 = *((_QWORD *)v12 + 6);\n*((_QWORD *)v12 + 6) = qword_414590;\nqword_414590 = (__int64)v12;\n}\nv3 = v10 ? 4 : 2;\nif ( (v3 & *v12) == 0 )\nbreak;\nif ( v10 )\nv4 = (char *)qword_414590;\nelse\nv4 = (char *)qword_414588;\nv12 = v4;\n}\nv11 = 0;\nv12 = (char *)qword_414588;\nwhile ( v12 )\n{\nv12 = (char *)*((_QWORD *)v12 + 6);\n++v11;\n}\nif ( v11 == dword_41463C )\n{\nresult = qword_411340 ^ 0x10;\nqword_411340 ^= 0x10uLL;\n}\nelse\n{\nresult = qword_411340 | 0x10;\nqword_411340 |= 0x10uLL;\n}\nreturn result;\n}"}, {"addr": 4209871, "funname": "sub_403CCF", "code": "char *__fastcall sub_403CCF(__int64 a1, __int64 a2, const char *a3)\n{\nchar *result; // rax\n__int64 v4; // rbx\n__int64 v5; // rbx\nsize_t n; // [rsp+20h] [rbp-20h]\nsize_t v8; // [rsp+28h] [rbp-18h]\n\nresult = (char *)qword_414588;\nif ( qword_414588 )\n{\nv8 = strlen(*(const char **)(qword_414588 + 40));\nn = strlen(a3);\nv4 = qword_414588;\n*(_QWORD *)(v4 + 16) = sub_4058FA(a1);\n*(_QWORD *)(qword_414588 + 32) = a2;\nv5 = qword_414588;\n*(_QWORD *)(v5 + 40) = sub_402767(*(void **)(qword_414588 + 40), v8 + n + 1);\nresult = strncat(*(char **)(qword_414588 + 40), a3, n);\n}\nreturn result;\n}"}, {"addr": 4210081, "funname": "sub_403DA1", "code": "char *__fastcall sub_403DA1(unsigned int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, const char *a6)\n{\nchar *result; // rax\n__int64 v7; // rbx\n__int64 v8; // rax\n__int64 v10; // [rsp+0h] [rbp-50h]\nchar *v14; // [rsp+38h] [rbp-18h]\n\nresult = (char *)a1;\nif ( a6 )\n{\nresult = (char *)*(unsigned __int8 *)a6;\nif ( (_BYTE)result )\n{\nif ( qword_414588 && (qword_411340 & 0x200) != 0 )\n{\nv7 = *(_QWORD *)(qword_414588 + 16) - *(_QWORD *)(qword_414588 + 8);\nv8 = sub_4058FA(a4);\nv10 = sub_4058A8(v7 + v8);\nresult = sub_403CCF(v10, a5, a6);\n}\nelse\n{\nif ( qword_414590 )\nsub_40584E(&qword_414590);\nv14 = (char *)sub_402729(1uLL, 0x38uLL);\n*v14 = a1;\n*((_QWORD *)v14 + 1) = sub_4058FA(a2);\n*((_QWORD *)v14 + 2) = sub_4058FA(a4);\n*((_QWORD *)v14 + 3) = a3;\n*((_QWORD *)v14 + 4) = a5;\n*((_QWORD *)v14 + 5) = sub_4027B1(a6);\n*((_QWORD *)v14 + 6) = qword_414588;\nresult = v14;\nqword_414588 = (__int64)v14;\n}\n}\n}\nreturn result;\n}"}, {"addr": 4210443, "funname": "sub_403F0B", "code": "_BYTE *__fastcall sub_403F0B(char *a1, __int64 a2, __int64 a3)\n{\nunsigned __int64 v3; // rax\nunsigned __int64 v4; // rax\nunsigned __int64 v5; // rax\nunsigned __int64 v7; // [rsp+38h] [rbp-38h]\nchar i; // [rsp+47h] [rbp-29h]\n__int64 v9; // [rsp+48h] [rbp-28h]\n__int64 v10; // [rsp+50h] [rbp-20h]\n_BYTE *v12; // [rsp+60h] [rbp-10h]\n_BYTE *v13; // [rsp+68h] [rbp-8h]\n\nv13 = (_BYTE *)a2;\nv12 = 0LL;\nv10 = 0LL;\nv9 = 0LL;\nif ( a2 )\nv3 = *(_QWORD *)(a2 + 16) / (unsigned __int64)dword_414648 + 1;\nelse\nv3 = 1LL;\nv7 = v3;\nfor ( i = *a1; i; i = a1[v10] )\n{\nif ( i == 10 || i == 13 )\n{\nv12 = sub_402729(1uLL, 0x38uLL);\n*(_QWORD *)v12 = sub_402729(1uLL, 0x80uLL);\nv13[32] = 1;\nv12[32] = v13[32];\n*((_QWORD *)v12 + 2) = 0LL;\n*((_QWORD *)v12 + 1) = *((_QWORD *)v12 + 2);\n*((_QWORD *)v12 + 3) = 1LL;\n*((_QWORD *)v12 + 5) = *((_QWORD *)v13 + 5);\n*((_QWORD *)v12 + 6) = v13;\nif ( *((_QWORD *)v13 + 5) )\n*(_QWORD *)(*((_QWORD *)v13 + 5) + 48LL) = v12;\nelse\nqword_4114D0 = (__int64)v12;\n*((_QWORD *)v13 + 5) = v12;\nv13 = v12;\nif ( (unsigned __int64)(v9 + a3) < *(_QWORD *)(*((_QWORD *)v12 + 6) + 8LL) )\n{\nsub_403F0B(**((_QWORD **)v12 + 6) + a3 + v9, v12, 0LL);\n*(_QWORD *)(*((_QWORD *)v12 + 6) + 8LL) = a3 + v9;\n*(_BYTE *)(a3 + v9 + **((_QWORD **)v12 + 6)) = 0;\n}\nsub_4043D3(*((_QWORD *)v12 + 6));\nv9 = 0LL;\na3 = 0LL;\n}\nelse\n{\nif ( (unsigned __int64)(*((_QWORD *)v13 + 1) + 2LL) >= *((_QWORD *)v13 + 3) << 7 )\n*(_QWORD *)v13 = sub_402767(*(void **)v13, ++*((_QWORD *)v13 + 3) << 7);\nmemmove(\n(void *)(*(_QWORD *)v13 + v9 + a3 + 1),\n(const void *)(*(_QWORD *)v13 + v9 + a3),\n*((_QWORD *)v13 + 1) - (v9 + a3) + 1);\n*(_BYTE *)(*(_QWORD *)v13 + v9 + a3) = i;\nv13[32] = 1;\nv4 = *((_QWORD *)v13 + 1);\n*((_QWORD *)v13 + 1) = v4 + 1;\nif ( v9 + a3 >= v4 )\n*(_BYTE *)(*(_QWORD *)v13 + v9 + a3 + 1) = 0;\n++v9;\n}\n++v10;\n}\nsub_4043D3(v13);\nif ( v12 || (!a2 ? (v5 = 1LL) : (v5 = *(_QWORD *)(a2 + 16) / (unsigned __int64)dword_414648 + 1), v5 != v7) )\nqword_411340 |= 0x40uLL;\nreturn v13;\n}"}, {"addr": 4211397, "funname": "sub_4042C5", "code": "unsigned __int64 __fastcall sub_4042C5(_QWORD *a1, int a2)\n{\nunsigned __int64 result; // rax\nint v3; // [rsp+0h] [rbp-1Ch]\nint v4; // [rsp+18h] [rbp-4h]\n\nv3 = a2;\nv4 = *(_QWORD *)(*a1 + 8LL) - a1[1];\nif ( a2 > v4 )\n{\nwhile ( v3 > v4 && *(_QWORD *)(*a1 + 40LL) )\n{\n*a1 = *(_QWORD *)(*a1 + 40LL);\nv3 -= v4 + 1;\nv4 = *(_QWORD *)(*a1 + 8LL);\n}\n}\nelse\n{\nv3 = a1[1] + a2;\n}\na1[1] = v3;\ndo\n{\nresult = *(unsigned __int8 *)(*(_QWORD *)*a1 + a1[1]);\nif ( (result & 0x80u) == 0LL )\nbreak;\nresult = *(unsigned __int8 *)(*(_QWORD *)*a1 + a1[1]);\nif ( (unsigned __int8)result > 0xBFu )\nbreak;\n++a1[1];\nresult = *(_QWORD *)(*a1 + 8LL);\n}\nwhile ( a1[1] < result );\nreturn result;\n}"}, {"addr": 4211667, "funname": "sub_4043D3", "code": "unsigned __int64 __fastcall sub_4043D3(_QWORD *a1)\n{\nunsigned __int64 v1; // rax\nunsigned __int64 result; // rax\nunsigned __int64 i; // [rsp+10h] [rbp-8h]\n\na1[2] = 0LL;\nfor ( i = 0LL; ; ++i )\n{\nresult = a1[1];\nif ( i >= result )\nbreak;\nif ( *(_BYTE *)(*a1 + i) == 9 )\n{\nv1 = dword_41134C - a1[2] % (unsigned __int64)dword_41134C;\n}\nelse if ( *(_BYTE *)(*a1 + i) <= 0x1Fu || *(_BYTE *)(*a1 + i) == 127 )\n{\nv1 = 2LL;\n}\nelse\n{\nLODWORD(v1) = *(char *)(*a1 + i) >= 0 || *(_BYTE *)(*a1 + i) > 0xBFu;\nv1 = (int)v1;\n}\na1[2] += v1;\n}\nreturn result;\n}"}, {"addr": 4211924, "funname": "sub_4044D4", "code": "void __fastcall __noreturn sub_4044D4(int a1)\n{\nint v1; // eax\nunsigned int i; // [rsp+1Ch] [rbp-4h]\nunsigned int j; // [rsp+1Ch] [rbp-4h]\nunsigned int k; // [rsp+1Ch] [rbp-4h]\n\nsub_40584E(&qword_414588);\nsub_40584E(&qword_414590);\nclose(fd);\nunlink(&file);\nfree(ptr);\nfor ( i = 0; i <= 0xE; ++i )\nregfree(*(&qword_414680 + i));\nfor ( j = 0; j <= 6; ++j )\nregfree(*(&preg + j));\nif ( dword_411338 >= 0 )\n{\nfor ( k = 0; k <= 7; ++k )\nregfree(*(&(&qword_414740)[8 * dword_411338] + k));\n}\nregfree(qword_411510);\nregfree(qword_411518);\nendwin();\nif ( a1 <= 0 )\nv1 = (unsigned __int8)sub_40987C();\nelse\nv1 = a1 + 128;\nexit(v1);\n}"}, {"addr": 4212196, "funname": "sub_4045E4", "code": "void __fastcall __noreturn sub_4045E4(const char *a1)\n{\nreset_shell_mode();\nfputs(a1, stderr);\nexit(1);\n}"}, {"addr": 4212245, "funname": "sub_404615", "code": "__int64 __fastcall sub_404615(__int64 a1, __int64 a2)\n{\n__int64 result; // rax\nbool v3; // [rsp+17h] [rbp-9h]\n__int64 i; // [rsp+18h] [rbp-8h]\n\nv3 = 0;\nresult = qword_4114C8;\nfor ( i = qword_4114C8; i; i = result )\n{\nif ( v3 && (i == a1 || i == a2) )\n{\nresult = i;\n*(_BYTE *)(i + 32) = 1;\nreturn result;\n}\nif ( i == a1 || i == a2 )\nv3 = !v3;\nif ( v3 )\n*(_BYTE *)(i + 32) = 1;\nresult = *(_QWORD *)(i + 40);\n}\nreturn result;\n}"}, {"addr": 4212385, "funname": "sub_4046A1", "code": "__int64 __fastcall sub_4046A1(__int64 a1, unsigned __int64 a2, void **a3, unsigned __int64 a4)\n{\nbool v4; // al\nunsigned __int64 v5; // rax\nunsigned __int64 v6; // rax\nunsigned __int8 v10; // [rsp+2Fh] [rbp-11h]\n__int64 v11; // [rsp+30h] [rbp-10h]\nvoid **ptr; // [rsp+38h] [rbp-8h]\n\nptr = 0LL;\nv11 = 1LL;\nv10 = 1;\nif ( a1 == qword_4114E0 )\n{\nv4 = qword_4114E8 <= a2 || (void **)a1 == a3 && qword_4114E8 > a4;\nv10 = v4;\n}\nif ( (void **)a1 == a3 )\n{\nif ( a1 )\nv5 = *(_QWORD *)(a1 + 16) / (unsigned __int64)dword_414648 + 1;\nelse\nv5 = 1LL;\nv11 = v5;\nmemmove((void *)(*(_QWORD *)a1 + a2), (const void *)(a4 + *(_QWORD *)a1), *(_QWORD *)(a1 + 8) - a4);\n*(_BYTE *)(a1 + 32) = 1;\n*(_QWORD *)(a1 + 8) += a2 - a4;\n*(_BYTE *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8)) = 0;\nsub_4043D3((_QWORD *)a1);\n}\nelse\n{\n*(_QWORD *)(a1 + 8) = a2;\n*(_BYTE *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8)) = 0;\n*(_BYTE *)(a1 + 32) = 1;\nwhile ( ptr != a3 )\n{\nif ( a3 == *(void ***)(a1 + 40) )\nsub_403F0B((char *)(**(_QWORD **)(a1 + 40) + a4), a1, a2);\nif ( *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40LL) )\n*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40LL) + 48LL) = a1;\nptr = *(void ***)(a1 + 40);\n*(_QWORD *)(a1 + 40) = ptr[5];\nif ( ptr == (void **)qword_4114D8 )\nqword_4114D8 = (__int64)ptr[6];\nif ( ptr == (void **)qword_4114D0 )\nqword_4114D0 = (__int64)ptr[6];\nif ( ptr == (void **)qword_4114E0 )\nv10 = 0;\nfree(*ptr);\nfree(ptr);\n}\n}\nif ( ptr || (!a1 ? (v6 = 1LL) : (v6 = *(_QWORD *)(a1 + 16) / (unsigned __int64)dword_414648 + 1), v6 != v11) )\nqword_411340 |= 0x40uLL;\nreturn v10;\n}"}, {"addr": 4213095, "funname": "sub_404967", "code": "__int64 __fastcall sub_404967(__int64 a1)\n{\nint i; // [rsp+1Ch] [rbp-4h]\n\nfor ( i = 0; *(_QWORD *)(8LL * i + a1); ++i )\n{\nif ( (*(unsigned __int8 (**)(void))(8LL * i + a1))() != 1 )\nreturn 0LL;\n}\nreturn 1LL;\n}"}, {"addr": 4213194, "funname": "sub_4049CA", "code": "__int16 __fastcall sub_4049CA(__int64 a1, unsigned int a2)\n{\n__int64 v2; // rax\n__int64 v3; // rax\n__int64 v4; // rax\n__int64 v5; // rax\n__int64 v6; // rax\nunsigned int j; // [rsp+14h] [rbp-Ch]\nunsigned int v9; // [rsp+18h] [rbp-8h]\nunsigned int i; // [rsp+1Ch] [rbp-4h]\n\nfor ( i = 0; ; ++i )\n{\nLOWORD(v4) = i;\nif ( i >= a2 )\nbreak;\nif ( (56LL * i + a1 && !memcmp(&byte_411528, (const void *)(56LL * i + a1), 6uLL)\n|| *(_DWORD *)(56LL * i + a1) && *(_DWORD *)(56LL * i + a1) == dword_411524)\n&& (unsigned __int8)sub_404967(56LL * i + a1 + 8) )\n{\nif ( *(__int64 (__fastcall **)(_QWORD *))(56LL * i + a1 + 40) != sub_402F3C )\n{\nv2 = qword_411340;\nBYTE1(v2) = BYTE1(qword_411340) & 0xFD;\nqword_411340 = v2;\n}\nif ( (unsigned __int8)sub_40990E() )\n{\nif ( *(_QWORD *)(56LL * i + a1 + 40) == qword_414658 )\n{\nqword_414660 = (__int64)sub_40906D;\nsub_405ACD(qword_414658, sub_40906D);\nv3 = qword_411340;\nBYTE1(v3) = BYTE1(qword_411340) & 0xDF;\nqword_411340 = v3;\n}\nelse if ( *(__int64 (__fastcall **)(__int64 *))(56LL * i + a1 + 40) != sub_4027E4 )\n{\nv4 = qword_411340;\nBYTE1(v4) = BYTE1(qword_411340) & 0xDF;\nqword_411340 = v4;\nreturn v4;\n}\n}\nelse if ( *(__int64 (__fastcall **)())(56LL * i + a1 + 48) == sub_4096D1 )\n{\nv4 = qword_411340;\nBYTE1(v4) = BYTE1(qword_411340) | 0x20;\nqword_411340 = v4;\nqword_414658 = *(_QWORD *)(56LL * i + a1 + 40);\nqword_414660 = *(_QWORD *)(56LL * i + a1 + 48);\nLOWORD(v4) = i;\ndword_414668 = i;\nreturn v4;\n}\nif ( (qword_411340 & 0x4000) != 0 )\n{\nv5 = qword_411340;\nBYTE1(v5) = BYTE1(qword_411340) & 0xBF;\nqword_411340 = v5;\nLOWORD(v4) = sub_405ACD(qword_414658, &byte_411528);\nreturn v4;\n}\nif ( *(__int64 (__fastcall **)())(56LL * i + a1 + 48) == sub_409609 )\n{\nv6 = qword_411340;\nBYTE1(v6) = BYTE1(qword_411340) | 0x40;\nqword_411340 = v6;\nv4 = *(_QWORD *)(56LL * i + a1 + 40);\nqword_414658 = v4;\nreturn v4;\n}\nsub_405ACD(*(_QWORD *)(56LL * i + a1 + 40), *(_QWORD *)(56LL * i + a1 + 48));\nif ( (unsigned __int8)sub_40990E() && *(__int64 (__fastcall **)(__int64 *))(56LL * i + a1 + 40) == sub_4027E4 )\nv9 = dword_414668;\nelse\nv9 = i;\nLOWORD(v4) = v9 + 1;\nif ( a2 <= v9 + 1 )\nreturn v4;\nif ( !(56LL * (v9 + 1) + a1)\n|| (LODWORD(v4) = memcmp((const void *)(56LL * (v9 + 1) + a1), (const void *)(56LL * v9 + a1), 6uLL), (_DWORD)v4) )\n{\nLODWORD(v4) = *(_DWORD *)(56LL * (v9 + 1) + a1);\nif ( !(_DWORD)v4 )\nreturn v4;\nLODWORD(v4) = *(_DWORD *)(56LL * i + a1);\nif ( *(_DWORD *)(56LL * (v9 + 1) + a1) != (_DWORD)v4 )\nreturn v4;\n}\nfor ( j = 0; j <= 3; ++j )\n{\nv4 = *(_QWORD *)(a1 + 56LL * (v9 + 1) + 8LL * j + 8);\nif ( *(_QWORD *)(a1 + 56LL * v9 + 8LL * j + 8) != v4 )\nbreak;\n}\nif ( j != 4 )\nreturn v4;\n}\n}\nreturn v4;\n}"}, {"addr": 4215887, "funname": "sub_40544F", "code": "void __fastcall sub_40544F(char a1)\n{\nregmatch_t v1; // [rsp+18h] [rbp-58h] BYREF\n__int64 v2; // [rsp+20h] [rbp-50h]\n__int64 v3; // [rsp+28h] [rbp-48h]\n__int64 v4; // [rsp+30h] [rbp-40h]\n__int64 v5; // [rsp+38h] [rbp-38h]\nint eflags; // [rsp+50h] [rbp-20h]\nint v8; // [rsp+54h] [rbp-1Ch]\nint v9; // [rsp+58h] [rbp-18h]\nint i; // [rsp+5Ch] [rbp-14h]\nchar *j; // [rsp+60h] [rbp-10h]\nchar *string; // [rsp+68h] [rbp-8h]\n\nv4 = qword_4114C8;\nv5 = 0LL;\nv2 = qword_4114D0;\nv3 = *(_QWORD *)(qword_4114D0 + 8);\nsub_407267(&qword_4114E0, &qword_4114F0);\nfor ( i = 0; i <= 1; ++i )\n{\nif ( i <= 0 )\n{\nif ( a1 )\nstring = (char *)sub_4056B5(qword_4114F0, qword_4114F8, v2, v3);\nelse\nstring = (char *)sub_4056B5(v4, v5, qword_4114E0, qword_4114E8);\n}\nelse\n{\nstring = (char *)sub_4056B5(v4, v5, v2, v3);\n}\neflags = 0;\nif ( a1 && qword_4114F8 )\n{\neflags = 1;\n}\nelse if ( a1 != 1 && qword_4114E8 != *(_QWORD *)(qword_4114E0 + 8) )\n{\neflags = 2;\n}\nif ( !regexec(*(&qword_411510 + dword_411520), string, 1uLL, &v1, eflags) )\n{\nsub_403197(0LL);\nif ( i > 0 || a1 != 1 )\n{\nqword_4114F0 = v4;\nqword_4114F8 = v5;\n}\nqword_4114E0 = qword_4114F0;\nqword_4114E8 = qword_4114F8;\nv9 = v1.rm_so;\nv8 = v1.rm_eo;\nif ( a1 != 1 )\n{\nfor ( j = &string[v8]; !regexec(*(&qword_411510 + dword_411520), j, 1uLL, &v1, 1) && v1.rm_eo; j = &string[v8] )\n{\nv9 = v1.rm_so + v8;\nv8 += v1.rm_eo;\n}\n}\nsub_4042C5(&qword_4114E0, v9);\nsub_4042C5(&qword_4114F0, v8);\n++i;\n}\nfree(string);\n}\n}"}, {"addr": 4216501, "funname": "sub_4056B5", "code": "_BYTE *__fastcall sub_4056B5(_QWORD *a1, __int64 a2, _QWORD *a3, __int64 a4)\n{\n__int64 v4; // rax\n__int64 v5; // rdx\n__int64 v6; // rax\n__int64 v7; // rcx\nsize_t v8; // rdx\n__int64 v9; // rax\n__int64 v10; // rax\n__int64 v11; // rdx\n__int64 v12; // rax\n_BYTE *v16; // [rsp+28h] [rbp-18h]\nsize_t v17; // [rsp+30h] [rbp-10h]\n__int64 v18; // [rsp+30h] [rbp-10h]\n_QWORD *i; // [rsp+38h] [rbp-8h]\n_QWORD *v20; // [rsp+38h] [rbp-8h]\n\nv17 = 1LL;\nfor ( i = a1; i != (_QWORD *)a3[5]; i = (_QWORD *)i[5] )\n{\nif ( i == a3 )\nv4 = a4 + 1;\nelse\nv4 = i[1] + 1LL;\nif ( i == a1 )\nv5 = a2;\nelse\nv5 = 0LL;\nv17 += v4 - v5;\n}\nv16 = sub_402729(1uLL, v17);\nv20 = a1;\nv18 = 0LL;\nwhile ( v20 != (_QWORD *)a3[5] )\n{\nif ( v20 == a3 )\nv6 = a4;\nelse\nv6 = v20[1];\nif ( v20 == a1 )\nv7 = a2;\nelse\nv7 = 0LL;\nv8 = v6 - v7;\nif ( v20 == a1 )\nv9 = a2;\nelse\nv9 = 0LL;\nmemcpy(&v16[v18], (const void *)(v9 + *v20), v8);\nif ( v20 == a3 )\nv10 = a4;\nelse\nv10 = v20[1];\nif ( v20 == a1 )\nv11 = a2;\nelse\nv11 = 0LL;\nv18 += v10 - v11;\nif ( v20 != a3 )\n{\nv12 = v18++;\nv16[v12] = 10;\n}\nv20 = (_QWORD *)v20[5];\n}\nreturn v16;\n}"}, {"addr": 4216910, "funname": "sub_40584E", "code": "void *__fastcall sub_40584E(void **a1)\n{\nvoid *result; // rax\nvoid *v2; // [rsp+18h] [rbp-8h]\n\nwhile ( 1 )\n{\nresult = *a1;\nif ( !*a1 )\nbreak;\nv2 = (void *)*((_QWORD *)*a1 + 6);\nfree(*((void **)*a1 + 5));\nfree(*a1);\n*a1 = v2;\n}\nreturn result;\n}"}, {"addr": 4217000, "funname": "sub_4058A8", "code": "__int64 __fastcall sub_4058A8(__int64 a1)\n{\n__int64 v2; // [rsp+8h] [rbp-10h]\n__int64 v3; // [rsp+10h] [rbp-8h]\n\nv3 = 1LL;\nv2 = qword_4114C8;\nwhile ( v3 != a1 && v2 && *(_QWORD *)(v2 + 40) )\n{\nv2 = *(_QWORD *)(v2 + 40);\n++v3;\n}\nreturn v2;\n}"}, {"addr": 4217082, "funname": "sub_4058FA", "code": "__int64 __fastcall sub_4058FA(__int64 a1)\n{\n__int64 i; // [rsp+8h] [rbp-10h]\n__int64 v3; // [rsp+10h] [rbp-8h]\n\nv3 = 1LL;\nfor ( i = qword_4114C8; i != a1; i = *(_QWORD *)(i + 40) )\n++v3;\nreturn v3;\n}"}, {"addr": 4217144, "funname": "sub_405938", "code": "int sub_405938()\n{\n__int64 v0; // rax\n__int64 v1; // rdx\n__int64 v3; // [rsp+0h] [rbp-30h]\nMEVENT v4; // [rsp+10h] [rbp-20h] BYREF\nunsigned int i; // [rsp+2Ch] [rbp-4h]\n\nLODWORD(v0) = getmouse(&v4);\nif ( (_DWORD)v0 != -1 )\n{\nLOBYTE(v0) = wmouse_trafo(qword_414580, &v4.y, &v4.x, 0);\nLODWORD(v0) = v0 ^ 1;\nif ( !(_BYTE)v0 )\n{\nfor ( i = 0; i <= 6; ++i )\n{\nLODWORD(v0) = v4.bstate & dword_40CD20[12 * i];\nif ( (_DWORD)v0 )\n{\nv3 = sub_406A34((unsigned int)v4.x, (unsigned int)v4.y);\nif ( LOBYTE(dword_40CD20[12 * i + 1]) )\n{\nqword_4114F0 = v3;\nqword_4114F8 = v1;\n}\nif ( BYTE1(dword_40CD20[12 * i + 1]) )\n{\nqword_4114E0 = v3;\nqword_4114E8 = v1;\n}\nLODWORD(v0) = sub_404967(48LL * i + 4246824);\nif ( (_BYTE)v0 )\n{\nv0 = *(_QWORD *)&dword_40CD20[12 * i + 8];\nif ( v0 )\nLODWORD(v0) = (*(__int64 (__fastcall **)(__int64))&dword_40CD20[12 * i + 8])(48LL * i + 4246856);\nreturn v0;\n}\n}\n}\n}\n}\nreturn v0;\n}"}, {"addr": 4217549, "funname": "sub_405ACD", "code": "__int16 __fastcall sub_405ACD(void (__fastcall *a1)(__int64 *), __int64 a2)\n{\n__int64 v2; // rax\n__int64 v3; // rax\n__int64 v4; // rax\n__int64 v6; // [rsp+0h] [rbp-20h] BYREF\nvoid (__fastcall *v7)(__int64 *); // [rsp+8h] [rbp-18h]\nint i; // [rsp+1Ch] [rbp-4h]\n\nv7 = a1;\nv6 = a2;\nif ( (qword_411340 & 0x8000) != 0 )\n{\nv7(&v6);\nv2 = qword_411340;\nBYTE1(v2) = BYTE1(qword_411340) | 2;\nqword_411340 = v2;\nfor ( i = 1; i < dword_411348; ++i )\nv7(&v6);\nv3 = qword_411340;\nBYTE1(v3) = BYTE1(qword_411340) & 0xFD;\nqword_411340 = v3;\nv4 = qword_411340;\nBYTE1(v4) = BYTE1(qword_411340) & 0x7F;\nqword_411340 = v4;\ndword_411348 = 1;\n}\nelse\n{\nLOWORD(v4) = ((__int64 (__fastcall *)(__int64 *))v7)(&v6);\n}\nreturn v4;\n}"}, {"addr": 4221315, "funname": "sub_406983", "code": "int sub_406983()\n{\nchar *v0; // rax\n__int16 v2[4]; // [rsp+8h] [rbp-18h] BYREF\nint v3; // [rsp+10h] [rbp-10h]\nint fd; // [rsp+14h] [rbp-Ch]\nchar *file; // [rsp+18h] [rbp-8h]\n\nv0 = ttyname(0);\nfile = v0;\nif ( v0 )\n{\nLODWORD(v0) = open(file, 2);\nfd = (int)v0;\nif ( (_DWORD)v0 != -1 )\n{\nv3 = ioctl(fd, 0x5413uLL, v2);\nLODWORD(v0) = close(fd);\nif ( v3 != -1 )\n{\ndword_414648 = (unsigned __int16)v2[1];\ndword_41464C = (unsigned __int16)v2[0];\nendwin();\ndoupdate();\nsub_407359();\nLODWORD(v0) = qword_411340 | 0x20;\nqword_411340 |= 0x20uLL;\n}\n}\n}\nreturn (int)v0;\n}"}, {"addr": 4221492, "funname": "sub_406A34", "code": "__int64 __fastcall sub_406A34(int a1, int a2)\n{\nint v2; // eax\n__int64 v4; // [rsp+8h] [rbp-30h]\n__int64 v5; // [rsp+10h] [rbp-28h]\nint v6; // [rsp+20h] [rbp-18h]\nint v7; // [rsp+24h] [rbp-14h]\nint j; // [rsp+28h] [rbp-10h]\nint i; // [rsp+2Ch] [rbp-Ch]\n_QWORD *v10; // [rsp+30h] [rbp-8h]\n\nv4 = qword_4114D0;\nv10 = (_QWORD *)qword_4114D8;\nfor ( i = 0; v10 && i < dword_41464C - (qword_414578 != 0LL); i += v6 )\n{\nv6 = v10[2] / (unsigned __int64)dword_414648 + 1;\nv7 = 0;\nfor ( j = 0; j < (int)(v10[2] / (unsigned __int64)dword_414648 + 1) && i + j < dword_41464C - (qword_414578 != 0LL); ++j )\n{\nif ( a2 == i + j )\n{\nv4 = (__int64)v10;\nv5 = 0LL;\nwhile ( a1 > v7 % dword_414648 || j > v7 / dword_414648 )\n{\nif ( *(_BYTE *)(*v10 + v5) == 9 )\n{\nv2 = dword_41134C - v7 % dword_41134C;\n}\nelse if ( *(_BYTE *)(*v10 + v5) <= 0x1Fu || *(_BYTE *)(*v10 + v5) == 127 )\n{\nv2 = 2;\n}\nelse\n{\nv2 = *(char *)(*v10 + v5) >= 0 || *(_BYTE *)(*v10 + v5) > 0xBFu;\n}\nv7 += v2;\n++v5;\n}\nbreak;\n}\n}\nv10 = (_QWORD *)v10[5];\n}\nreturn v4;\n}"}, {"addr": 4222031, "funname": "sub_406C4F", "code": "__int64 __fastcall sub_406C4F(const char *a1)\n{\nint cflags; // [rsp+1Ch] [rbp-4h]\n\nif ( !a1 )\nreturn 1LL;\ncflags = 5;\nif ( (qword_411340 & 8) != 0 )\ncflags = 7;\nif ( regcomp(*(&qword_411510 + (dword_411520 ^ 1)), a1, cflags) )\nreturn 0LL;\ndword_411520 ^= 1u;\nsetenv(off_411300, a1, 1);\nreturn 1LL;\n}"}, {"addr": 4223546, "funname": "sub_40723A", "code": "void sub_40723A()\n{\n__int64 v0; // rax\n\nv0 = qword_411340;\nLOBYTE(v0) = qword_411340 | 0x80;\nqword_411340 = v0;\n}"}, {"addr": 4223572, "funname": "handler", "code": "void handler()\n{\nsub_406983();\n}"}, {"addr": 4223591, "funname": "sub_407267", "code": "__int64 __fastcall sub_407267(__int64 *a1, __int64 *a2)\n{\n__int64 result; // rax\n__int64 v3; // rdx\n__int64 i; // [rsp+10h] [rbp-10h]\n__int64 v5; // [rsp+10h] [rbp-10h]\n__int64 v6; // [rsp+18h] [rbp-8h]\n\nfor ( i = qword_4114C8; ; i = *(_QWORD *)(i + 40) )\n{\nresult = i;\nif ( !i )\nbreak;\nif ( i == *a1 || i == *a2 )\n{\nif ( i == *a1 && i == *a2 && a2[1] < (unsigned __int64)a1[1]\n|| (result = *a2, i == *a2) && (result = *a1, i != *a1) )\n{\nv5 = *a1;\nv6 = a1[1];\nv3 = a2[1];\n*a1 = *a2;\na1[1] = v3;\nresult = v5;\n*a2 = v5;\na2[1] = v6;\n}\nreturn result;\n}\n}\nreturn result;\n}"}, {"addr": 4229202, "funname": "sub_408852", "code": "__int64 sub_408852()\n{\nreturn qword_4114C8;\n}"}, {"addr": 4229252, "funname": "sub_408884", "code": "__int64 __fastcall sub_408884(__int64 a1)\n{\nreturn a1;\n}"}, {"addr": 4229291, "funname": "sub_4088AB", "code": "_QWORD *__fastcall sub_4088AB(_QWORD *a1)\n{\nunsigned __int64 v2; // [rsp+18h] [rbp-8h]\n\nv2 = 0LL;\ndo\n{\nif ( *(_BYTE *)(*a1 + v2) != 32 && *(_BYTE *)(*a1 + v2) != 9 && *(_BYTE *)(*a1 + v2) )\nbreak;\n++v2;\n}\nwhile ( v2 < a1[1] );\nreturn a1;\n}"}, {"addr": 4229469, "funname": "sub_40895D", "code": "__int64 sub_40895D()\n{\nreturn qword_4114D0;\n}"}, {"addr": 4229523, "funname": "sub_408993", "code": "__int64 __fastcall sub_408993(__int64 a1)\n{\nreturn a1;\n}"}, {"addr": 4229566, "funname": "sub_4089BE", "code": "_QWORD *__fastcall sub_4089BE(_QWORD *a1, unsigned __int64 a2)\n{\n_QWORD *v3; // [rsp+0h] [rbp-10h]\nunsigned __int64 v4; // [rsp+8h] [rbp-8h]\n\nv3 = a1;\nif ( a2 >= a1[1] )\n{\nif ( a1[5] )\nv3 = (_QWORD *)a1[5];\n}\nelse\n{\nv4 = a2 + 1;\ndo\n{\nif ( *(char *)(*a1 + v4) >= 0 )\nbreak;\nif ( *(_BYTE *)(*a1 + v4) > 0xBFu )\nbreak;\n++v4;\n}\nwhile ( v4 < a1[1] );\n}\nreturn v3;\n}"}, {"addr": 4229751, "funname": "sub_408A77", "code": "_QWORD *__fastcall sub_408A77(_QWORD *a1, __int64 a2)\n{\n_QWORD *v3; // [rsp+0h] [rbp-10h]\n__int64 v4; // [rsp+8h] [rbp-8h]\n\nv3 = a1;\nif ( a2 )\n{\nv4 = a2 - 1;\ndo\n{\nif ( *(char *)(*a1 + v4) >= 0 )\nbreak;\nif ( *(_BYTE *)(*a1 + v4) > 0xBFu )\nbreak;\n--v4;\n}\nwhile ( v4 );\n}\nelse if ( a1[6] )\n{\nv3 = (_QWORD *)a1[6];\n}\nreturn v3;\n}"}, {"addr": 4229924, "funname": "sub_408B24", "code": "_QWORD *__fastcall sub_408B24(_QWORD *a1, unsigned __int64 a2)\n{\nunsigned __int64 v2; // rdx\nunsigned __int64 v3; // rdx\nunsigned __int64 v4; // rdx\n_QWORD *v6; // [rsp+0h] [rbp-20h]\nunsigned __int64 v7; // [rsp+8h] [rbp-18h]\n_QWORD *v8; // [rsp+10h] [rbp-10h]\n_QWORD *v9; // [rsp+10h] [rbp-10h]\nunsigned __int64 i; // [rsp+18h] [rbp-8h]\nunsigned __int64 v11; // [rsp+18h] [rbp-8h]\n\nv6 = a1;\nv7 = a2;\nv8 = sub_4089BE(a1, a2);\nfor ( i = v2;\n(i != v7 || v8 != v6)\n&& *(char *)(*v6 + v7) >= 0\n&& (*(char *)(*v6 + v7) <= 47\n|| *(char *)(*v6 + v7) > 57 && *(char *)(*v6 + v7) <= 64\n|| *(char *)(*v6 + v7) > 90 && *(char *)(*v6 + v7) <= 94\n|| *(_BYTE *)(*v6 + v7) == 96\n|| *(char *)(*v6 + v7) > 122);\ni = v3 )\n{\nv6 = v8;\nv7 = i;\nv8 = sub_4089BE(v8, i);\n}\ndo\n{\nv9 = v6;\nv11 = v7;\nv6 = sub_4089BE(v6, v7);\nv7 = v4;\n}\nwhile ( (v11 != v4 || v9 != v6)\n&& (*(char *)(*v6 + v4) < 0\n|| *(char *)(*v6 + v4) > 47\n&& (*(char *)(*v6 + v4) <= 57 || *(char *)(*v6 + v4) > 64)\n&& (*(char *)(*v6 + v4) <= 90 || *(char *)(*v6 + v4) > 94)\n&& *(_BYTE *)(*v6 + v4) != 96\n&& *(char *)(*v6 + v4) <= 122) );\nreturn v6;\n}"}, {"addr": 4230498, "funname": "sub_408D62", "code": "_QWORD *__fastcall sub_408D62(_QWORD *a1, __int64 a2)\n{\n__int64 v2; // rdx\n__int64 v3; // rdx\n__int64 v4; // rdx\n_QWORD *v6; // [rsp+0h] [rbp-20h]\n__int64 v7; // [rsp+8h] [rbp-18h]\n_QWORD *v8; // [rsp+10h] [rbp-10h]\n_QWORD *v9; // [rsp+10h] [rbp-10h]\n__int64 v10; // [rsp+18h] [rbp-8h]\n__int64 v11; // [rsp+18h] [rbp-8h]\n\nv6 = a1;\nv7 = a2;\nv8 = sub_408A77(a1, a2);\nv10 = v2;\nif ( *(char *)(*a1 + a2) >= 0\n&& (*(char *)(*a1 + a2) <= 47\n|| *(char *)(*a1 + a2) > 57 && *(char *)(*a1 + a2) <= 64\n|| *(char *)(*a1 + a2) > 90 && *(char *)(*a1 + a2) <= 94\n|| *(_BYTE *)(*a1 + a2) == 96\n|| *(char *)(*a1 + a2) > 122) )\n{\nwhile ( (v10 != v7 || v8 != v6)\n&& *(char *)(*v6 + v7) >= 0\n&& (*(char *)(*v6 + v7) <= 47\n|| *(char *)(*v6 + v7) > 57 && *(char *)(*v6 + v7) <= 64\n|| *(char *)(*v6 + v7) > 90 && *(char *)(*v6 + v7) <= 94\n|| *(_BYTE *)(*v6 + v7) == 96\n|| *(char *)(*v6 + v7) > 122) )\n{\nv6 = v8;\nv7 = v10;\nv8 = sub_408A77(v8, v10);\nv10 = v3;\n}\n}\nelse\n{\nv6 = v8;\nv7 = v2;\n}\ndo\n{\nv9 = v6;\nv11 = v7;\nv6 = sub_408A77(v6, v7);\nv7 = v4;\n}\nwhile ( (v11 != v4 || v9 != v6)\n&& (*(char *)(*v6 + v4) < 0\n|| *(char *)(*v6 + v4) > 47\n&& (*(char *)(*v6 + v4) <= 57 || *(char *)(*v6 + v4) > 64)\n&& (*(char *)(*v6 + v4) <= 90 || *(char *)(*v6 + v4) > 94)\n&& *(_BYTE *)(*v6 + v4) != 96\n&& *(char *)(*v6 + v4) <= 122) );\nreturn v9;\n}"}, {"addr": 4231277, "funname": "sub_40906D", "code": "_QWORD *__fastcall sub_40906D(_QWORD *a1, unsigned __int64 a2)\n{\nunsigned __int64 v2; // rax\nunsigned __int64 v3; // rax\n_QWORD *v5; // [rsp+0h] [rbp-20h]\nunsigned __int64 i; // [rsp+8h] [rbp-18h]\nunsigned __int64 v7; // [rsp+10h] [rbp-10h]\nunsigned __int64 v8; // [rsp+10h] [rbp-10h]\nunsigned __int64 v9; // [rsp+18h] [rbp-8h]\n\nv5 = a1;\nv7 = 0LL;\nv9 = 0LL;\nwhile ( v7 < a2 )\n{\nif ( *(_BYTE *)(*a1 + v7) == 9 )\n{\nv2 = dword_41134C - v9 % dword_41134C;\n}\nelse if ( *(_BYTE *)(*a1 + v7) <= 0x1Fu || *(_BYTE *)(*a1 + v7) == 127 )\n{\nv2 = 2LL;\n}\nelse\n{\nLODWORD(v2) = *(char *)(*a1 + v7) >= 0 || *(_BYTE *)(*a1 + v7) > 0xBFu;\nv2 = (int)v2;\n}\nv9 += v2;\n++v7;\n}\nif ( a1[5] )\n{\nv5 = (_QWORD *)a1[5];\nv8 = 0LL;\nfor ( i = 0LL; v8 < v9 && i < v5[1]; ++i )\n{\nif ( *(_BYTE *)(*v5 + i) == 9 )\n{\nv3 = dword_41134C - v8 % dword_41134C;\n}\nelse if ( *(_BYTE *)(*v5 + i) <= 0x1Fu || *(_BYTE *)(*v5 + i) == 127 )\n{\nv3 = 2LL;\n}\nelse\n{\nLODWORD(v3) = *(char *)(*v5 + i) >= 0 || *(_BYTE *)(*v5 + i) > 0xBFu;\nv3 = (int)v3;\n}\nv8 += v3;\n}\ndo\n{\nif ( *(char *)(*v5 + i) >= 0 )\nbreak;\nif ( *(_BYTE *)(*v5 + i) > 0xBFu )\nbreak;\n++i;\n}\nwhile ( i < v5[1] );\n}\nreturn v5;\n}"}, {"addr": 4231899, "funname": "sub_4092DB", "code": "_QWORD *__fastcall sub_4092DB(_QWORD *a1, unsigned __int64 a2)\n{\nunsigned __int64 v2; // rax\nunsigned __int64 v3; // rax\n_QWORD *v5; // [rsp+0h] [rbp-20h]\nunsigned __int64 i; // [rsp+8h] [rbp-18h]\nunsigned __int64 v7; // [rsp+10h] [rbp-10h]\nunsigned __int64 v8; // [rsp+10h] [rbp-10h]\nunsigned __int64 v9; // [rsp+18h] [rbp-8h]\n\nv5 = a1;\nv7 = 0LL;\nv9 = 0LL;\nwhile ( v7 < a2 )\n{\nif ( *(_BYTE *)(*a1 + v7) == 9 )\n{\nv2 = dword_41134C - v9 % (qword_414648 - 1) % dword_41134C;\n}\nelse if ( *(_BYTE *)(*a1 + v7) <= 0x1Fu || *(_BYTE *)(*a1 + v7) == 127 )\n{\nv2 = 2LL;\n}\nelse\n{\nLODWORD(v2) = *(char *)(*a1 + v7) >= 0 || *(_BYTE *)(*a1 + v7) > 0xBFu;\nv2 = (int)v2;\n}\nv9 += v2;\n++v7;\n}\nif ( a1[6] )\n{\nv5 = (_QWORD *)a1[6];\nv8 = 0LL;\nfor ( i = 0LL; v8 < v9 && i < v5[1]; ++i )\n{\nif ( *(_BYTE *)(*v5 + i) == 9 )\n{\nv3 = dword_41134C - v8 % dword_41134C;\n}\nelse if ( *(_BYTE *)(*v5 + i) <= 0x1Fu || *(_BYTE *)(*v5 + i) == 127 )\n{\nv3 = 2LL;\n}\nelse\n{\nLODWORD(v3) = *(char *)(*v5 + i) >= 0 || *(_BYTE *)(*v5 + i) > 0xBFu;\nv3 = (int)v3;\n}\nv8 += v3;\n}\ndo\n{\nif ( *(char *)(*v5 + i) >= 0 )\nbreak;\nif ( *(_BYTE *)(*v5 + i) > 0xBFu )\nbreak;\n++i;\n}\nwhile ( i < v5[1] );\n}\nreturn v5;\n}"}, {"addr": 4232540, "funname": "sub_40955C", "code": "__int64 __fastcall sub_40955C(__int64 a1)\n{\nint v1; // edx\nint v4; // [rsp+1Ch] [rbp-4h]\n\nv4 = *(&qword_414648 + 1) - (qword_414578 != 0LL);\nwhile ( *(_QWORD *)(a1 + 40) && v4 > 0 )\n{\nif ( a1 )\nv1 = *(_QWORD *)(a1 + 16) / (unsigned __int64)qword_414648 + 1;\nelse\nv1 = 1;\nv4 -= v1;\na1 = *(_QWORD *)(a1 + 40);\n}\nreturn a1;\n}"}, {"addr": 4232713, "funname": "sub_409609", "code": "__int64 __fastcall sub_409609(__int64 a1)\n{\nreturn a1;\n}"}, {"addr": 4232744, "funname": "sub_409628", "code": "__int64 __fastcall sub_409628(__int64 a1)\n{\nint v1; // edx\nint v4; // [rsp+1Ch] [rbp-4h]\n\nv4 = *(&qword_414648 + 1) - (qword_414578 != 0LL);\nwhile ( *(_QWORD *)(a1 + 48) && v4 > 0 )\n{\nif ( a1 )\nv1 = *(_QWORD *)(a1 + 16) / (unsigned __int64)qword_414648 + 1;\nelse\nv1 = 1;\nv4 -= v1;\na1 = *(_QWORD *)(a1 + 48);\n}\nreturn a1;\n}"}, {"addr": 4232913, "funname": "sub_4096D1", "code": "__int64 __fastcall sub_4096D1(__int64 a1)\n{\nreturn a1;\n}"}, {"addr": 4232944, "funname": "sub_4096F0", "code": "__int64 __fastcall sub_4096F0(__int64 a1)\n{\nreturn a1;\n}"}, {"addr": 4232975, "funname": "sub_40970F", "code": "__int64 __fastcall sub_40970F(__int64 a1)\n{\nunsigned __int64 v3; // [rsp+8h] [rbp-18h]\n__int64 i; // [rsp+18h] [rbp-8h]\n\nfor ( i = qword_4114C8; i; i = *(_QWORD *)(i + 40) )\n{\nif ( i == qword_411500 )\n{\na1 = qword_411500;\nv3 = qword_411508;\nif ( (unsigned __int64)qword_411508 > *(_QWORD *)(qword_411500 + 8) )\nv3 = *(_QWORD *)(qword_411500 + 8);\ndo\n{\nif ( *(char *)(*(_QWORD *)qword_411500 + v3) >= 0 )\nbreak;\nif ( *(_BYTE *)(*(_QWORD *)qword_411500 + v3) > 0xBFu )\nbreak;\n++v3;\n}\nwhile ( v3 < *(_QWORD *)(qword_411500 + 8) );\nsub_403197(0LL);\nreturn a1;\n}\n}\nreturn a1;\n}"}, {"addr": 4233230, "funname": "sub_40980E", "code": "__int64 sub_40980E()\n{\nreturn qword_4114E0;\n}"}, {"addr": 4233267, "funname": "sub_409833", "code": "bool sub_409833()\n{\nreturn (qword_411340 & 0x400) != 0;\n}"}, {"addr": 4233291, "funname": "sub_40984B", "code": "bool sub_40984B()\n{\nreturn qword_4114F8 == 0;\n}"}, {"addr": 4233310, "funname": "sub_40985E", "code": "bool sub_40985E()\n{\nreturn qword_4114F8 == *(_QWORD *)(qword_4114F0 + 8);\n}"}, {"addr": 4233340, "funname": "sub_40987C", "code": "bool sub_40987C()\n{\nreturn (qword_411340 & 0x10) != 0;\n}"}, {"addr": 4233362, "funname": "sub_409892", "code": "bool sub_409892()\n{\nreturn (qword_411340 & 0x1000) == 0;\n}"}, {"addr": 4233386, "funname": "sub_4098AA", "code": "bool sub_4098AA()\n{\nreturn (qword_411340 & 2) == 0;\n}"}, {"addr": 4233408, "funname": "sub_4098C0", "code": "bool sub_4098C0()\n{\nreturn qword_414590 != 0;\n}"}, {"addr": 4233427, "funname": "sub_4098D3", "code": "_BOOL8 sub_4098D3()\n{\nreturn qword_4114F0 != qword_4114E0 || qword_4114F8 != qword_4114E8;\n}"}, {"addr": 4233486, "funname": "sub_40990E", "code": "bool sub_40990E()\n{\nreturn (qword_411340 & 0x2000) != 0;\n}"}, {"addr": 4233510, "funname": "sub_409926", "code": "bool sub_409926()\n{\nreturn qword_414588 != 0;\n}"}, {"addr": 4233529, "funname": "sub_409939", "code": "bool sub_409939()\n{\nreturn (qword_411340 & 0x10000) != 0;\n}"}, {"addr": 4233553, "funname": "sub_409951", "code": "bool sub_409951()\n{\nreturn (qword_411340 & 0x100) != 0;\n}"}, {"addr": 4234288, "funname": "init", "code": "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\nsigned __int64 v4; // rbp\n__int64 i; // rbx\n\ninit_proc();\nv4 = &off_410DE8 - &off_410DE0;\nif ( v4 )\n{\nfor ( i = 0LL; i != v4; ++i )\n((void (__fastcall *)(_QWORD, __int64, __int64))*(&off_410DE0 + i))(a1, a2, a3);\n}\n}"}, {"addr": 4234384, "funname": "fini", "code": "void fini(void)\n{\n;\n}"}, {"addr": 4234388, "funname": ".term_proc", "code": "void term_proc()\n{\n;\n}"}]